{
  "address": "0xe1C4034Ed4B602540Fd591556A4324bc603D1507",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_valueInterpreter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primitivePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetixPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetixAddressResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "MigratedSharesDuePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "overridePause",
          "type": "bool"
        }
      ],
      "name": "OverridePauseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "failureReturnData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        }
      ],
      "name": "PreRedeemSharesHookFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesReceived",
          "type": "uint256"
        }
      ],
      "name": "SharesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "receivedAssets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "receivedAssetQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "denominationAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToDenom",
          "type": "uint256"
        }
      ],
      "name": "SharesRedeemedToDenom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "VaultProxySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isMigration",
          "type": "bool"
        }
      ],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_buyers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_investmentAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minSharesQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "buyShares",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "sharesReceivedAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "calcEachBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_requireFinality",
          "type": "bool"
        }
      ],
      "name": "calcGav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gav_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_requireFinality",
          "type": "bool"
        }
      ],
      "name": "calcGrossShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "grossShareValue_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_extension",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "callOnExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_feeManagerConfigData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_policyManagerConfigData",
          "type": "bytes"
        }
      ],
      "name": "configureExtensions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDenominationAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "denominationAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_denominationAsset",
          "type": "address"
        }
      ],
      "name": "getInvestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "primitivePriceFeed_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueInterpreter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOverridePause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "overridePause_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesActionTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesActionTimelock_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetixAddressResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetixAddressResolver_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetixPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetixPriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_denominationAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesActionTimelock",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "investAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IComptroller.VaultAction",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "permissionedVaultAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemShares",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_additionalAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assetsToSkip",
          "type": "address[]"
        }
      ],
      "name": "redeemSharesDetailed",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_additionalAssets",
          "type": "address[]"
        }
      ],
      "name": "redeemSharesToDenomDetailed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmountToDenom_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_nextOverridePause",
          "type": "bool"
        }
      ],
      "name": "setOverridePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "vaultCallOnContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63d861323ae3fcc5610c554c5cf80003becef4a0c742522676228a305347c6ce",
  "receipt": {
    "to": null,
    "from": "0xb10bcC8B508174c761CFB1E7143bFE37c4fBC3a1",
    "contractAddress": "0xe1C4034Ed4B602540Fd591556A4324bc603D1507",
    "transactionIndex": 10,
    "gasUsed": "5259584",
    "logsBloom": "0x
    "blockHash": "0xb0f834bac66e14b437da19bf68966d617f3b83a244f00028783839cb2aecfd45",
    "transactionHash": "0x63d861323ae3fcc5610c554c5cf80003becef4a0c742522676228a305347c6ce",
    "logs": [],
    "blockNumber": 27382188,
    "cumulativeGasUsed": "6368743",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4925f5B17e731C16bA4f33eeABd8fE23d683e95F",
    "0x5cBbA5484594598a660636eFb0A1AD953aFa4e32",
    "0x5c1c767FDb33A0FC0740831c6F4F1F3F162d90C9",
    "0xc8A394A3537092D9728B5480070A1bF29c8F3e20",
    "0xC7720b242D037441a0e7C00CfE2ba6DB70b95DdC",
    "0x9889DfAAb3AC441c8E211D7eEda131066c5fa6d2",
    "0x1C65eE4E98012DEFa6110B5B23bc6e8Ab6d07E8A",
    "0xA98c3D3a1Bf847cA20AcC374F75aaD68A1B19fDb",
    "0x482a493EA47903a571b20E35B770aFfE06600a3D",
    "0x93A5c5c7547832c8ebFcCAbc2157D43A9c5E68d4"
  ],
  "solcInputHash": "616bcd197648f809b4b4e612fb09cc9a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valueInterpreter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primitivePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetixPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetixAddressResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"MigratedSharesDuePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"overridePause\",\"type\":\"bool\"}],\"name\":\"OverridePauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failureReturnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"}],\"name\":\"PreRedeemSharesHookFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesReceived\",\"type\":\"uint256\"}],\"name\":\"SharesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivedAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"receivedAssetQuantities\",\"type\":\"uint256[]\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"denominationAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToDenom\",\"type\":\"uint256\"}],\"name\":\"SharesRedeemedToDenom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"VaultProxySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMigration\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investmentAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minSharesQuantities\",\"type\":\"uint256[]\"}],\"name\":\"buyShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sharesReceivedAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"calcEachBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireFinality\",\"type\":\"bool\"}],\"name\":\"calcGav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireFinality\",\"type\":\"bool\"}],\"name\":\"calcGrossShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"callOnExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_feeManagerConfigData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_policyManagerConfigData\",\"type\":\"bytes\"}],\"name\":\"configureExtensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenominationAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_denominationAsset\",\"type\":\"address\"}],\"name\":\"getInvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primitivePriceFeed_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueInterpreter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverridePause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"overridePause_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesActionTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesActionTimelock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetixAddressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetixAddressResolver_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetixPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetixPriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_denominationAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesActionTimelock\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IComptroller.VaultAction\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"permissionedVaultAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemShares\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_additionalAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetsToSkip\",\"type\":\"address[]\"}],\"name\":\"redeemSharesDetailed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_additionalAssets\",\"type\":\"address[]\"}],\"name\":\"redeemSharesToDenomDetailed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmountToDenom_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_nextOverridePause\",\"type\":\"bool\"}],\"name\":\"setOverridePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"vaultCallOnContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activate(address,bool)\":{\"details\":\"No need to assert anything beyond FundDeployer access.\",\"params\":{\"_isMigration\":\"True if a migrated fund is being activated\",\"_vaultProxy\":\"The VaultProxy to attach to the fund\"}},\"buyShares(address[],uint256[],uint256[])\":{\"details\":\"Param arrays have indexes corresponding to individual __buyShares() orders.\",\"params\":{\"_buyers\":\"The accounts for which to buy shares\",\"_investmentAmounts\":\"The amounts of the fund's denomination asset with which to buy shares for the corresponding _buyers\",\"_minSharesQuantities\":\"The minimum quantities of shares to buy with the corresponding _investmentAmounts\"},\"returns\":{\"sharesReceivedAmounts_\":\"The actual amounts of shares received by the corresponding _buyers\"}},\"calcEachBalance(address)\":{\"returns\":{\"balance_\":\"The denomination balance\"}},\"calcGav(bool)\":{\"params\":{\"_requireFinality\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"gav_\":\"The fund GAV\",\"isValid_\":\"True if the conversion rates used to derive the GAV are all valid\"}},\"calcGrossShareValue(bool)\":{\"details\":\"Does not account for any fees outstanding.\",\"params\":{\"_requireFinality\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"grossShareValue_\":\"The amount of the denomination asset per share\",\"isValid_\":\"True if the conversion rates to derive the value are all valid\"}},\"callOnExtension(address,uint256,bytes)\":{\"details\":\"Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\" during calls originating from this function.\",\"params\":{\"_actionId\":\"An ID representing the action to take on the extension (see extension)\",\"_callArgs\":\"The encoded data for the call\",\"_extension\":\"The Extension contract to call (e.g., FeeManager)\"}},\"configureExtensions(bytes,bytes)\":{\"details\":\"No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerLib has been deployed, giving access to its state and interface\",\"params\":{\"_feeManagerConfigData\":\"Encoded config for fees to enable\",\"_policyManagerConfigData\":\"Encoded config for policies to enable\"}},\"destruct()\":{\"details\":\"No need to assert anything beyond FundDeployer access. Calling onlyNotPaused here rather than in the FundDeployer allows the owner to potentially override the pause and rescue unpaid fees.\"},\"getSynthetixAddressResolver()\":{\"returns\":{\"synthetixAddressResolver_\":\"The `SYNTHETIX_ADDRESS_RESOLVER` variable value\"}},\"getSynthetixPriceFeed()\":{\"returns\":{\"synthetixPriceFeed_\":\"The `SYNTHETIX_PRICE_FEED` variable value\"}},\"init(address,uint256)\":{\"details\":\"Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.\",\"params\":{\"_denominationAsset\":\"The asset in which the fund's value should be denominated\",\"_sharesActionTimelock\":\"The minimum number of seconds between any two \\\"shares actions\\\" (buying or selling shares) by the same user\"}},\"permissionedVaultAction(uint8,bytes)\":{\"params\":{\"_action\":\"The enum representing the VaultAction to perform on the VaultProxy\",\"_actionData\":\"The call data for the action to perform\"}},\"redeemShares()\":{\"details\":\"See __redeemShares() for further detail\",\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the redeemer\",\"payoutAssets_\":\"The assets paid out to the redeemer\"}},\"redeemSharesDetailed(uint256,address[],address[])\":{\"details\":\"Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail.\",\"params\":{\"_additionalAssets\":\"Additional (non-tracked) assets to claim\",\"_assetsToSkip\":\"Tracked assets to forfeit\",\"_sharesQuantity\":\"The quantity of shares to redeem\"},\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the redeemer\",\"payoutAssets_\":\"The assets paid out to the redeemer\"}},\"setOverridePause(bool)\":{\"params\":{\"_nextOverridePause\":\"True if the pause should be overrode\"}},\"vaultCallOnContract(address,bytes4,bytes)\":{\"params\":{\"_contract\":\"The contract to call\",\"_encodedArgs\":\"The encoded arguments for the call\",\"_selector\":\"The selector to call\"}}},\"title\":\"ComptrollerLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activate(address,bool)\":{\"notice\":\"Activates the fund by attaching a VaultProxy and activating all Extensions\"},\"buyShares(address[],uint256[],uint256[])\":{\"notice\":\"Buys shares in the fund for multiple sets of criteria\"},\"calcEachBalance(address)\":{\"notice\":\"Calculates the denomination balance of the fund\"},\"calcGav(bool)\":{\"notice\":\"Calculates the gross asset value (GAV) of the fund\"},\"calcGrossShareValue(bool)\":{\"notice\":\"Calculates the gross value of 1 unit of shares in the fund's denomination asset\"},\"callOnExtension(address,uint256,bytes)\":{\"notice\":\"Calls a specified action on an Extension\"},\"configureExtensions(bytes,bytes)\":{\"notice\":\"Configure the extensions of a fund\"},\"destruct()\":{\"notice\":\"Remove the config for a fund\"},\"getDenominationAsset()\":{\"notice\":\"Gets the `denominationAsset` variable\"},\"getLibRoutes()\":{\"notice\":\"Gets the routes for the various contracts used by all funds\"},\"getOverridePause()\":{\"notice\":\"Gets the `overridePause` variable\"},\"getSharesActionTimelock()\":{\"notice\":\"Gets the `sharesActionTimelock` variable\"},\"getSynthetixAddressResolver()\":{\"notice\":\"Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\"},\"getSynthetixPriceFeed()\":{\"notice\":\"Gets the `SYNTHETIX_PRICE_FEED` variable\"},\"getVaultProxy()\":{\"notice\":\"Gets the `vaultProxy` variable\"},\"init(address,uint256)\":{\"notice\":\"Initializes a fund with its core config\"},\"permissionedVaultAction(uint8,bytes)\":{\"notice\":\"Makes a permissioned, state-changing call on the VaultProxy contract\"},\"redeemShares()\":{\"notice\":\"Redeem all of the sender's shares for a proportionate slice of the fund's assets\"},\"redeemSharesDetailed(uint256,address[],address[])\":{\"notice\":\"Redeem a specified quantity of the sender's shares for a proportionate slice of the fund's assets, optionally specifying additional assets and assets to skip.\"},\"setOverridePause(bool)\":{\"notice\":\"Sets or unsets an override on a release-wide pause\"},\"vaultCallOnContract(address,bytes4,bytes)\":{\"notice\":\"Makes an arbitrary call with the VaultProxy contract as the sender\"}},\"notice\":\"The core logic library shared by all funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":\"ComptrollerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDispatcher Interface\\r\\ninterface IDispatcher {\\r\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function deployVaultProxy(\\r\\n        address _vaultLib,\\r\\n        address _owner,\\r\\n        address _vaultAccessor,\\r\\n        string calldata _fundName\\r\\n    ) external returns (address vaultProxy_);\\r\\n\\r\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\r\\n\\r\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address fundDeployer_);\\r\\n\\r\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address nextFundDeployer_,\\r\\n            address nextVaultAccessor_,\\r\\n            address nextVaultLib_,\\r\\n            uint256 executableTimestamp_\\r\\n        );\\r\\n\\r\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\r\\n\\r\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\r\\n\\r\\n    function getOwner() external view returns (address owner_);\\r\\n\\r\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\r\\n\\r\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 secondsRemaining_);\\r\\n\\r\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasExecutableRequest_);\\r\\n\\r\\n    function hasMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasMigrationRequest_);\\r\\n\\r\\n    function removeNominatedOwner() external;\\r\\n\\r\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\r\\n\\r\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\r\\n\\r\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\r\\n\\r\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\r\\n\\r\\n    function signalMigration(\\r\\n        address _vaultProxy,\\r\\n        address _nextVaultAccessor,\\r\\n        address _nextVaultLib,\\r\\n        bool _bypassFailure\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9f2f0d998dc8beb620c2b4f0758b3884437b1dab9379eac561c8d98d70e1a81a\",\"license\":\"GPL-3.0\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IMigratableVault Interface\\r\\n/// @dev DO NOT EDIT CONTRACT\\r\\ninterface IMigratableVault {\\r\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\r\\n\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external;\\r\\n\\r\\n    function setAccessor(address _nextAccessor) external;\\r\\n\\r\\n    function setVaultLib(address _nextVaultLib) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1210d49cd7c30f8d7ee6d65236a94bfd7d7572d256d422b8adf807f036711d3b\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {\\r\\n        PreLaunch,\\r\\n        Live,\\r\\n        Paused\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x744fb5f08505c174df34eccb6b8f80bb4f2af66b4eacc46c38b51f1e766a422e\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../extensions/IExtension.sol\\\";\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../../../infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../../utils/AssetFinalityResolver.sol\\\";\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\nimport \\\"../../../extensions/fee-manager/fees/ProtocolFee.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\n/// @title ComptrollerLib Contract\\n/// @notice The core logic library shared by all funds\\ncontract ComptrollerLib is IComptroller, AssetFinalityResolver {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\n\\n    event OverridePauseSet(bool indexed overridePause);\\n\\n    event PreRedeemSharesHookFailed(\\n        bytes failureReturnData,\\n        address redeemer,\\n        uint256 sharesQuantity\\n    );\\n\\n    event SharesBought(\\n        address indexed caller,\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 sharesIssued,\\n        uint256 sharesReceived\\n    );\\n\\n    event SharesRedeemed(\\n        address indexed redeemer,\\n        uint256 sharesQuantity,\\n        address[] receivedAssets,\\n        uint256[] receivedAssetQuantities\\n    );\\n\\n    event SharesRedeemedToDenom(\\n        address indexed redeemer,\\n        uint256 sharesQuantity,\\n        address denominationAsset,\\n        uint256 amountToDenom\\n    );\\n\\n    event VaultProxySet(address vaultProxy);\\n\\n    // Constants and immutables - shared by all proxies\\n    uint256 private constant SHARES_UNIT = 10**18;\\n    uint256 private constant RATE_DIVISOR = 10**18;\\n    address private immutable DISPATCHER;\\n    address private immutable FUND_DEPLOYER;\\n    address private immutable FEE_MANAGER;\\n    address private immutable INTEGRATION_MANAGER;\\n    address private immutable PRIMITIVE_PRICE_FEED;\\n    address private immutable POLICY_MANAGER;\\n    address private immutable VALUE_INTERPRETER;\\n    address private immutable PROTOCOLFEE;\\n    address internal denominationAsset;\\n    address internal vaultProxy;\\n    bool  internal isLib;\\n\\n    // Storage\\n    // Allows a fund owner to override a release-level pause\\n    bool internal overridePause;\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\n    bool  internal permissionedVaultActionAllowed;\\n    // A mutex to protect against reentrancy\\n    bool internal reentranceLocked;\\n    // A timelock between any \\\"shares actions\\\" (i.e., buy and redeem shares), per-account\\n    uint256 internal sharesActionTimelock;\\n    mapping(address => uint256) internal acctToLastSharesAction;\\n\\n    uint256 internal feeDeposit;\\n    uint256 internal feeWithdraw;\\n    address internal daoAddress;\\n    uint256 internal buyFeeAmount;\\n    \\n    mapping(address => uint256) public investAmount;\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    modifier allowsPermissionedVaultAction() {\\n        __assertPermissionedVaultActionNotAllowed();\\n        permissionedVaultActionAllowed = true;\\n        _;\\n        permissionedVaultActionAllowed = false;\\n    }\\n\\n    modifier locksReentrance () {\\n        __assertNotReentranceLocked();\\n        reentranceLocked = true;\\n        _;\\n        reentranceLocked = false;\\n    }\\n\\n    modifier onlyActive () {\\n        __assertIsActive(vaultProxy);\\n        _;\\n    }\\n\\n    modifier onlyNotPaused () {\\n        __assertNotPaused();\\n        _;\\n    }\\n\\n    modifier onlyFundDeployer () {\\n        __assertIsFundDeployer(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner () {\\n        __assertIsOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier timelockedSharesAction(address _account) {\\n        __assertSharesActionNotTimelocked(_account);\\n        _;\\n        acctToLastSharesAction[_account] = block.timestamp;\\n    }\\n\\n    // ASSERTION HELPERS\\n\\n    // Modifiers are inefficient in terms of contract size,\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\n\\n    /// @dev Since vaultProxy is set during activate(),\\n    /// we can check that var rather than storing additional state\\n    function __assertIsActive(address _vaultProxy) private pure {\\n        require(_vaultProxy != address(0), \\\"Fund not active\\\");\\n    }\\n\\n    function __assertIsFundDeployer(address _who) private view {\\n        require(_who == FUND_DEPLOYER, \\\"Only FundDeployer callable\\\");\\n    }\\n\\n    function __assertIsOwner(address _who) private view {\\n        require(_who == IVault(vaultProxy).getOwner(), \\\"Only fund owner callable\\\");\\n    }\\n\\n    function __assertLowLevelCall(bool _success, bytes memory _returnData) private pure {\\n        require(_success, string(_returnData));\\n    }\\n\\n    function __assertNotPaused() private view {\\n        require(!__fundIsPaused(), \\\"Fund is paused\\\");\\n    }\\n\\n    function __assertNotReentranceLocked() private view {\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\n    }\\n\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\n    }\\n\\n    function __assertSharesActionNotTimelocked(address _account) private view {\\n        require(\\n            block.timestamp.sub(acctToLastSharesAction[_account]) >= sharesActionTimelock,\\n            \\\"Shares action timelocked\\\"\\n        );\\n    }\\n\\n    constructor(\\n        address _dispatcher,\\n        address _fundDeployer,\\n        address _valueInterpreter,\\n        address _feeManager,\\n        address _integrationManager,\\n        address _policyManager,\\n        address _primitivePriceFeed,\\n        address _synthetixPriceFeed,\\n        address _protocolFee,\\n        address _synthetixAddressResolver\\n    ) public AssetFinalityResolver(_synthetixPriceFeed, _synthetixAddressResolver) {\\n        DISPATCHER = _dispatcher;\\n        FEE_MANAGER = _feeManager;\\n        FUND_DEPLOYER = _fundDeployer;\\n        INTEGRATION_MANAGER = _integrationManager;\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\n        POLICY_MANAGER = _policyManager;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n        PROTOCOLFEE = _protocolFee;\\n        isLib = true;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Calls a specified action on an Extension\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\n    /// @param _callArgs The encoded data for the call\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\n    /// during calls originating from this function.\\n    function callOnExtension(\\n        address _extension,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override onlyNotPaused onlyActive locksReentrance allowsPermissionedVaultAction {\\n        require(\\n            _extension == FEE_MANAGER || _extension == INTEGRATION_MANAGER,\\n            \\\"callOnExtension: _extension invalid\\\"\\n        );\\n\\n        IExtension(_extension).receiveCallFromComptroller(msg.sender, _actionId, _callArgs);\\n    }\\n\\n    /// @notice Sets or unsets an override on a release-wide pause\\n    /// @param _nextOverridePause True if the pause should be overrode\\n    function setOverridePause(bool _nextOverridePause) external onlyOwner {\\n        require(_nextOverridePause != overridePause, \\\"setOverridePause: Value already set\\\");\\n\\n        overridePause = _nextOverridePause;\\n\\n        emit  OverridePauseSet (_nextOverridePause);\\n    }\\n\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _selector The selector to call\\n    /// @param _encodedArgs The encoded arguments for the call\\n    function vaultCallOnContract(\\n        address _contract,\\n        bytes4 _selector,\\n        bytes calldata _encodedArgs\\n    ) external onlyNotPaused onlyActive onlyOwner {\\n        require(\\n            IFundDeployer(FUND_DEPLOYER).isRegisteredVaultCall(_contract, _selector),\\n            \\\"vaultCallOnContract: Unregistered\\\"\\n        );\\n\\n        IVault(vaultProxy).callOnContract(_contract, abi.encodePacked(_selector, _encodedArgs));\\n    }\\n\\n    /// @dev Helper to check whether the release is paused, and that there is no local override\\n    function __fundIsPaused() private view returns (bool) {\\n        return\\n            IFundDeployer(FUND_DEPLOYER).getReleaseStatus() ==\\n            IFundDeployer.ReleaseStatus.Paused &&\\n            !overridePause;\\n    }\\n\\n    ////////////////////////////////\\n    // PERMISSIONED VAULT ACTIONS //\\n    ////////////////////////////////\\n\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\n    /// @param _actionData The call data for the action to perform\\n    function permissionedVaultAction(VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n        onlyNotPaused\\n        onlyActive\\n    {\\n        __assertPermissionedVaultAction(msg.sender, _action);\\n\\n        if (_action == VaultAction.AddTrackedAsset) {\\n            __vaultActionAddTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\n            __vaultActionApproveAssetSpender(_actionData);\\n        } else if (_action == VaultAction.BurnShares) {\\n            __vaultActionBurnShares(_actionData);\\n        } else if (_action == VaultAction.MintShares) {\\n            __vaultActionMintShares(_actionData);\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\n            __vaultActionRemoveTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.TransferShares) {\\n            __vaultActionTransferShares(_actionData);\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\n            __vaultActionWithdrawAssetTo(_actionData);\\n        }\\n    }\\n\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction\\n    function __assertPermissionedVaultAction(address _caller, VaultAction _action) private view {\\n        require(\\n            permissionedVaultActionAllowed,\\n            \\\"__assertPermissionedVaultAction: No action allowed\\\"\\n        );\\n\\n        if (_caller == INTEGRATION_MANAGER) {\\n            require(\\n                _action == VaultAction.ApproveAssetSpender ||\\n                    _action == VaultAction.AddTrackedAsset ||\\n                    _action == VaultAction.RemoveTrackedAsset ||\\n                    _action == VaultAction.WithdrawAssetTo,\\n                \\\"__assertPermissionedVaultAction: Not valid for IntegrationManager\\\"\\n            );\\n        } else if (_caller == FEE_MANAGER) {\\n            require(\\n                _action == VaultAction.BurnShares ||\\n                    _action == VaultAction.MintShares ||\\n                    _action == VaultAction.TransferShares,\\n                \\\"__assertPermissionedVaultAction: Not valid for FeeManager\\\"\\n            );\\n        } else {\\n            revert(\\\"__assertPermissionedVaultAction: Not a valid actor\\\");\\n        }\\n    }\\n\\n    /// @dev Helper to add a tracked asset to the fund\\n    function __vaultActionAddTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n        IVault(vaultProxy).addTrackedAsset(asset);\\n    }\\n\\n    /// @dev Helper to grant a spender an allowance for a fund's asset\\n    function __vaultActionApproveAssetSpender(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).approveAssetSpender(asset, target, amount);\\n    }\\n\\n    /// @dev Helper to burn fund shares for a particular account\\n    function __vaultActionBurnShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).burnShares(target, amount);\\n    }\\n\\n    /// @dev Helper to mint fund shares to a particular account\\n    function __vaultActionMintShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).mintShares(target, amount);\\n    }\\n\\n    /// @dev Helper to remove a tracked asset from the fund\\n    function __vaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n\\n        // Allowing this to fail silently makes it cheaper and simpler\\n        // for Extensions to not query for the denomination asset\\n        if (asset != denominationAsset) {\\n            IVault(vaultProxy).removeTrackedAsset(asset);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer fund shares from one account to another\\n    function __vaultActionTransferShares(bytes memory _actionData) private {\\n        (address from, address to, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).transferShares(from, to, amount);\\n    }\\n\\n    /// @dev Helper to withdraw an asset from the VaultProxy to a given account\\n    function __vaultActionWithdrawAssetTo(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).withdrawAssetTo(asset, target, amount);\\n    }\\n\\n    ///////////////\\n    // LIFECYCLE //\\n    ///////////////\\n\\n    /// @notice Initializes a fund with its core config\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\n    /// (buying or selling shares) by the same user\\n    /// @dev Pseudo-constructor per proxy.\\n    /// No need to assert access because this is called atomically on deployment,\\n    /// and once it's called, it cannot be called again.\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\n        require(denominationAsset == address(0), \\\"init: Already initialized\\\");\\n        require(\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_denominationAsset),\\n            \\\"init: Bad denomination asset\\\"\\n        );\\n\\n        denominationAsset = _denominationAsset;\\n        sharesActionTimelock = _sharesActionTimelock;\\n    }\\n\\n    /// @notice Configure the extensions of a fund\\n    /// @param _feeManagerConfigData Encoded config for fees to enable\\n    /// @param _policyManagerConfigData Encoded config for policies to enable\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Called atomically with init(), but after ComptrollerLib has been deployed,\\n    /// giving access to its state and interface\\n    function configureExtensions(\\n        bytes calldata _feeManagerConfigData,\\n        bytes calldata _policyManagerConfigData\\n    ) external override onlyFundDeployer {\\n        if (_feeManagerConfigData.length > 0) {\\n            IExtension(FEE_MANAGER).setConfigForFund(_feeManagerConfigData);\\n        }\\n        if (_policyManagerConfigData.length > 0) {\\n            IExtension(POLICY_MANAGER).setConfigForFund(_policyManagerConfigData);\\n        }\\n    }\\n\\n    /// @notice Activates the fund by attaching a VaultProxy and activating all Extensions\\n    /// @param _vaultProxy The VaultProxy to attach to the fund\\n    /// @param _isMigration True if a migrated fund is being activated\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    function activate(address _vaultProxy, bool _isMigration) external override onlyFundDeployer {\\n        vaultProxy = _vaultProxy;\\n\\n        emit VaultProxySet(_vaultProxy);\\n\\n        if (_isMigration) {\\n            // Distribute any shares in the VaultProxy to the fund owner.\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\n            // to payout fee shares owed during migration, these shares are not lost.\\n            uint256 sharesDue = ERC20(_vaultProxy).balanceOf(_vaultProxy);\\n            if (sharesDue > 0) {\\n                IVault (_vaultProxy). transferShares (\\n                    _vaultProxy,\\n                    IVault(_vaultProxy).getOwner(),\\n                    sharesDue\\n                );\\n\\n                emit MigratedSharesDuePaid(sharesDue);\\n            }\\n        }\\n\\n        // Note: a future release could consider forcing the adding of a tracked asset here,\\n        // just in case a fund is migrating from an old configuration where they are not able\\n        // to remove an asset to get under the tracked assets limit\\n        IVault(_vaultProxy).addTrackedAsset(denominationAsset);\\n\\n        // Activate extensions\\n        IExtension(FEE_MANAGER).activateForFund(_isMigration);\\n        IExtension(INTEGRATION_MANAGER).activateForFund(_isMigration);\\n        IExtension(POLICY_MANAGER).activateForFund(_isMigration);\\n    }\\n\\n    /// @notice Remove the config for a fund\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Calling onlyNotPaused here rather than in the FundDeployer allows\\n    /// the owner to potentially override the pause and rescue unpaid fees.\\n    function destruct()\\n        external\\n        override\\n        onlyFundDeployer\\n        onlyNotPaused\\n        allowsPermissionedVaultAction\\n    {\\n        // Failsafe to protect the libs against selfdestruct\\n        require(!isLib, \\\"destruct: Only delegate callable\\\");\\n\\n        // Deactivate the extensions\\n        IExtension(FEE_MANAGER).deactivateForFund();\\n        IExtension(INTEGRATION_MANAGER).deactivateForFund();\\n        IExtension(POLICY_MANAGER).deactivateForFund();\\n\\n        // Delete storage of ComptrollerProxy\\n        // There should never be ETH in the ComptrollerLib, so no need to waste gas\\n        // to get the fund owner\\n        selfdestruct(address(0));\\n    }\\n\\n    ////////////////\\n    // ACCOUNTING //\\n    ////////////////\\n\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return gav_ The fund GAV\\n    /// @return isValid_ True if the conversion rates used to derive the GAV are all valid\\n    function calcGav(bool _requireFinality) public override returns (uint256 gav_, bool isValid_) {\\n        address vaultProxyAddress = vaultProxy;\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\n        if (assets.length == 0) {\\n            return (0, true);\\n        }\\n\\n        uint256[] memory balances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            balances[i] = __finalizeIfSynthAndGetAssetBalance(\\n                vaultProxyAddress,\\n                assets[i],\\n                _requireFinality\\n            );\\n        }\\n\\n        (gav_, isValid_) = IValueInterpreter(VALUE_INTERPRETER).calcCanonicalAssetsTotalValue(\\n            assets,\\n            balances,\\n            denominationAsset\\n        );\\n\\n        return (gav_, isValid_);\\n    }\\n\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\n    /// @return isValid_ True if the conversion rates to derive the value are all valid\\n    /// @dev Does not account for any fees outstanding.\\n    function calcGrossShareValue(bool _requireFinality)\\n        external\\n        override\\n        returns ( uint256   grossShareValue_ , bool   isValid_ )\\n    {\\n        uint256 gav ;\\n        (gav, isValid_) = calcGav(_requireFinality);\\n\\n        grossShareValue_ = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxy).totalSupply(),\\n            10**uint256(ERC20(denominationAsset).decimals())\\n        );\\n\\n        return (grossShareValue_, isValid_);\\n    }\\n\\n    /// @dev Helper for calculating the gross share value\\n    function __calcGrossShareValue(\\n        uint256   _gav ,\\n        uint256 _sharesSupply,\\n        uint256 _denominationAssetUnit\\n    ) private pure returns (uint256 grossShareValue_) {\\n        if (_sharesSupply == 0) {\\n            return _denominationAssetUnit;\\n        }\\n\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\n    }\\n\\n    /// @notice Calculates the denomination balance of the fund\\n    /// @return balance_ The denomination balance\\n    function calcEachBalance(address _asset) external override returns (uint256 balance_) {\\n        address vaultProxyAddress = vaultProxy;\\n\\n        balance_ = __finalizeIfSynthAndGetAssetBalance(\\n            vaultProxyAddress,\\n            _asset,\\n            true\\n        );\\n\\n        return balance_;\\n    }\\n\\n    ///////////////////\\n    // PARTICIPATION //\\n    ///////////////////\\n\\n    // BUY SHARES\\n\\n    /// @notice Buys shares in the fund for multiple sets of criteria\\n    /// @param _buyers The accounts for which to buy shares\\n    /// @param _investmentAmounts The amounts of the fund's denomination asset\\n    /// with which to buy shares for the corresponding _buyers\\n    /// @param _minSharesQuantities The minimum quantities of shares to buy\\n    /// with the corresponding _investmentAmounts\\n    /// @return sharesReceivedAmounts_ The actual amounts of shares received\\n    /// by the corresponding _buyers\\n    /// @dev Param arrays have indexes corresponding to individual __buyShares() orders.\\n    function buyShares(\\n        address[] calldata _buyers,\\n        uint256 [] calldata _investmentAmounts ,\\n        uint256 [] calldata _minSharesQuantities\\n    )\\n        external\\n        onlyNotPaused\\n        locksReentrance\\n        allowsPermissionedVaultAction\\n        returns (uint256[] memory sharesReceivedAmounts_)\\n    {\\n        require(_buyers.length > 0, \\\"buyShares: Empty _buyers\\\");\\n        require(\\n            _buyers.length == _investmentAmounts.length &&\\n                _buyers.length == _minSharesQuantities.length,\\n            \\\"buyShares: Unequal arrays\\\"\\n        );\\n\\n        address vaultProxyCopy = vaultProxy;\\n        __assertIsActive(vaultProxyCopy);\\n        require(\\n            !IDispatcher(DISPATCHER).hasMigrationRequest(vaultProxyCopy),\\n            \\\"buyShares: Pending migration\\\"\\n        );\\n\\n        (uint256 gav, bool gavIsValid) = calcGav(true);\\n        require(gavIsValid, \\\"buyShares: Invalid GAV\\\");\\n\\n        __buySharesSetupHook(msg.sender, _investmentAmounts, gav);\\n\\n        address denominationAssetCopy = denominationAsset;\\n        uint256 sharePrice = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxyCopy).totalSupply(),\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\n        );\\n\\n        //Get DAO address and deposit fee for protocol\\n        daoAddress = ProtocolFee(PROTOCOLFEE).getDaoAddress();\\n        feeDeposit = ProtocolFee(PROTOCOLFEE).getFeeDeposit();\\n\\n        sharesReceivedAmounts_ = new uint256[](_buyers.length);\\n        for (uint256 i; i < _buyers.length; i++) {\\n            sharesReceivedAmounts_[i] = __buyShares(\\n                _buyers[i],\\n                _investmentAmounts[i],\\n                _minSharesQuantities[i],\\n                vaultProxyCopy,\\n                sharePrice,\\n                gav,\\n                denominationAssetCopy\\n            );\\n\\n            gav = gav.add(_investmentAmounts [i]);\\n        }\\n        \\n        __buySharesCompletedHook(msg.sender, sharesReceivedAmounts_, gav);\\n\\n        return sharesReceivedAmounts_;\\n    }\\n\\n    // Get invest amount\\n    function getInvestAmount(address _denominationAsset) external view returns (uint256) {\\n        return investAmount[_denominationAsset];\\n    }\\n\\n    /// @dev Helper to buy shares\\n    function __buyShares(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256   _minSharesQuantity ,\\n        address _vaultProxy,\\n        uint256 _sharePrice,\\n        uint256 _preBuySharesGav,\\n        address _denominationAsset\\n    ) private timelockedSharesAction(_buyer) returns (uint256 sharesReceived_) {\\n        require(_investmentAmount > 0, \\\"__buyShares: Empty _investmentAmount\\\");\\n\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares\\n        __preBuySharesHook(_buyer, _investmentAmount, _minSharesQuantity, _preBuySharesGav);\\n\\n        // Calculate the amount of shares to issue with the investment amount\\n        buyFeeAmount = _investmentAmount.mul(feeDeposit).div(RATE_DIVISOR);\\n        uint256 investmentAmountWithFee = _investmentAmount.sub(buyFeeAmount);\\n        uint256 sharesIssued = investmentAmountWithFee.mul(SHARES_UNIT).div(_sharePrice);\\n\\n        // Mint shares to the buyer\\n        uint256 prevBuyerShares = ERC20(_vaultProxy).balanceOf(_buyer);\\n        IVault(_vaultProxy).mintShares(_buyer, sharesIssued);\\n\\n        // Transfer the investment asset to the fund.\\n        ERC20(_denominationAsset).safeTransferFrom(msg.sender, _vaultProxy, investmentAmountWithFee);\\n        investAmount[_denominationAsset] = investAmount[_denominationAsset].add(_investmentAmount);\\n        //==== Transfer Asset amount of fees from VaultProxy to DAO Wallet\\n        if (daoAddress != address(0) && buyFeeAmount > 0) {\\n            ERC20(_denominationAsset).safeTransferFrom(msg.sender, daoAddress, buyFeeAmount);\\n        }\\n\\n        // Gives Extensions a chance to run logic after shares are issued\\n        __postBuySharesHook(_buyer, _investmentAmount, sharesIssued, _preBuySharesGav);\\n\\n        // The number of actual shares received may differ from shares issued due to\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\n        sharesReceived_ = ERC20(_vaultProxy).balanceOf(_buyer).sub(prevBuyerShares);\\n        require(\\n            sharesReceived_ >= _minSharesQuantity,\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\n        );\\n\\n        emit SharesBought(msg.sender, _buyer, _investmentAmount, sharesIssued, sharesReceived_);\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @dev Helper for Extension actions after all __buyShares() calls are made\\n    function __buySharesCompletedHook(\\n        address _caller,\\n        uint256[] memory _sharesReceivedAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions before any __buyShares() calls are made\\n    function __buySharesSetupHook(\\n        address _caller,\\n        uint256[] memory _investmentAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately prior to issuing shares.\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\n    /// the GAV value for the current policies as there is for the fees.\\n    function __preBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256   _minSharesQuantity ,\\n        uint256 _gav\\n    ) private {\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity),\\n            _gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity, _gav)\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\n    /// Same comment applies from __preBuySharesHook() above.\\n    function __postBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _sharesIssued,\\n        uint256 _preBuySharesGav\\n    ) private {\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\n            gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\n        );\\n    }\\n\\n    // REDEEM SHARES\\n\\n    /// @notice Redeem all of the sender's shares for a proportionate slice of the fund's assets\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev See __redeemShares() for further detail\\n    function redeemShares()\\n        external\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {           \\n        return\\n            __redeemShares(\\n                msg.sender,\\n                ERC20(vaultProxy).balanceOf(msg.sender),\\n                new address[](0),\\n                new address[](0)\\n            );\\n    }\\n\\n    /// @notice Redeem a specified quantity of the sender's shares for a proportionate slice of\\n    /// the fund's assets, optionally specifying additional assets and assets to skip.\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\n    /// @param _assetsToSkip Tracked assets to forfeit\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\n    /// only be exercised if a bad asset is causing redemption to fail.\\n    function redeemSharesDetailed(\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\n        return __redeemShares(msg.sender, _sharesQuantity, _additionalAssets, _assetsToSkip);\\n    }\\n\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\n    /// All input arrays are assumed to be unique.\\n    function __parseRedemptionPayoutAssets(\\n        address[] memory _trackedAssets,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) private pure returns (address[] memory payoutAssets_) {\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\n        if (_additionalAssets.length == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\n        uint256 additionalItemsCount;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\n                indexesToAdd[i] = true;\\n                additionalItemsCount++;\\n            }\\n        }\\n        if (additionalItemsCount == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\n        }\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (indexesToAdd[i]) {\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\n                payoutAssetsIndex++;\\n            }\\n        }\\n\\n        return payoutAssets_;\\n    }\\n\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\n    function __preRedeemSharesHook(address _redeemer, uint256 _sharesQuantity)\\n        private\\n        allowsPermissionedVaultAction\\n    {\\n        try\\n            IFeeManager(FEE_MANAGER).invokeHook(\\n                IFeeManager.FeeHook.PreRedeemShares,\\n                abi.encode(_redeemer, _sharesQuantity),\\n                0\\n            )\\n        {} catch ( bytes   memory   reason ) {\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesQuantity);\\n        }\\n    }\\n\\n    function __calcRedeemShares(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) \\n        private\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_, uint256[] memory assetAmountToFees_, uint256 sharesSupply_)\\n    {\\n        require(_sharesQuantity > 0, \\\"__calcRedeemShares: _sharesQuantity must be >0\\\");\\n        require(\\n            _additionalAssets.isUniqueSet(),\\n            \\\"__calcRedeemShares: _additionalAssets contains duplicates\\\"\\n        );\\n        require(_assetsToSkip.isUniqueSet(), \\\"__calcRedeemShares: _assetsToSkip contains duplicates\\\");\\n\\n        IVault vaultProxyContract = IVault(vaultProxy);\\n\\n        // Only apply the sharesActionTimelock when a migration is not pending\\n        if (!IDispatcher(DISPATCHER).hasMigrationRequest(address(vaultProxyContract))) {\\n            __assertSharesActionNotTimelocked(_redeemer);\\n            acctToLastSharesAction[_redeemer] = block.timestamp;\\n        }\\n\\n        // When a fund is paused, settling fees will be skipped\\n        if (!__fundIsPaused()) {\\n            __preRedeemSharesHook(_redeemer, _sharesQuantity);\\n        }\\n\\n        // Check the shares quantity against the user's balance after settling fees\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\n        require(\\n            _sharesQuantity <= sharesContract.balanceOf(_redeemer),\\n            \\\"__calcRedeemShares: Insufficient shares\\\"\\n        );\\n\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\n            vaultProxyContract.getTrackedAssets(),\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n        require(payoutAssets_.length > 0, \\\"__calcRedeemShares: No payout assets\\\");\\n\\n        // Calculate payout asset amounts due to redeemer\\n        feeWithdraw = ProtocolFee(PROTOCOLFEE).getFeeWithdraw();\\n        console.log(\\\"====sol:feeWithdraw::\\\", feeWithdraw);\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\n        assetAmountToFees_ = new uint256[](payoutAssets_.length);\\n        sharesSupply_ = sharesContract.totalSupply();\\n        \\n        uint256 redeemFeeAmount = _sharesQuantity.mul(feeWithdraw).div(RATE_DIVISOR);        \\n        uint256 sharesQuantityWithoutFee = _sharesQuantity.sub(redeemFeeAmount);\\n\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\n            uint256 assetBalance = __finalizeIfSynthAndGetAssetBalance(\\n                address(vaultProxyContract),\\n                payoutAssets_[i],\\n                true\\n            );\\n            require(assetBalance > 0, \\\"__calcRedeemShares: Payout amount must be greater 0\\\");\\n            \\n            payoutAmounts_[i] = assetBalance.mul(sharesQuantityWithoutFee).div(sharesSupply_);\\n            assetAmountToFees_[i] = assetBalance.mul(redeemFeeAmount).div(sharesSupply_);\\n        }\\n\\n        return (payoutAssets_, payoutAmounts_, assetAmountToFees_, sharesSupply_);\\n    }\\n\\n    /// @dev Helper to redeem shares.\\n    function __redeemShares(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    )\\n        private\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {   \\n        uint256[] memory assetAmountToFees_;\\n        uint256 sharesSupply_;\\n        (\\n            payoutAssets_, \\n            payoutAmounts_, \\n            assetAmountToFees_,\\n            sharesSupply_\\n        ) = __calcRedeemShares(\\n            _redeemer,\\n            _sharesQuantity,\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n\\n        burnAndTransfer(\\n            _redeemer, \\n            _sharesQuantity, \\n            payoutAssets_, \\n            payoutAmounts_, \\n            assetAmountToFees_, \\n            sharesSupply_, \\n            0, \\n            true\\n        );        \\n\\n        emit SharesRedeemed(_redeemer, _sharesQuantity, payoutAssets_, payoutAmounts_);\\n\\n        return (payoutAssets_, payoutAmounts_);\\n    }\\n\\n    function burnAndTransfer(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _payoutAssets, \\n        uint256[] memory _payoutAmounts, \\n        uint256[] memory _assetAmountToFees,\\n        uint256 _sharesSupply,\\n        uint256 _redeemAmountToDenom,\\n        bool _redeemType\\n    ) private {\\n        // Burn the shares.\\n        IVault vaultProxyContract = IVault(vaultProxy);      \\n        vaultProxyContract.burnShares(_redeemer, _sharesQuantity);\\n        daoAddress = ProtocolFee(PROTOCOLFEE).getDaoAddress();\\n\\n        // Transfer payout asset amounts due to redeemer\\n        for (uint256 i; i < _payoutAssets.length; i++) {\\n\\n            if (_sharesQuantity == _sharesSupply) {\\n                if (_payoutAssets[i] != denominationAsset) {\\n                    vaultProxyContract.removeTrackedAsset(_payoutAssets[i]);\\n                }\\n            }\\n\\n            // Transfer payout assets individually to a redeemer on SharesRedeemed()\\n            if (_redeemType) {\\n                if (_payoutAmounts[i] > 0) {\\n                    vaultProxyContract.withdrawAssetTo(_payoutAssets[i], _redeemer, _payoutAmounts[i]);\\n                }\\n            } \\n            // Transfer denomination Asset amount to redeemer on SharesRedeemedToDenom()\\n            else {\\n                if(_redeemAmountToDenom > 0) {\\n                    vaultProxyContract.withdrawAssetTo(denominationAsset, _redeemer, _redeemAmountToDenom);\\n                }\\n            }            \\n\\n            // Transfer fee asset amount to protocol(DAO wallet address)\\n            if (_assetAmountToFees[i] > 0 && daoAddress != address(0)) {\\n                vaultProxyContract.withdrawAssetTo(_payoutAssets[i], daoAddress, _assetAmountToFees[i]);\\n            }\\n        }   \\n    }\\n\\n    function redeemSharesToDenomDetailed(\\n        address _adapter,\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets\\n    ) external returns (uint256 redeemAmountToDenom_) {\\n        (\\n            address[] memory payoutAssets, \\n            uint256[] memory payoutAmounts, \\n            uint256[] memory assetAmountToFees,\\n            uint256 sharesSupply\\n        ) = __calcRedeemShares(msg.sender, _sharesQuantity, _additionalAssets, new address[](0));\\n\\n        // initial total denominationAsset Amount of Vault\\n        uint256 totalDenomAmountBeforeSwap = ERC20(denominationAsset).balanceOf(vaultProxy);   \\n        console.log(\\\"===sol-BeforeSwap\\\", totalDenomAmountBeforeSwap);       \\n        \\n        uint256 denomAmountBeforeSwap;\\n        for(uint256 i; i < payoutAssets.length; i++) {\\n            console.log(\\\"===sol-payoutAmounts\\\", payoutAmounts[i]);\\n            if(payoutAssets[i] == denominationAsset) {\\n                denomAmountBeforeSwap = payoutAmounts[i];        \\n            }\\n        }\\n        permissionedVaultActionAllowed = true;\\n        // Get amount(in Vault) in denomination asset from other assets excepted denomination asset            \\n        IExtension(INTEGRATION_MANAGER).actionForRedeem(\\n            _adapter,\\n            payoutAmounts,\\n            payoutAssets\\n        );\\n\\n        // denominationAsset Amount after swap on Uniswap V2\\n        uint256 totalDenomAmountAfterSwap = ERC20(denominationAsset).balanceOf(vaultProxy);\\n \\n        console.log(\\\"===sol-AfterSwap\\\", totalDenomAmountAfterSwap);     \\n        // Get denomination asset amount for transfer to redeemer\\n        redeemAmountToDenom_ = totalDenomAmountAfterSwap.sub(totalDenomAmountBeforeSwap).add(denomAmountBeforeSwap);\\n\\n        console.log(\\\"===sol-redeemAmount\\\", redeemAmountToDenom_); \\n        if (redeemAmountToDenom_ > 0) {\\n            burnAndTransfer(\\n                msg.sender, \\n                _sharesQuantity, \\n                payoutAssets, \\n                payoutAmounts, \\n                assetAmountToFees, \\n                sharesSupply, \\n                redeemAmountToDenom_, \\n                false\\n            );   \\n        }\\n\\n        emit SharesRedeemedToDenom(msg.sender, _sharesQuantity, denominationAsset, redeemAmountToDenom_); \\n\\n        return redeemAmountToDenom_;\\n    }\\n\\n    /// @notice Redeem all of the sender's shares in the denominationAsset\\n    // function redeemSharesToDenom(address adapter) \\n    //     external \\n    //     allowsPermissionedVaultAction\\n    //     returns (uint256 redeemAmountToDenom_)\\n    // {           \\n    //     uint256 sharesQuantity = ERC20(vaultProxy).balanceOf(msg.sender);\\n        \\n    //     console.log(\\\"===sol-sharesQuantity\\\", sharesQuantity);\\n    //     (\\n    //         address[] memory payoutAssets, \\n    //         uint256[] memory payoutAmounts, \\n    //         uint256[] memory assetAmountToFees,\\n    //         uint256 sharesSupply\\n    //     ) = __calcRedeemShares(msg.sender, sharesQuantity, new address[](0), new address[](0));\\n\\n    //     // initial total denominationAsset Amount of Vault\\n    //     uint256 totalDenomAmountBeforeSwap = ERC20(denominationAsset).balanceOf(vaultProxy);        \\n    //     uint256 denomAmountBeforeSwap;\\n    //     for(uint256 i; i < payoutAssets.length; i++) {\\n    //         if(payoutAssets[i] == denominationAsset) {\\n    //             denomAmountBeforeSwap = payoutAmounts[i];\\n    //         }\\n    //     }\\n    //     // Get amount(in Vault) in denomination asset from other assets excepted denomination asset            \\n    //     IExtension(INTEGRATION_MANAGER).actionForRedeem(\\n    //         adapter,\\n    //         payoutAmounts,\\n    //         payoutAssets\\n    //     );\\n\\n    //     // denominationAsset Amount after swap on Uniswap V2\\n    //     uint256 totalDenomAmountAfterSwap = ERC20(denominationAsset).balanceOf(vaultProxy);\\n\\n    //     // Get denomination asset amount for transfer to redeemer\\n    //     if(totalDenomAmountAfterSwap > totalDenomAmountBeforeSwap) {\\n    //         redeemAmountToDenom_ = totalDenomAmountAfterSwap.sub(totalDenomAmountBeforeSwap).add(denomAmountBeforeSwap);\\n    //     } else {\\n    //         redeemAmountToDenom_ = denomAmountBeforeSwap;\\n    //     }        \\n\\n    //     if (redeemAmountToDenom_ > 0) {\\n    //         burnAndTransfer(\\n    //             msg.sender, \\n    //             sharesQuantity, \\n    //             payoutAssets, \\n    //             payoutAmounts, \\n    //             assetAmountToFees, \\n    //             sharesSupply, \\n    //             redeemAmountToDenom_, \\n    //             false\\n    //         );   \\n    //     }\\n\\n    //     emit SharesRedeemedToDenom(msg.sender, sharesQuantity, denominationAsset, redeemAmountToDenom_); \\n\\n    //     return redeemAmountToDenom_;\\n    // }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `denominationAsset` variable\\n    function getDenominationAsset() external view override returns (address denominationAsset_) {\\n        return denominationAsset;\\n    }\\n\\n    /// @notice Gets the routes for the various contracts used by all funds\\n    function getLibRoutes()\\n        external\\n        view\\n        returns (\\n            address dispatcher_,\\n            address feeManager_,\\n            address fundDeployer_,\\n            address integrationManager_,\\n            address policyManager_,\\n            address primitivePriceFeed_,\\n            address valueInterpreter_\\n        )\\n    {\\n        return (\\n            DISPATCHER,\\n            FEE_MANAGER,\\n            FUND_DEPLOYER,\\n            INTEGRATION_MANAGER,\\n            POLICY_MANAGER,\\n            PRIMITIVE_PRICE_FEED,\\n            VALUE_INTERPRETER\\n        );\\n    }\\n\\n    /// @notice Gets the `overridePause` variable\\n    function getOverridePause () external   view   returns ( bool   overridePause_ ) {\\n        return overridePause;\\n    }\\n\\n    /// @notice Gets the `sharesActionTimelock` variable\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_) {\\n        return sharesActionTimelock;\\n    }\\n\\n    /// @notice Gets the `vaultProxy` variable\\n    function getVaultProxy() external view override returns (address vaultProxy_) {\\n        return vaultProxy;\\n    }\\n}\",\"keccak256\":\"0x839bc69f974c4068bcbf642f8022ae92c374635244be3214ff78706587726047\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IComptroller Interface\\r\\ninterface IComptroller {\\r\\n    enum VaultAction {\\r\\n        None,\\r\\n        BurnShares,\\r\\n        MintShares,\\r\\n        TransferShares,\\r\\n        ApproveAssetSpender,\\r\\n        WithdrawAssetTo,\\r\\n        AddTrackedAsset,\\r\\n        RemoveTrackedAsset\\r\\n    }\\r\\n\\r\\n    function activate(address, bool) external;\\r\\n\\r\\n    function calcGav(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcEachBalance(address) external returns (uint256);\\r\\n\\r\\n    function callOnExtension(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n\\r\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\r\\n\\r\\n    function destruct() external;\\r\\n\\r\\n    function getDenominationAsset() external view returns (address);\\r\\n\\r\\n    function getVaultProxy() external view returns (address);\\r\\n\\r\\n    function init(address, uint256) external;\\r\\n\\r\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf459c78b60229a3c473b090bb004d2e779a63e55fa8271481310f24579e72da1\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\r\\n\\r\\n/// @title IVault Interface\\r\\ninterface IVault is IMigratableVault {\\r\\n    function addTrackedAsset(address) external;\\r\\n\\r\\n    function approveAssetSpender(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function burnShares(address, uint256) external;\\r\\n\\r\\n    function callOnContract(address, bytes calldata) external;\\r\\n\\r\\n    function getAccessor() external view returns (address);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getTrackedAssets() external view returns (address[] memory);\\r\\n\\r\\n    function isTrackedAsset(address) external view returns (bool);\\r\\n\\r\\n    function mintShares(address, uint256) external;\\r\\n\\r\\n    function removeTrackedAsset(address) external;\\r\\n\\r\\n    function transferShares(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAssetTo(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x71ab5261c400b379333dcba9de5dcd9deb63296879f047874adcf74f29c00f20\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _comptrollerProxy,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(bytes calldata _configData) external;\\n\\n    function actionForRedeem(\\n        address,\\n        uint256[] memory, \\n        address[] memory\\n    ) external;\\n}\\n\",\"keccak256\":\"0x96be69e863c41d8a9a59f43e76c3ad2d2d163a15791d68f39419529316a66a8d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {\\n        Continuous,\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreRedeemShares\\n    }\\n    enum SettlementType {\\n        None,\\n        Direct,\\n        Mint,\\n        Burn,\\n        MintSharesOutstanding,\\n        BurnSharesOutstanding\\n    }\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8712f78ae58ce69ce17429bb1e8ca670cbf938fb16cccd83ab68deb53233d21a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/ProtocolFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"./ProtocolFee.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ProtocolFee {    \\n    using SafeMath for uint256;\\n\\n    event FeeSettingsAdded(address indexed daoAddress, uint256 feeDeposit, uint256 feeWithdraw, uint256 feePerform, uint256 feeStream);\\n\\n    address internal daoAddress;\\n    uint256 internal feeDeposit; \\n    uint256 internal feeWithdraw; \\n    uint256 internal feePerform; \\n    uint256 internal feeStream;    \\n    address private immutable DISPATCHER;    \\n\\n    modifier onlyDispatcherOwner() {\\n        address owner = IDispatcher(DISPATCHER).getOwner();\\n        address denomOwner = IDispatcher(DISPATCHER).getNominatedOwner();\\n        require(msg.sender == owner || msg.sender == denomOwner, \\\"Only owner callable\\\");\\n        _;\\n    }\\n\\n    constructor(address _dispatcher) public {        \\n        DISPATCHER = _dispatcher;\\n    }\\n\\n    /// @notice Add the initial fee settings for Protocol\\n    /// @param _settingsData Encoded settings to apply to the policy for the fund\\n    /// @dev `feeDeposit`, `feeWithdraw`, `feeStream` and `feePerform` are set\\n    function addFeeSettings(bytes calldata _settingsData)\\n        external\\n        onlyDispatcherOwner\\n    {\\n        (\\n            uint256 feeDeposit_, //0.2%\\n            uint256 feeWithdraw_,//0.5% \\n            uint256 feePerform_, //8%\\n            uint256 feeStream_   //0.5%\\n        ) = abi.decode(_settingsData, (uint256, uint256, uint256, uint256));\\n\\n        require(feeDeposit_ > 0, \\\"addFeeSettings: feeDeposit must be greater than 0\\\");\\n        require(feeWithdraw_ > 0, \\\"addFeeSettings: feeWithdraw must be greater than 0\\\");\\n        require(feePerform_ > 0, \\\"addFeeSettings: feePerform must be greater than 0\\\");\\n        require(feeStream_ > 0, \\\"addFeeSettings: feeStream must be greater than 0\\\");\\n        \\n        feeDeposit = feeDeposit_;\\n        feeWithdraw = feeWithdraw_;\\n        feePerform = feePerform_;\\n        feeStream = feeStream_;\\n        daoAddress = IDispatcher(DISPATCHER).getOwner();\\n        \\n        emit FeeSettingsAdded(daoAddress, feeDeposit_, feeWithdraw_, feePerform_, feeStream_);\\n    }\\n\\n    /// @notice Sets the new daoAddress\\n    /// @param _daoAddress The address to set as the new owner\\n    function setDAOAddress(address _daoAddress) public onlyDispatcherOwner {\\n        require(_daoAddress != address(0), \\\"setDAOAddress: daoAddress must not be empty\\\");\\n        require(_daoAddress != daoAddress, \\\"setDAOAddress: daoAddress must not be pre address\\\");\\n        daoAddress = _daoAddress;\\n    }\\n\\n    /// @notice Get Deposit fee for Protocol\\n    function getFeeDeposit() external view returns (uint256) {\\n        return feeDeposit;\\n    }\\n\\n    /// @notice Get Withdraw fee for Protocol\\n    function getFeeWithdraw() external view returns (uint256) {\\n        return feeWithdraw;\\n    }\\n\\n    /// @notice Get protocol fee of PerformanceFee\\n    function getFeePerform() public view returns (uint256 feePerform_) {\\n        return feePerform;\\n    }\\n\\n    /// @notice Get Streaming fee for Protocol\\n    function getFeeStream() external view returns (uint256) {\\n        return feeStream;\\n    }\\n\\n    /// @notice Get Owner for DAO Protocol\\n    function getDaoAddress() external view returns (address daoAddress_) {\\n        return daoAddress;\\n    }\\n\\n}\",\"keccak256\":\"0x3a50e45e2a005f72841e6753c9035c8192702861811a26423d631d8e063a2462\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title PolicyManager Interface\\r\\n/// @notice Interface for the PolicyManager\\r\\ninterface IPolicyManager {\\r\\n    enum PolicyHook {\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreCallOnIntegration,\\r\\n        PostCallOnIntegration\\r\\n    }\\r\\n\\r\\n    function validatePolicies(\\r\\n        address,\\r\\n        PolicyHook,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8b9669ae704f434c72d4aa2b9eb3468dab5db58d708d44b84664faa7885dfc63\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf67dbe07cf44b330c5f4a1c236f59fa913d72bea666144b0fca4bbd1945f69b0\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7e4dd73597568e591a91a97c440c1d8674695fd71cb9fc8fb8f28ab50fe3833\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\n\\r\\n/// @title SynthetixPriceFeed Contract\\r\\n/// @notice A price feed that uses Synthetix oracles as price sources\\r\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\r\\n\\r\\n    event SynthCurrencyKeyUpdated(\\r\\n        address indexed synth,\\r\\n        bytes32 prevCurrencyKey,\\r\\n        bytes32 nextCurrencyKey\\r\\n    );\\r\\n\\r\\n    uint256 private constant SYNTH_UNIT = 10**18;\\r\\n    address private immutable ADDRESS_RESOLVER;\\r\\n    address private immutable SUSD;\\r\\n\\r\\n    mapping(address => bytes32) private synthToCurrencyKey;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _addressResolver,\\r\\n        address _sUSD,\\r\\n        address[] memory _synths\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        ADDRESS_RESOLVER = _addressResolver;\\r\\n        SUSD = _sUSD;\\r\\n\\r\\n        address[] memory sUSDSynths = new address[](1);\\r\\n        sUSDSynths[0] = _sUSD;\\r\\n\\r\\n        __addSynths(sUSDSynths);\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = SUSD;\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n\\r\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\r\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\r\\n\\r\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\r\\n            \\\"ExchangeRates\\\",\\r\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\r\\n            currencyKey\\r\\n        );\\r\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\r\\n\\r\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\r\\n\\r\\n        return (underlyings_, underlyingAmounts_);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\r\\n        return getCurrencyKeyForSynth(_asset) != 0;\\r\\n    }\\r\\n\\r\\n    /////////////////////\\r\\n    // SYNTHS REGISTRY //\\r\\n    /////////////////////\\r\\n\\r\\n    /// @notice Adds Synths to the price feed\\r\\n    /// @param _synths Synths to add\\r\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\r\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\r\\n\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the cached currencyKey value for specified Synths\\r\\n    /// @param _synths Synths to update\\r\\n    /// @dev Anybody can call this function\\r\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\r\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\r\\n\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\r\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\r\\n\\r\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(\\r\\n                nextCurrencyKey != prevCurrencyKey,\\r\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\r\\n            );\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\r\\n\\r\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add Synths\\r\\n    function __addSynths(address[] memory _synths) private {\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\r\\n\\r\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\r\\n\\r\\n            emit SynthAdded(_synths[i], currencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to query a currencyKey from Synthetix\\r\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\r\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\r\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\r\\n    function getAddressResolver() external view returns (address) {\\r\\n        return ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for multiple given Synths\\r\\n    /// @return currencyKeys_ The currencyKey values\\r\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32[] memory currencyKeys_)\\r\\n    {\\r\\n        currencyKeys_ = new bytes32[](_synths.length);\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\r\\n        }\\r\\n\\r\\n        return currencyKeys_;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SUSD` variable\\r\\n    /// @return susd_ The `SUSD` variable value\\r\\n    function getSUSD() external view returns (address susd_) {\\r\\n        return SUSD;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for a given Synth\\r\\n    /// @return currencyKey_ The currencyKey value\\r\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\r\\n        return synthToCurrencyKey[_synth];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc269c68629539538b8cb41718390bc7d13f8d3dc13675c71e87be25cbe3302ad\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x291f3419a5ecbfec0ce1a5799aca6e8cdeb0b292f6bac8911cf45a547617a442\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IValueInterpreter interface\\r\\n/// @notice Interface for ValueInterpreter\\r\\ninterface IValueInterpreter {\\r\\n    function calcCanonicalAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcCanonicalAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xf323aef46306641ac24642142244a6cca2cd7e9f12840129d0d7ba9d30b0ac01\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetix Interface\\r\\ninterface ISynthetix {\\r\\n    function exchangeOnBehalfWithTracking(\\r\\n        address,\\r\\n        bytes32,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes32\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7d86d41a7a402c09d74c48c869e58c2a9279bf47a78c9baa7f58e164099976c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixAddressResolver Interface\\r\\ninterface ISynthetixAddressResolver {\\r\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc42fdd4fb7ee1fc7d7403ee9ac4478277c2a48937d42fbf71e2a5cd52b844862\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchangeRates Interface\\r\\ninterface ISynthetixExchangeRates {\\r\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b55f601798360e27c9e260a5bc2c50b32aa95ddbf04cd1d30be601a7d354779\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchanger Interface\\r\\ninterface ISynthetixExchanger {\\r\\n    function getAmountsForExchange(\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        bytes32\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function settle(address, bytes32)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xc55eecdce846f0af57ec7297f503333105b12d5bcb4bf5f931bf9bd965134c9c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixProxyERC20 Interface\\r\\ninterface ISynthetixProxyERC20 {\\r\\n    function target() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x3f02cc1f2827ff2913eab9029168c871fef1a7e4742815f516c1979e511d5cb2\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixSynth Interface\\r\\ninterface ISynthetixSynth {\\r\\n    function currencyKey() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ab942def2f5aa0a95bbdf3c125022c170c5cb130247968087e57643d0422524\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title AddressArray Library\\r\\n/// @notice A library to extend the address array data type\\r\\nlibrary AddressArrayLib {\\r\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\r\\n    function addItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length + 1);\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            nextArray_[i] = _self[i];\\r\\n        }\\r\\n        nextArray_[_self.length] = _itemToAdd;\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\r\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (contains(_self, _itemToAdd)) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        return addItem(_self, _itemToAdd);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if an array contains a particular value\\r\\n    function contains(address[] memory _self, address _target)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool doesContain_)\\r\\n    {\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (_target == _self[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to reassign all items in an array with a specified value\\r\\n    function fill(address[] memory _self, address _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length);\\r\\n        for (uint256 i; i < nextArray_.length; i++) {\\r\\n            nextArray_[i] = _value;\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if array is a set of unique values.\\r\\n    /// Does not assert length > 0.\\r\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\r\\n        if (_self.length <= 1) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = _self.length;\\r\\n        for (uint256 i; i < arrayLength; i++) {\\r\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\r\\n                if (_self[i] == _self[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\r\\n    /// Does not assert uniqueness of either array.\\r\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (_itemsToRemove.length == 0) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\r\\n        uint256 remainingItemsCount = _self.length;\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (contains(_itemsToRemove, _self[i])) {\\r\\n                indexesToRemove[i] = true;\\r\\n                remainingItemsCount--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (remainingItemsCount == _self.length) {\\r\\n            nextArray_ = _self;\\r\\n        } else if (remainingItemsCount > 0) {\\r\\n            nextArray_ = new address[](remainingItemsCount);\\r\\n            uint256 nextArrayIndex;\\r\\n            for (uint256 i; i < _self.length; i++) {\\r\\n                if (!indexesToRemove[i]) {\\r\\n                    nextArray_[nextArrayIndex] = _self[i];\\r\\n                    nextArrayIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab1eb0f60ae734c6ab8351012c2f58accbca5ace1a3d46767b70b85bc705e4d6\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixExchanger.sol\\\";\\r\\n\\r\\n/// @title AssetFinalityResolver Contract\\r\\n/// @notice A contract that helps achieve asset finality\\r\\nabstract contract AssetFinalityResolver {\\r\\n    address internal immutable SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    address internal immutable SYNTHETIX_PRICE_FEED;\\r\\n\\r\\n    constructor(address _synthetixPriceFeed, address _synthetixAddressResolver) public {\\r\\n        SYNTHETIX_ADDRESS_RESOLVER = _synthetixAddressResolver;\\r\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to finalize a Synth balance at a given target address and return its balance\\r\\n    function __finalizeIfSynthAndGetAssetBalance(\\r\\n        address _target,\\r\\n        address _asset,\\r\\n        bool _requireFinality\\r\\n    ) internal returns (uint256 assetBalance_) {\\r\\n        bytes32 currencyKey = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED).getCurrencyKeyForSynth(\\r\\n            _asset\\r\\n        );\\r\\n        if (currencyKey != 0) {\\r\\n            address synthetixExchanger = ISynthetixAddressResolver(SYNTHETIX_ADDRESS_RESOLVER)\\r\\n                .requireAndGetAddress(\\r\\n                    \\\"Exchanger\\\",\\r\\n                    \\\"finalizeAndGetAssetBalance: Missing Exchanger\\\"\\r\\n                );\\r\\n            try ISynthetixExchanger(synthetixExchanger).settle(_target, currencyKey) {} catch {\\r\\n                require(!_requireFinality, \\\"finalizeAndGetAssetBalance: Cannot settle Synth\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ERC20(_asset).balanceOf(_target);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\\r\\n    /// @return synthetixAddressResolver_ The `SYNTHETIX_ADDRESS_RESOLVER` variable value\\r\\n    function getSynthetixAddressResolver()\\r\\n        external\\r\\n        view\\r\\n        returns (address synthetixAddressResolver_)\\r\\n    {\\r\\n        return SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\r\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\r\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\r\\n        return SYNTHETIX_PRICE_FEED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x148fbfa07481c35d6143cd4e222496f8617aeaf6cb8444305bf97efdcecb9738\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b50604051620060f1380380620060f183398181016040526101408110156200003957600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050508281806001600160a01b03166080816001600160a01b031660601b81525050816001600160a01b031660a0816001600160a01b031660601b815250505050896001600160a01b031660c0816001600160a01b031660601b81525050866001600160a01b0316610100816001600160a01b031660601b81525050886001600160a01b031660e0816001600160a01b031660601b81525050856001600160a01b0316610120816001600160a01b031660601b81525050836001600160a01b0316610140816001600160a01b031660601b81525050846001600160a01b0316610160816001600160a01b031660601b81525050876001600160a01b0316610180816001600160a01b031660601b81525050816001600160a01b03166101a0816001600160a01b031660601b8152505060018060146101000a81548160ff0219169083151502179055505050505050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c615dc36200032e6000398061276b528061281c52806139905280613e31525080611ea352806122b1525080610cf5528061149a52806116f15280611e61528061420a528061483c528061525752806154ee525080610dcb5280611e82525080610c825280610f65528061141a52806119795280611e405280612a88525080610c0f5280610f39528061139a528061163e5280611dfe5280612b53528061438552806149b75280614c4a528061512d52806153c3525080611e1f5280611f025280612fdb5280614a3f525080611ddd528061251f52806136dc52508061151e52806132415250806115e652806132e45250615dc36000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806396aed587116100c3578063d6ca66ce1161007c578063d6ca66ce14610670578063e269c3d6146106c3578063e572ced1146106cb578063f513c92614610758578063f8b2842214610777578063f9f585dd1461079d57610158565b806396aed587146104cb5780639c59da2714610589578063b41706121461060c578063b460481d14610644578063c0a4c0a31461064c578063c98091871461066857610158565b80636487b384116101155780636487b384146102ce5780636692dbc71461042c57806382d3a1dd146104525780638d064eae14610480578063944eb7b8146104a457806396471b08146104c357610158565b8063089be0621461015d57806310acd06d146101955780632b68b9c61461020f578063399ae7241461021757806339bf70d1146102435780634da471b7146102c6575b600080fd5b6101836004803603602081101561017357600080fd5b50356001600160a01b03166108fb565b60408051918252519081900360200190f35b61020d600480360360408110156101ab57600080fd5b60ff8235169190810190604081016020820135600160201b8111156101cf57600080fd5b8201836020820111156101e157600080fd5b803590602001918460018302840111600160201b8311171561020257600080fd5b50909250905061090d565b005b61020d610b83565b61020d6004803603604081101561022d57600080fd5b506001600160a01b038135169060200135610d6b565b61020d6004803603606081101561025957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111600160201b831117156102bb57600080fd5b509092509050610ed9565b61018361108b565b610393600480360360608110156102e457600080fd5b81359190810190604081016020820135600160201b81111561030557600080fd5b82018360208201111561031757600080fd5b803590602001918460208302840111600160201b8311171561033857600080fd5b919390929091602081019035600160201b81111561035557600080fd5b82018360208201111561036757600080fd5b803590602001918460208302840111600160201b8311171561038857600080fd5b509092509050611091565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103d75781810151838201526020016103bf565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104165781810151838201526020016103fe565b5050505090500194505050505060405180910390f35b6101836004803603602081101561044257600080fd5b50356001600160a01b0316611111565b61020d6004803603604081101561046857600080fd5b506001600160a01b038135169060200135151561113a565b61048861151c565b604080516001600160a01b039092168252519081900360200190f35b61020d600480360360208110156104ba57600080fd5b50351515611540565b6104886115e4565b61020d600480360360408110156104e157600080fd5b810190602081018135600160201b8111156104fb57600080fd5b82018360208201111561050d57600080fd5b803590602001918460018302840111600160201b8311171561052e57600080fd5b919390929091602081019035600160201b81111561054b57600080fd5b82018360208201111561055d57600080fd5b803590602001918460018302840111600160201b8311171561057e57600080fd5b509092509050611608565b6101836004803603606081101561059f57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105ce57600080fd5b8201836020820111156105e057600080fd5b803590602001918460208302840111600160201b8311171561060157600080fd5b50909250905061177d565b61062b6004803603602081101561062257600080fd5b50351515611bfb565b6040805192835290151560208301528051918290030190f35b610393611d14565b610654611dbc565b604080519115158252519081900360200190f35b610488611dcc565b610678611ddb565b604080516001600160a01b03988916815296881660208801529487168686015292861660608601529085166080850152841660a084015290921660c082015290519081900360e00190f35b610488611ecb565b61020d600480360360608110156106e157600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561071a57600080fd5b82018360208201111561072c57600080fd5b803590602001918460018302840111600160201b8311171561074d57600080fd5b509092509050611eda565b61062b6004803603602081101561076e57600080fd5b503515156120e4565b6101836004803603602081101561078d57600080fd5b50356001600160a01b03166123fc565b6108ab600480360360608110156107b357600080fd5b810190602081018135600160201b8111156107cd57600080fd5b8201836020820111156107df57600080fd5b803590602001918460208302840111600160201b8311171561080057600080fd5b919390929091602081019035600160201b81111561081d57600080fd5b82018360208201111561082f57600080fd5b803590602001918460208302840111600160201b8311171561085057600080fd5b919390929091602081019035600160201b81111561086d57600080fd5b82018360208201111561087f57600080fd5b803590602001918460208302840111600160201b831117156108a057600080fd5b509092509050612417565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156108e75781810151838201526020016108cf565b505050509050019250505060405180910390f35b60086020526000908152604090205481565b6109156129a1565b60015461092a906001600160a01b03166129ee565b6109343384612a3e565b600683600781111561094257fe5b141561098c5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c3c92505050565b610b7e565b600483600781111561099a57fe5b14156109df5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ca592505050565b60018360078111156109ed57fe5b1415610a325761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d3192505050565b6002836007811115610a4057fe5b1415610a855761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612dc892505050565b6007836007811115610a9357fe5b1415610ad85761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4292505050565b6003836007811115610ae657fe5b1415610b2b5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ec192505050565b6005836007811115610b3957fe5b1415610b7e57610b7e82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4d92505050565b505050565b610b8c33612fd9565b610b946129a1565b610b9c61305f565b6001805460ff60b01b1916600160b01b1790819055600160a01b900460ff1615610c0d576040805162461bcd60e51b815260206004820181905260248201527f64657374727563743a204f6e6c792064656c65676174652063616c6c61626c65604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d4e57600080fd5b505af1158015610d62573d6000803e3d6000fd5b50600092505050ff5b6000546001600160a01b031615610dc9576040805162461bcd60e51b815260206004820152601960248201527f696e69743a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639be918e6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e3657600080fd5b505afa158015610e4a573d6000803e3d6000fd5b505050506040513d6020811015610e6057600080fd5b5051610eb3576040805162461bcd60e51b815260206004820152601c60248201527f696e69743a204261642064656e6f6d696e6174696f6e20617373657400000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b039390931692909217909155600255565b610ee16129a1565b600154610ef6906001600160a01b03166129ee565b610efe6130be565b6001805460ff60b81b1916600160b81b179055610f1961305f565b6001805460ff60b01b1916600160b01b1790556001600160a01b038481167f0000000000000000000000000000000000000000000000000000000000000000919091161480610f9957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b610fd45760405162461bcd60e51b8152600401808060200182810382526023815260200180615c146023913960400191505060405180910390fd5b836001600160a01b0316631bee801e338585856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b50506001805461ffff60b01b19169055505050505050565b60025490565b606080611103338888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061310b92505050565b915091509550959350505050565b600180546000916001600160a01b0390911690611131908290859061323c565b9150505b919050565b61114333612fd9565b600180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517f5be181178e61e61e33f79c396c7194b8f3c80f77899da7bd96fe537411300bcb9181900360200190a18015611337576000826001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d602081101561121357600080fd5b50519050801561133557826001600160a01b031663bfc77beb84856001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d602081101561129057600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820185905251606480830192600092919082900301818387803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b50506040805184815290517f8f9ec2c1cf1f95fcb5d89d3141949092850c5cfe04da4d9425dd840bf18cdc709350908190036020019150a15b505b60008054604080516327783b1760e11b81526001600160a01b039283166004820152905191851692634ef0762e9260248084019382900301818387803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561140057600080fd5b505af1158015611414573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561148057600080fd5b505af1158015611494573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561150057600080fd5b505af1158015611514573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b611549336134f4565b600160159054906101000a900460ff161515811515141561159b5760405162461bcd60e51b8152600401808060200182810382526023815260200180615d136023913960400191505060405180910390fd5b6001805460ff60a81b1916600160a81b831515908102919091179091556040517fb59eda3d5fc7c642cf9caba744cbb07fd462d0754170bac672351ddbf8cda9dc90600090a250565b7f000000000000000000000000000000000000000000000000000000000000000090565b61161133612fd9565b82156116c45760405163089cbe1d60e41b8152602060048201908152602482018590526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916389cbe1d09187918791908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050505b80156117775760405163089cbe1d60e41b8152602060048201908152602482018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916389cbe1d09185918591908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561175e57600080fd5b505af1158015611772573d6000803e3d6000fd5b505050505b50505050565b6000606080606060006117f63389898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525092508291506117c69050565b506040519080825280602002602001820160405280156117f0578160200160208202803683370190505b506135cd565b60008054600154604080516370a0823160e01b81526001600160a01b0392831660048201529051979b50959950939750919550939116916370a08231916024808301926020929190829003018186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d602081101561187c57600080fd5b505160408051808201909152601181527003d3d3d736f6c2d4265666f72655377617607c1b60208201529091506118b39082613c55565b6000805b865181101561195c57611909604051806040016040528060148152602001733d3d3d736f6c2d7061796f7574416d6f756e747360601b8152508783815181106118fc57fe5b6020026020010151613c55565b60005487516001600160a01b039091169088908390811061192657fe5b60200260200101516001600160a01b031614156119545785818151811061194957fe5b602002602001015191505b6001016118b7565b5060018060166101000a81548160ff0219169083151502179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663557c944c8c87896040518463ffffffff1660e01b815260040180846001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611a0b5781810151838201526020016119f3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611a4a578181015183820152602001611a32565b5050505090500195505050505050600060405180830381600087803b158015611a7257600080fd5b505af1158015611a86573d6000803e3d6000fd5b505060008054600154604080516370a0823160e01b81526001600160a01b0392831660048201529051939550911692506370a08231916024808301926020929190829003018186803b158015611adb57600080fd5b505afa158015611aef573d6000803e3d6000fd5b505050506040513d6020811015611b0557600080fd5b505160408051808201909152601081526f03d3d3d736f6c2d4166746572537761760841b6020820152909150611b3b9082613c55565b611b4f82611b498386613d03565b90613d65565b9750611b86604051806040016040528060138152602001720f4f4f5cdbdb0b5c995919595b505b5bdd5b9d606a1b81525089613c55565b8715611b9d57611b9d338c898989898e6000613dbf565b600054604080518d81526001600160a01b039290921660208301528181018a90525133917f40ad36e84406c60dce7dc7362e1d84c3e6978b044c285b63ab46eaa2f0d50525919081900360600190a250505050505050949350505050565b6000806000611c09846120e4565b8093508192505050611d0b81600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6357600080fd5b505afa158015611c77573d6000803e3d6000fd5b505050506040513d6020811015611c8d57600080fd5b50516000546040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015611cd457600080fd5b505afa158015611ce8573d6000803e3d6000fd5b505050506040513d6020811015611cfe57600080fd5b505160ff16600a0a6141dc565b9250505b915091565b600154604080516370a0823160e01b8152336004820181905291516060938493611db49390926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d6c57600080fd5b505afa158015611d80573d6000803e3d6000fd5b505050506040513d6020811015611d9657600080fd5b5051604080516000808252602082019081528183019092529061310b565b915091509091565b600154600160a81b900460ff1690565b6001546001600160a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000090919293949596565b6000546001600160a01b031690565b611ee26129a1565b600154611ef7906001600160a01b03166129ee565b611f00336134f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dc77205385856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160e01b03191681526020019250505060206040518083038186803b158015611f7f57600080fd5b505afa158015611f93573d6000803e3d6000fd5b505050506040513d6020811015611fa957600080fd5b5051611fe65760405162461bcd60e51b8152600401808060200182810382526021815260200180615b8e6021913960400191505060405180910390fd5b6001546040516001600160e01b03198516602082019081526001600160a01b039092169163a90cce4b9187918791879187916024018383808284378083019250505093505050506040516020818303038152906040526040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561209757818101518382015260200161207f565b50505050905090810190601f1680156120c45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561175e57600080fd5b6000806000600160009054906101000a90046001600160a01b031690506060816001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b15801561213c57600080fd5b505afa158015612150573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561217957600080fd5b8101908080516040519392919084600160201b82111561219857600080fd5b9083019060208201858111156121ad57600080fd5b82518660208202830111600160201b821117156121c957600080fd5b82525081516020918201928201910280838360005b838110156121f65781810151838201526020016121de565b50505050905001604052505050905080516000141561221e5760006001935093505050611d0f565b6060815167ffffffffffffffff8111801561223857600080fd5b50604051908082528060200260200182016040528015612262578160200160208202803683370190505b50905060005b82518110156122ae5761228f8484838151811061228157fe5b60200260200101518961323c565b82828151811061229b57fe5b6020908102919091010152600101612268565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae6f52ad838360008054906101000a90046001600160a01b03166040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b8381101561235657818101518382015260200161233e565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561239557818101518382015260200161237d565b50505050905001955050505050506040805180830381600087803b1580156123bc57600080fd5b505af11580156123d0573d6000803e3d6000fd5b505050506040513d60408110156123e657600080fd5b5080516020909101519095509350505050915091565b6001600160a01b031660009081526008602052604090205490565b60606124216129a1565b6124296130be565b6001805460ff60b81b1916600160b81b17905561244461305f565b6001805460ff60b01b1916600160b01b179055856124a9576040805162461bcd60e51b815260206004820152601860248201527f6275795368617265733a20456d707479205f6275796572730000000000000000604482015290519081900360640190fd5b85841480156124b757508582145b612508576040805162461bcd60e51b815260206004820152601960248201527f6275795368617265733a20556e657175616c2061727261797300000000000000604482015290519081900360640190fd5b6001546001600160a01b031661251d816129ee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0449d3d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561258a57600080fd5b505afa15801561259e573d6000803e3d6000fd5b505050506040513d60208110156125b457600080fd5b505115612608576040805162461bcd60e51b815260206004820152601c60248201527f6275795368617265733a2050656e64696e67206d6967726174696f6e00000000604482015290519081900360640190fd5b60008061261560016120e4565b9150915080612664576040805162461bcd60e51b8152602060048201526016602482015275313abca9b430b932b99d1024b73b30b634b21023a0ab60511b604482015290519081900360640190fd5b6126a333898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614208915050565b60008060009054906101000a90046001600160a01b03169050600061276784866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126fb57600080fd5b505afa15801561270f573d6000803e3d6000fd5b505050506040513d602081101561272557600080fd5b50516040805163313ce56760e01b815290516001600160a01b0387169163313ce567916004808301926020929190829003018186803b158015611cd457600080fd5b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631d68702d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c257600080fd5b505afa1580156127d6573d6000803e3d6000fd5b505050506040513d60208110156127ec57600080fd5b5051600680546001600160a01b0319166001600160a01b039283161790556040805163182d557360e11b815290517f00000000000000000000000000000000000000000000000000000000000000009092169163305aaae691600480820192602092909190829003018186803b15801561286557600080fd5b505afa158015612879573d6000803e3d6000fd5b505050506040513d602081101561288f57600080fd5b50516004558a67ffffffffffffffff811180156128ab57600080fd5b506040519080825280602002602001820160405280156128d5578160200160208202803683370190505b50955060005b8b811015612978576129318d8d838181106128f257fe5b905060200201356001600160a01b03168c8c8481811061290e57fe5b905060200201358b8b8581811061292157fe5b9050602002013589868a896144d5565b87828151811061293d57fe5b60200260200101818152505061296e8b8b8381811061295857fe5b9050602002013586613d6590919063ffffffff16565b94506001016128db565b5061298433878661483a565b50505050506001805461ffff60b01b191690559695505050505050565b6129a9614a39565b156129ec576040805162461bcd60e51b815260206004820152600e60248201526d119d5b99081a5cc81c185d5cd95960921b604482015290519081900360640190fd5b565b6001600160a01b038116612a3b576040805162461bcd60e51b815260206004820152600f60248201526e46756e64206e6f742061637469766560881b604482015290519081900360640190fd5b50565b600154600160b01b900460ff16612a865760405162461bcd60e51b8152600401808060200182810382526032815260200180615c586032913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612b51576004816007811115612ace57fe5b1480612ae557506006816007811115612ae357fe5b145b80612afb57506007816007811115612af957fe5b145b80612b1157506005816007811115612b0f57fe5b145b612b4c5760405162461bcd60e51b8152600401808060200182810382526041815260200180615bd36041913960600191505060405180910390fd5b612c38565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612c01576001816007811115612b9957fe5b1480612bb057506002816007811115612bae57fe5b145b80612bc657506003816007811115612bc457fe5b145b612b4c5760405162461bcd60e51b8152600401808060200182810382526039815260200180615b556039913960400191505060405180910390fd5b60405162461bcd60e51b8152600401808060200182810382526032815260200180615a936032913960400191505060405180910390fd5b5050565b6000818060200190516020811015612c5357600080fd5b5051600154604080516327783b1760e11b81526001600160a01b0380851660048301529151939450911691634ef0762e9160248082019260009290919082900301818387803b15801561150057600080fd5b6000806000838060200190516060811015612cbf57600080fd5b508051602082015160409283015160015484516331bca92d60e21b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163c6f2a4b491606480830192600092919082900301818387803b15801561175e57600080fd5b600080828060200190516040811015612d4957600080fd5b50805160209091015160015460408051633b9e9f0160e21b81526001600160a01b038086166004830152602482018590529151949650929450169163ee7a7c049160448082019260009290919082900301818387803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050505050565b600080828060200190516040811015612de057600080fd5b508051602090910151600154604080516329460cc560e11b81526001600160a01b038086166004830152602482018590529151949650929450169163528c198a9160448082019260009290919082900301818387803b158015612dab57600080fd5b6000818060200190516020811015612e5957600080fd5b50516000549091506001600160a01b03808316911614612c385760015460408051631c3efc4d60e21b81526001600160a01b038481166004830152915191909216916370fbf13491602480830192600092919082900301818387803b15801561150057600080fd5b6000806000838060200190516060811015612edb57600080fd5b5080516020820151604092830151600154845163bfc77beb60e01b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163bfc77beb91606480830192600092919082900301818387803b15801561175e57600080fd5b6000806000838060200190516060811015612f6757600080fd5b508051602082015160409283015160015484516312575d4f60e21b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163495d753c91606480830192600092919082900301818387803b15801561175e57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614612a3b576040805162461bcd60e51b815260206004820152601a60248201527f4f6e6c792046756e644465706c6f7965722063616c6c61626c65000000000000604482015290519081900360640190fd5b600154600160b01b900460ff16156129ec576040805162461bcd60e51b815260206004820152601860248201527f5661756c7420616374696f6e2072652d656e7472616e63650000000000000000604482015290519081900360640190fd5b600154600160b81b900460ff16156129ec576040805162461bcd60e51b815260206004820152600b60248201526a52652d656e7472616e636560a81b604482015290519081900360640190fd5b6060806131166130be565b6001805460ff60b81b1916600160b81b17905560606000613139888888886135cd565b9296509094509250905061315588888686868660006001613dbf565b876001600160a01b03167fce8be57c942668208b28e8687882422313992b50d7731f1467d6d5b881dee105888686604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156131cd5781810151838201526020016131b5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561320c5781810151838201526020016131f4565b505050509050019550505050505060405180910390a250506001805460ff60b81b19169055909590945092505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d8c1985856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156132ac57600080fd5b505afa1580156132c0573d6000803e3d6000fd5b505050506040513d60208110156132d657600080fd5b5051905080156134705760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dacb2d016040518163ffffffff1660e01b815260040180806822bc31b430b733b2b960b91b815250602001806020018281038252602d815260200180615cbf602d913960400191505060206040518083038186803b15801561336e57600080fd5b505afa158015613382573d6000803e3d6000fd5b505050506040513d602081101561339857600080fd5b5051604080516306c5a00b60e21b81526001600160a01b03898116600483015260248201869052915192935090831691631b16802c916044808201926060929091908290030181600087803b1580156133f057600080fd5b505af192505050801561342457506040513d606081101561341057600080fd5b508051602082015160409092015190919060015b61346a5783156134655760405162461bcd60e51b815260040180806020018281038252602f815260200180615a64602f913960400191505060405180910390fd5b61346e565b5050505b505b836001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134bd57600080fd5b505afa1580156134d1573d6000803e3d6000fd5b505050506040513d60208110156134e757600080fd5b50519150505b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561354257600080fd5b505afa158015613556573d6000803e3d6000fd5b505050506040513d602081101561356c57600080fd5b50516001600160a01b03828116911614612a3b576040805162461bcd60e51b815260206004820152601860248201527f4f6e6c792066756e64206f776e65722063616c6c61626c650000000000000000604482015290519081900360640190fd5b606080606060006135dc6130be565b6001805460ff60b81b1916600160b81b1790558661362b5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d60602e913960400191505060405180910390fd5b61363486614ae9565b61366f5760405162461bcd60e51b8152600401808060200182810382526039815260200180615ac56039913960400191505060405180910390fd5b61367885614ae9565b6136b35760405162461bcd60e51b8152600401808060200182810382526035815260200180615c8a6035913960400191505060405180910390fd5b6001546040805163d0449d3d60e01b81526001600160a01b0392831660048201819052915191927f0000000000000000000000000000000000000000000000000000000000000000169163d0449d3d91602480820192602092909190829003018186803b15801561372357600080fd5b505afa158015613737573d6000803e3d6000fd5b505050506040513d602081101561374d57600080fd5b50516137785761375c89614b7d565b6001600160a01b03891660009081526003602052604090204290555b613780614a39565b61378e5761378e8989614bf7565b604080516370a0823160e01b81526001600160a01b038b81166004830152915183928316916370a08231916024808301926020929190829003018186803b1580156137d857600080fd5b505afa1580156137ec573d6000803e3d6000fd5b505050506040513d602081101561380257600080fd5b50518911156138425760405162461bcd60e51b8152600401808060200182810382526027815260200180615cec6027913960400191505060405180910390fd5b61394c826001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b15801561387e57600080fd5b505afa158015613892573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156138bb57600080fd5b8101908080516040519392919084600160201b8211156138da57600080fd5b9083019060208201858111156138ef57600080fd5b82518660208202830111600160201b8211171561390b57600080fd5b82525081516020918201928201910280838360005b83811015613938578181015183820152602001613920565b505050509050016040525050508989614e19565b9550600086511161398e5760405162461bcd60e51b8152600401808060200182810382526024815260200180615b316024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e8f4a776040518163ffffffff1660e01b815260040160206040518083038186803b1580156139e757600080fd5b505afa1580156139fb573d6000803e3d6000fd5b505050506040513d6020811015613a1157600080fd5b505160058190556040805180820190915260158152741e9e9e9eb9b7b61d3332b2abb4ba34323930bb9d1d60591b6020820152613a4d91613c55565b855167ffffffffffffffff81118015613a6557600080fd5b50604051908082528060200260200182016040528015613a8f578160200160208202803683370190505b509450855167ffffffffffffffff81118015613aaa57600080fd5b50604051908082528060200260200182016040528015613ad4578160200160208202803683370190505b509350806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d6020811015613b3a57600080fd5b5051600554909350600090613b6490670de0b6b3a764000090613b5e908d9061500b565b90615064565b90506000613b728b83613d03565b905060005b8851811015613c35576000613ba1868b8481518110613b9257fe5b6020026020010151600161323c565b905060008111613be25760405162461bcd60e51b8152600401808060200182810382526033815260200180615afe6033913960400191505060405180910390fd5b613bf087613b5e838661500b565b898381518110613bfc57fe5b6020908102919091010152613c1587613b5e838761500b565b888381518110613c2157fe5b602090810291909101015250600101613b77565b50505050506001805460ff60b81b19169055929791965094509092509050565b612c3882826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613ca0578181015183820152602001613c88565b50505050905090810190601f168015613ccd5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905293506150cb92505050565b600082821115613d5a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6000828201838110156134ed576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60015460408051633b9e9f0160e21b81526001600160a01b038b81166004830152602482018b905291519190921691829163ee7a7c049160448082019260009290919082900301818387803b158015613e1757600080fd5b505af1158015613e2b573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631d68702d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e8857600080fd5b505afa158015613e9c573d6000803e3d6000fd5b505050506040513d6020811015613eb257600080fd5b5051600680546001600160a01b0319166001600160a01b0390921691909117905560005b87518110156141d05784891415613f955760005488516001600160a01b0390911690899083908110613f0457fe5b60200260200101516001600160a01b031614613f9557816001600160a01b03166370fbf134898381518110613f3557fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015613f7c57600080fd5b505af1158015613f90573d6000803e3d6000fd5b505050505b8215614063576000878281518110613fa957fe5b6020026020010151111561405e57816001600160a01b031663495d753c898381518110613fd257fe5b60200260200101518c8a8581518110613fe757fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561404557600080fd5b505af1158015614059573d6000803e3d6000fd5b505050505b6140da565b83156140da5760008054604080516312575d4f60e21b81526001600160a01b0392831660048201528d831660248201526044810188905290519185169263495d753c9260648084019382900301818387803b1580156140c157600080fd5b505af11580156140d5573d6000803e3d6000fd5b505050505b60008682815181106140e857fe5b602002602001015111801561410757506006546001600160a01b031615155b156141c857816001600160a01b031663495d753c89838151811061412757fe5b6020026020010151600660009054906101000a90046001600160a01b031689858151811061415157fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156141af57600080fd5b505af11580156141c3573d6000803e3d6000fd5b505050505b600101613ed6565b50505050505050505050565b6000826141ea5750806134ed565b61420083613b5e86670de0b6b3a764000061500b565b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630442bad530600086868660405160200180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561429557818101518382015260200161427d565b505050509050019450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b031681526020018360058111156142df57fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561431d578181015183820152602001614305565b50505050905090810190601f16801561434a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561436b57600080fd5b505af115801561437f573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637759c1646001858560405160200180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156144085781810151838201526020016143f0565b505050509050019350505050604051602081830303815290604052846040518463ffffffff1660e01b81526004018084600581111561444357fe5b815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561448757818101518382015260200161446f565b50505050905090810190601f1680156144b45780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612dab57600080fd5b6000876144e181614b7d565b600088116145205760405162461bcd60e51b8152600401808060200182810382526024815260200180615baf6024913960400191505060405180910390fd5b61452c898989876150ec565b61454d670de0b6b3a7640000613b5e6004548b61500b90919063ffffffff16565b6007819055600090614560908a90613d03565b9050600061457a87613b5e84670de0b6b3a764000061500b565b90506000886001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156145cb57600080fd5b505afa1580156145df573d6000803e3d6000fd5b505050506040513d60208110156145f557600080fd5b5051604080516329460cc560e11b81526001600160a01b038f81166004830152602482018690529151929350908b169163528c198a9160448082019260009290919082900301818387803b15801561464c57600080fd5b505af1158015614660573d6000803e3d6000fd5b5061467a925050506001600160a01b038716338b86615319565b6001600160a01b03861660009081526008602052604090205461469d908c613d65565b6001600160a01b0380881660009081526008602052604090209190915560065416158015906146ce57506000600754115b156146f5576006546007546146f5916001600160a01b038981169233929190911690615319565b6147018c8c848a615373565b614784818a6001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561475257600080fd5b505afa158015614766573d6000803e3d6000fd5b505050506040513d602081101561477c57600080fd5b505190613d03565b9450898510156147c55760405162461bcd60e51b8152600401808060200182810382526031815260200180615a336031913960400191505060405180910390fd5b604080518c81526020810184905280820187905290516001600160a01b038e169133917f050bd6ef6b1b818f58ae43f028aa7318a580ca0c793eca2df0033c7ae63094589181900360600190a35050506001600160a01b03166000908152600360205260409020429055979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630442bad530600386868660405160200180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156148c75781810151838201526020016148af565b505050509050019450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183600581111561491157fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561494f578181015183820152602001614937565b50505050905090810190601f16801561497c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561499d57600080fd5b505af11580156149b1573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637759c1646004858560405160200180836001600160a01b031681526020018060200182810382528381815181526020019150805190602001906020028083836000838110156144085781810151838201526020016143f0565b600060027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a5fede1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a9657600080fd5b505afa158015614aaa573d6000803e3d6000fd5b505050506040513d6020811015614ac057600080fd5b50516002811115614acd57fe5b148015614ae45750600154600160a81b900460ff16155b905090565b60006001825111614afc57506001611135565b815160005b81811015614b7357600181015b82811015614b6a57848181518110614b2257fe5b60200260200101516001600160a01b0316858381518110614b3f57fe5b60200260200101516001600160a01b03161415614b625760009350505050611135565b600101614b0e565b50600101614b01565b5060019392505050565b6002546001600160a01b038216600090815260036020526040902054614ba4904290613d03565b1015612a3b576040805162461bcd60e51b815260206004820152601860248201527f53686172657320616374696f6e2074696d656c6f636b65640000000000000000604482015290519081900360640190fd5b614bff61305f565b6001805460ff60b01b1916600160b01b179055604080516001600160a01b0384811660208301528183018490528251808303840181526060830193849052631dd6705960e21b9093527f00000000000000000000000000000000000000000000000000000000000000001691637759c16491600591906000906064018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614cc1578181015183820152602001614ca9565b50505050905090810190601f168015614cee5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015614d0f57600080fd5b505af1925050508015614d20575060015b614e08573d808015614d4e576040519150601f19603f3d011682016040523d82523d6000602084013e614d53565b606091505b507fb3ea7e5141baf21804d12f5a635e83e0cb869c8b06b88648364769f85aa73fc28184846040518080602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015614dca578181015183820152602001614db2565b50505050905090810190601f168015614df75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505b50506001805460ff60b01b19169055565b606080614e2685846155cf565b9050835160001415614e395790506134ed565b6060845167ffffffffffffffff81118015614e5357600080fd5b50604051908082528060200260200182016040528015614e7d578160200160208202803683370190505b5090506000805b8651811015614ee457614eb3878281518110614e9c57fe5b60200260200101518561575b90919063ffffffff16565b614edc576001838281518110614ec557fe5b911515602092830291909101909101526001909101905b600101614e84565b5080614ef5578293505050506134ed565b8251614f019082613d65565b67ffffffffffffffff81118015614f1757600080fd5b50604051908082528060200260200182016040528015614f41578160200160208202803683370190505b50935060005b8351811015614f9057838181518110614f5c57fe5b6020026020010151858281518110614f7057fe5b6001600160a01b0390921660209283029190910190910152600101614f47565b50825160005b8751811015614fff57838181518110614fab57fe5b602002602001015115614ff757878181518110614fc457fe5b6020026020010151868381518110614fd857fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101614f96565b50505050509392505050565b60008261501a57506000613d5f565b8282028284828161502757fe5b04146134ed5760405162461bcd60e51b8152600401808060200182810382526021815260200180615c376021913960400191505060405180910390fd5b60008082116150ba576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816150c357fe5b049392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080516001600160a01b0386811660208301528183018690526060808301869052835180840390910181526080830193849052631dd6705960e21b9093527f00000000000000000000000000000000000000000000000000000000000000001691637759c164916002919085906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156151a357818101518382015260200161518b565b50505050905090810190601f1680156151d05780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156151f157600080fd5b505af1158015615205573d6000803e3d6000fd5b5050604080516001600160a01b0388811660208301528183018890526060820187905260808083018790528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181527f00000000000000000000000000000000000000000000000000000000000000009092169550630442bad594509260019290919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156152cb5781810151838201526020016152b3565b50505050905090810190601f1680156152f85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561175e57600080fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117779085906157b1565b600061537f8285613d65565b604080516001600160a01b0388811660208301528183018890526060808301889052835180840390910181526080830193849052631dd6705960e21b9093529293507f000000000000000000000000000000000000000000000000000000000000000090921691637759c1649160039185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561543a578181015183820152602001615422565b50505050905090810190601f1680156154675780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561548857600080fd5b505af115801561549c573d6000803e3d6000fd5b5050604080516001600160a01b0389811660208301528183018990526060820188905260808083018790528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181527f00000000000000000000000000000000000000000000000000000000000000009092169550630442bad594509260029290919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561556257818101518382015260200161554a565b50505050905090810190601f16801561558f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156155b057600080fd5b505af11580156155c4573d6000803e3d6000fd5b505050505050505050565b60608151600014156155e2575081613d5f565b6060835167ffffffffffffffff811180156155fc57600080fd5b50604051908082528060200260200182016040528015615626578160200160208202803683370190505b50845190915060005b8551811015615688576156558587838151811061564857fe5b602002602001015161575b565b1561568057600183828151811061566857fe5b91151560209283029190910190910152600019909101905b60010161562f565b50845181141561569a57849250615753565b8015615753578067ffffffffffffffff811180156156b757600080fd5b506040519080825280602002602001820160405280156156e1578160200160208202803683370190505b5092506000805b8651811015615750578381815181106156fd57fe5b60200260200101516157485786818151811061571557fe5b602002602001015185838151811061572957fe5b6001600160a01b03909216602092830291909101909101526001909101905b6001016156e8565b50505b505092915050565b6000805b83518110156157a75783818151811061577457fe5b60200260200101516001600160a01b0316836001600160a01b0316141561579f576001915050613d5f565b60010161575f565b5060009392505050565b6060615806826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166158629092919063ffffffff16565b805190915015610b7e5780806020019051602081101561582557600080fd5b5051610b7e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615d36602a913960400191505060405180910390fd5b606061420084846000858561587685615988565b6158c7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106159065780518252601f1990920191602091820191016158e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615968576040519150601f19603f3d011682016040523d82523d6000602084013e61596d565b606091505b509150915061597d82828661598e565b979650505050505050565b3b151590565b6060831561599d5750816134ed565b8251156159ad5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156159f75781810151838201526020016159df565b50505050905090810190601f168015615a245780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f6275795368617265733a20536861726573207265636569766564203c205f6d696e5368617265735175616e7469747966696e616c697a65416e64476574417373657442616c616e63653a2043616e6e6f7420736574746c652053796e74685f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f7420612076616c6964206163746f725f5f63616c6352656465656d5368617265733a205f6164646974696f6e616c41737365747320636f6e7461696e73206475706c6963617465735f5f63616c6352656465656d5368617265733a205061796f757420616d6f756e74206d757374206265206772656174657220305f5f63616c6352656465656d5368617265733a204e6f207061796f7574206173736574735f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f742076616c696420666f72204665654d616e616765727661756c7443616c6c4f6e436f6e74726163743a20556e726567697374657265645f5f6275795368617265733a20456d707479205f696e766573746d656e74416d6f756e745f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f742076616c696420666f7220496e746567726174696f6e4d616e6167657263616c6c4f6e457874656e73696f6e3a205f657874656e73696f6e20696e76616c6964536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f20616374696f6e20616c6c6f7765645f5f63616c6352656465656d5368617265733a205f617373657473546f536b697020636f6e7461696e73206475706c69636174657366696e616c697a65416e64476574417373657442616c616e63653a204d697373696e672045786368616e6765725f5f63616c6352656465656d5368617265733a20496e73756666696369656e74207368617265737365744f7665727269646550617573653a2056616c756520616c7265616479207365745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f5f63616c6352656465656d5368617265733a205f7368617265735175616e74697479206d757374206265203e30a264697066735822122027455027527ad26b05b289acc04e710bf64c262fb56bbdef69f526536e2c29df64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806396aed587116100c3578063d6ca66ce1161007c578063d6ca66ce14610670578063e269c3d6146106c3578063e572ced1146106cb578063f513c92614610758578063f8b2842214610777578063f9f585dd1461079d57610158565b806396aed587146104cb5780639c59da2714610589578063b41706121461060c578063b460481d14610644578063c0a4c0a31461064c578063c98091871461066857610158565b80636487b384116101155780636487b384146102ce5780636692dbc71461042c57806382d3a1dd146104525780638d064eae14610480578063944eb7b8146104a457806396471b08146104c357610158565b8063089be0621461015d57806310acd06d146101955780632b68b9c61461020f578063399ae7241461021757806339bf70d1146102435780634da471b7146102c6575b600080fd5b6101836004803603602081101561017357600080fd5b50356001600160a01b03166108fb565b60408051918252519081900360200190f35b61020d600480360360408110156101ab57600080fd5b60ff8235169190810190604081016020820135600160201b8111156101cf57600080fd5b8201836020820111156101e157600080fd5b803590602001918460018302840111600160201b8311171561020257600080fd5b50909250905061090d565b005b61020d610b83565b61020d6004803603604081101561022d57600080fd5b506001600160a01b038135169060200135610d6b565b61020d6004803603606081101561025957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561028857600080fd5b82018360208201111561029a57600080fd5b803590602001918460018302840111600160201b831117156102bb57600080fd5b509092509050610ed9565b61018361108b565b610393600480360360608110156102e457600080fd5b81359190810190604081016020820135600160201b81111561030557600080fd5b82018360208201111561031757600080fd5b803590602001918460208302840111600160201b8311171561033857600080fd5b919390929091602081019035600160201b81111561035557600080fd5b82018360208201111561036757600080fd5b803590602001918460208302840111600160201b8311171561038857600080fd5b509092509050611091565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103d75781810151838201526020016103bf565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104165781810151838201526020016103fe565b5050505090500194505050505060405180910390f35b6101836004803603602081101561044257600080fd5b50356001600160a01b0316611111565b61020d6004803603604081101561046857600080fd5b506001600160a01b038135169060200135151561113a565b61048861151c565b604080516001600160a01b039092168252519081900360200190f35b61020d600480360360208110156104ba57600080fd5b50351515611540565b6104886115e4565b61020d600480360360408110156104e157600080fd5b810190602081018135600160201b8111156104fb57600080fd5b82018360208201111561050d57600080fd5b803590602001918460018302840111600160201b8311171561052e57600080fd5b919390929091602081019035600160201b81111561054b57600080fd5b82018360208201111561055d57600080fd5b803590602001918460018302840111600160201b8311171561057e57600080fd5b509092509050611608565b6101836004803603606081101561059f57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156105ce57600080fd5b8201836020820111156105e057600080fd5b803590602001918460208302840111600160201b8311171561060157600080fd5b50909250905061177d565b61062b6004803603602081101561062257600080fd5b50351515611bfb565b6040805192835290151560208301528051918290030190f35b610393611d14565b610654611dbc565b604080519115158252519081900360200190f35b610488611dcc565b610678611ddb565b604080516001600160a01b03988916815296881660208801529487168686015292861660608601529085166080850152841660a084015290921660c082015290519081900360e00190f35b610488611ecb565b61020d600480360360608110156106e157600080fd5b6001600160a01b03823516916001600160e01b031960208201351691810190606081016040820135600160201b81111561071a57600080fd5b82018360208201111561072c57600080fd5b803590602001918460018302840111600160201b8311171561074d57600080fd5b509092509050611eda565b61062b6004803603602081101561076e57600080fd5b503515156120e4565b6101836004803603602081101561078d57600080fd5b50356001600160a01b03166123fc565b6108ab600480360360608110156107b357600080fd5b810190602081018135600160201b8111156107cd57600080fd5b8201836020820111156107df57600080fd5b803590602001918460208302840111600160201b8311171561080057600080fd5b919390929091602081019035600160201b81111561081d57600080fd5b82018360208201111561082f57600080fd5b803590602001918460208302840111600160201b8311171561085057600080fd5b919390929091602081019035600160201b81111561086d57600080fd5b82018360208201111561087f57600080fd5b803590602001918460208302840111600160201b831117156108a057600080fd5b509092509050612417565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156108e75781810151838201526020016108cf565b505050509050019250505060405180910390f35b60086020526000908152604090205481565b6109156129a1565b60015461092a906001600160a01b03166129ee565b6109343384612a3e565b600683600781111561094257fe5b141561098c5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c3c92505050565b610b7e565b600483600781111561099a57fe5b14156109df5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ca592505050565b60018360078111156109ed57fe5b1415610a325761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d3192505050565b6002836007811115610a4057fe5b1415610a855761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612dc892505050565b6007836007811115610a9357fe5b1415610ad85761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612e4292505050565b6003836007811115610ae657fe5b1415610b2b5761098782828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ec192505050565b6005836007811115610b3957fe5b1415610b7e57610b7e82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f4d92505050565b505050565b610b8c33612fd9565b610b946129a1565b610b9c61305f565b6001805460ff60b01b1916600160b01b1790819055600160a01b900460ff1615610c0d576040805162461bcd60e51b815260206004820181905260248201527f64657374727563743a204f6e6c792064656c65676174652063616c6c61626c65604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cdb57600080fd5b505af1158015610cef573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd8e959a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d4e57600080fd5b505af1158015610d62573d6000803e3d6000fd5b50600092505050ff5b6000546001600160a01b031615610dc9576040805162461bcd60e51b815260206004820152601960248201527f696e69743a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639be918e6836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e3657600080fd5b505afa158015610e4a573d6000803e3d6000fd5b505050506040513d6020811015610e6057600080fd5b5051610eb3576040805162461bcd60e51b815260206004820152601c60248201527f696e69743a204261642064656e6f6d696e6174696f6e20617373657400000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b039390931692909217909155600255565b610ee16129a1565b600154610ef6906001600160a01b03166129ee565b610efe6130be565b6001805460ff60b81b1916600160b81b179055610f1961305f565b6001805460ff60b01b1916600160b01b1790556001600160a01b038481167f0000000000000000000000000000000000000000000000000000000000000000919091161480610f9957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b610fd45760405162461bcd60e51b8152600401808060200182810382526023815260200180615c146023913960400191505060405180910390fd5b836001600160a01b0316631bee801e338585856040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b50506001805461ffff60b01b19169055505050505050565b60025490565b606080611103338888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525061310b92505050565b915091509550959350505050565b600180546000916001600160a01b0390911690611131908290859061323c565b9150505b919050565b61114333612fd9565b600180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517f5be181178e61e61e33f79c396c7194b8f3c80f77899da7bd96fe537411300bcb9181900360200190a18015611337576000826001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d602081101561121357600080fd5b50519050801561133557826001600160a01b031663bfc77beb84856001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561126657600080fd5b505afa15801561127a573d6000803e3d6000fd5b505050506040513d602081101561129057600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820185905251606480830192600092919082900301818387803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b50506040805184815290517f8f9ec2c1cf1f95fcb5d89d3141949092850c5cfe04da4d9425dd840bf18cdc709350908190036020019150a15b505b60008054604080516327783b1760e11b81526001600160a01b039283166004820152905191851692634ef0762e9260248084019382900301818387803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561140057600080fd5b505af1158015611414573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561148057600080fd5b505af1158015611494573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380d57063826040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561150057600080fd5b505af1158015611514573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b611549336134f4565b600160159054906101000a900460ff161515811515141561159b5760405162461bcd60e51b8152600401808060200182810382526023815260200180615d136023913960400191505060405180910390fd5b6001805460ff60a81b1916600160a81b831515908102919091179091556040517fb59eda3d5fc7c642cf9caba744cbb07fd462d0754170bac672351ddbf8cda9dc90600090a250565b7f000000000000000000000000000000000000000000000000000000000000000090565b61161133612fd9565b82156116c45760405163089cbe1d60e41b8152602060048201908152602482018590526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916389cbe1d09187918791908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050505b80156117775760405163089cbe1d60e41b8152602060048201908152602482018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916389cbe1d09185918591908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561175e57600080fd5b505af1158015611772573d6000803e3d6000fd5b505050505b50505050565b6000606080606060006117f63389898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525092508291506117c69050565b506040519080825280602002602001820160405280156117f0578160200160208202803683370190505b506135cd565b60008054600154604080516370a0823160e01b81526001600160a01b0392831660048201529051979b50959950939750919550939116916370a08231916024808301926020929190829003018186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d602081101561187c57600080fd5b505160408051808201909152601181527003d3d3d736f6c2d4265666f72655377617607c1b60208201529091506118b39082613c55565b6000805b865181101561195c57611909604051806040016040528060148152602001733d3d3d736f6c2d7061796f7574416d6f756e747360601b8152508783815181106118fc57fe5b6020026020010151613c55565b60005487516001600160a01b039091169088908390811061192657fe5b60200260200101516001600160a01b031614156119545785818151811061194957fe5b602002602001015191505b6001016118b7565b5060018060166101000a81548160ff0219169083151502179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663557c944c8c87896040518463ffffffff1660e01b815260040180846001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611a0b5781810151838201526020016119f3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611a4a578181015183820152602001611a32565b5050505090500195505050505050600060405180830381600087803b158015611a7257600080fd5b505af1158015611a86573d6000803e3d6000fd5b505060008054600154604080516370a0823160e01b81526001600160a01b0392831660048201529051939550911692506370a08231916024808301926020929190829003018186803b158015611adb57600080fd5b505afa158015611aef573d6000803e3d6000fd5b505050506040513d6020811015611b0557600080fd5b505160408051808201909152601081526f03d3d3d736f6c2d4166746572537761760841b6020820152909150611b3b9082613c55565b611b4f82611b498386613d03565b90613d65565b9750611b86604051806040016040528060138152602001720f4f4f5cdbdb0b5c995919595b505b5bdd5b9d606a1b81525089613c55565b8715611b9d57611b9d338c898989898e6000613dbf565b600054604080518d81526001600160a01b039290921660208301528181018a90525133917f40ad36e84406c60dce7dc7362e1d84c3e6978b044c285b63ab46eaa2f0d50525919081900360600190a250505050505050949350505050565b6000806000611c09846120e4565b8093508192505050611d0b81600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6357600080fd5b505afa158015611c77573d6000803e3d6000fd5b505050506040513d6020811015611c8d57600080fd5b50516000546040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015611cd457600080fd5b505afa158015611ce8573d6000803e3d6000fd5b505050506040513d6020811015611cfe57600080fd5b505160ff16600a0a6141dc565b9250505b915091565b600154604080516370a0823160e01b8152336004820181905291516060938493611db49390926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d6c57600080fd5b505afa158015611d80573d6000803e3d6000fd5b505050506040513d6020811015611d9657600080fd5b5051604080516000808252602082019081528183019092529061310b565b915091509091565b600154600160a81b900460ff1690565b6001546001600160a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000090919293949596565b6000546001600160a01b031690565b611ee26129a1565b600154611ef7906001600160a01b03166129ee565b611f00336134f4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dc77205385856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160e01b03191681526020019250505060206040518083038186803b158015611f7f57600080fd5b505afa158015611f93573d6000803e3d6000fd5b505050506040513d6020811015611fa957600080fd5b5051611fe65760405162461bcd60e51b8152600401808060200182810382526021815260200180615b8e6021913960400191505060405180910390fd5b6001546040516001600160e01b03198516602082019081526001600160a01b039092169163a90cce4b9187918791879187916024018383808284378083019250505093505050506040516020818303038152906040526040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561209757818101518382015260200161207f565b50505050905090810190601f1680156120c45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561175e57600080fd5b6000806000600160009054906101000a90046001600160a01b031690506060816001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b15801561213c57600080fd5b505afa158015612150573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561217957600080fd5b8101908080516040519392919084600160201b82111561219857600080fd5b9083019060208201858111156121ad57600080fd5b82518660208202830111600160201b821117156121c957600080fd5b82525081516020918201928201910280838360005b838110156121f65781810151838201526020016121de565b50505050905001604052505050905080516000141561221e5760006001935093505050611d0f565b6060815167ffffffffffffffff8111801561223857600080fd5b50604051908082528060200260200182016040528015612262578160200160208202803683370190505b50905060005b82518110156122ae5761228f8484838151811061228157fe5b60200260200101518961323c565b82828151811061229b57fe5b6020908102919091010152600101612268565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae6f52ad838360008054906101000a90046001600160a01b03166040518463ffffffff1660e01b8152600401808060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019060200280838360005b8381101561235657818101518382015260200161233e565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561239557818101518382015260200161237d565b50505050905001955050505050506040805180830381600087803b1580156123bc57600080fd5b505af11580156123d0573d6000803e3d6000fd5b505050506040513d60408110156123e657600080fd5b5080516020909101519095509350505050915091565b6001600160a01b031660009081526008602052604090205490565b60606124216129a1565b6124296130be565b6001805460ff60b81b1916600160b81b17905561244461305f565b6001805460ff60b01b1916600160b01b179055856124a9576040805162461bcd60e51b815260206004820152601860248201527f6275795368617265733a20456d707479205f6275796572730000000000000000604482015290519081900360640190fd5b85841480156124b757508582145b612508576040805162461bcd60e51b815260206004820152601960248201527f6275795368617265733a20556e657175616c2061727261797300000000000000604482015290519081900360640190fd5b6001546001600160a01b031661251d816129ee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0449d3d826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561258a57600080fd5b505afa15801561259e573d6000803e3d6000fd5b505050506040513d60208110156125b457600080fd5b505115612608576040805162461bcd60e51b815260206004820152601c60248201527f6275795368617265733a2050656e64696e67206d6967726174696f6e00000000604482015290519081900360640190fd5b60008061261560016120e4565b9150915080612664576040805162461bcd60e51b8152602060048201526016602482015275313abca9b430b932b99d1024b73b30b634b21023a0ab60511b604482015290519081900360640190fd5b6126a333898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614208915050565b60008060009054906101000a90046001600160a01b03169050600061276784866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126fb57600080fd5b505afa15801561270f573d6000803e3d6000fd5b505050506040513d602081101561272557600080fd5b50516040805163313ce56760e01b815290516001600160a01b0387169163313ce567916004808301926020929190829003018186803b158015611cd457600080fd5b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631d68702d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c257600080fd5b505afa1580156127d6573d6000803e3d6000fd5b505050506040513d60208110156127ec57600080fd5b5051600680546001600160a01b0319166001600160a01b039283161790556040805163182d557360e11b815290517f00000000000000000000000000000000000000000000000000000000000000009092169163305aaae691600480820192602092909190829003018186803b15801561286557600080fd5b505afa158015612879573d6000803e3d6000fd5b505050506040513d602081101561288f57600080fd5b50516004558a67ffffffffffffffff811180156128ab57600080fd5b506040519080825280602002602001820160405280156128d5578160200160208202803683370190505b50955060005b8b811015612978576129318d8d838181106128f257fe5b905060200201356001600160a01b03168c8c8481811061290e57fe5b905060200201358b8b8581811061292157fe5b9050602002013589868a896144d5565b87828151811061293d57fe5b60200260200101818152505061296e8b8b8381811061295857fe5b9050602002013586613d6590919063ffffffff16565b94506001016128db565b5061298433878661483a565b50505050506001805461ffff60b01b191690559695505050505050565b6129a9614a39565b156129ec576040805162461bcd60e51b815260206004820152600e60248201526d119d5b99081a5cc81c185d5cd95960921b604482015290519081900360640190fd5b565b6001600160a01b038116612a3b576040805162461bcd60e51b815260206004820152600f60248201526e46756e64206e6f742061637469766560881b604482015290519081900360640190fd5b50565b600154600160b01b900460ff16612a865760405162461bcd60e51b8152600401808060200182810382526032815260200180615c586032913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612b51576004816007811115612ace57fe5b1480612ae557506006816007811115612ae357fe5b145b80612afb57506007816007811115612af957fe5b145b80612b1157506005816007811115612b0f57fe5b145b612b4c5760405162461bcd60e51b8152600401808060200182810382526041815260200180615bd36041913960600191505060405180910390fd5b612c38565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612c01576001816007811115612b9957fe5b1480612bb057506002816007811115612bae57fe5b145b80612bc657506003816007811115612bc457fe5b145b612b4c5760405162461bcd60e51b8152600401808060200182810382526039815260200180615b556039913960400191505060405180910390fd5b60405162461bcd60e51b8152600401808060200182810382526032815260200180615a936032913960400191505060405180910390fd5b5050565b6000818060200190516020811015612c5357600080fd5b5051600154604080516327783b1760e11b81526001600160a01b0380851660048301529151939450911691634ef0762e9160248082019260009290919082900301818387803b15801561150057600080fd5b6000806000838060200190516060811015612cbf57600080fd5b508051602082015160409283015160015484516331bca92d60e21b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163c6f2a4b491606480830192600092919082900301818387803b15801561175e57600080fd5b600080828060200190516040811015612d4957600080fd5b50805160209091015160015460408051633b9e9f0160e21b81526001600160a01b038086166004830152602482018590529151949650929450169163ee7a7c049160448082019260009290919082900301818387803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050505050565b600080828060200190516040811015612de057600080fd5b508051602090910151600154604080516329460cc560e11b81526001600160a01b038086166004830152602482018590529151949650929450169163528c198a9160448082019260009290919082900301818387803b158015612dab57600080fd5b6000818060200190516020811015612e5957600080fd5b50516000549091506001600160a01b03808316911614612c385760015460408051631c3efc4d60e21b81526001600160a01b038481166004830152915191909216916370fbf13491602480830192600092919082900301818387803b15801561150057600080fd5b6000806000838060200190516060811015612edb57600080fd5b5080516020820151604092830151600154845163bfc77beb60e01b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163bfc77beb91606480830192600092919082900301818387803b15801561175e57600080fd5b6000806000838060200190516060811015612f6757600080fd5b508051602082015160409283015160015484516312575d4f60e21b81526001600160a01b0380861660048301528085166024830152604482018490529551949850929650909450929092169163495d753c91606480830192600092919082900301818387803b15801561175e57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614612a3b576040805162461bcd60e51b815260206004820152601a60248201527f4f6e6c792046756e644465706c6f7965722063616c6c61626c65000000000000604482015290519081900360640190fd5b600154600160b01b900460ff16156129ec576040805162461bcd60e51b815260206004820152601860248201527f5661756c7420616374696f6e2072652d656e7472616e63650000000000000000604482015290519081900360640190fd5b600154600160b81b900460ff16156129ec576040805162461bcd60e51b815260206004820152600b60248201526a52652d656e7472616e636560a81b604482015290519081900360640190fd5b6060806131166130be565b6001805460ff60b81b1916600160b81b17905560606000613139888888886135cd565b9296509094509250905061315588888686868660006001613dbf565b876001600160a01b03167fce8be57c942668208b28e8687882422313992b50d7731f1467d6d5b881dee105888686604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156131cd5781810151838201526020016131b5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561320c5781810151838201526020016131f4565b505050509050019550505050505060405180910390a250506001805460ff60b81b19169055909590945092505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d8c1985856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156132ac57600080fd5b505afa1580156132c0573d6000803e3d6000fd5b505050506040513d60208110156132d657600080fd5b5051905080156134705760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dacb2d016040518163ffffffff1660e01b815260040180806822bc31b430b733b2b960b91b815250602001806020018281038252602d815260200180615cbf602d913960400191505060206040518083038186803b15801561336e57600080fd5b505afa158015613382573d6000803e3d6000fd5b505050506040513d602081101561339857600080fd5b5051604080516306c5a00b60e21b81526001600160a01b03898116600483015260248201869052915192935090831691631b16802c916044808201926060929091908290030181600087803b1580156133f057600080fd5b505af192505050801561342457506040513d606081101561341057600080fd5b508051602082015160409092015190919060015b61346a5783156134655760405162461bcd60e51b815260040180806020018281038252602f815260200180615a64602f913960400191505060405180910390fd5b61346e565b5050505b505b836001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156134bd57600080fd5b505afa1580156134d1573d6000803e3d6000fd5b505050506040513d60208110156134e757600080fd5b50519150505b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561354257600080fd5b505afa158015613556573d6000803e3d6000fd5b505050506040513d602081101561356c57600080fd5b50516001600160a01b03828116911614612a3b576040805162461bcd60e51b815260206004820152601860248201527f4f6e6c792066756e64206f776e65722063616c6c61626c650000000000000000604482015290519081900360640190fd5b606080606060006135dc6130be565b6001805460ff60b81b1916600160b81b1790558661362b5760405162461bcd60e51b815260040180806020018281038252602e815260200180615d60602e913960400191505060405180910390fd5b61363486614ae9565b61366f5760405162461bcd60e51b8152600401808060200182810382526039815260200180615ac56039913960400191505060405180910390fd5b61367885614ae9565b6136b35760405162461bcd60e51b8152600401808060200182810382526035815260200180615c8a6035913960400191505060405180910390fd5b6001546040805163d0449d3d60e01b81526001600160a01b0392831660048201819052915191927f0000000000000000000000000000000000000000000000000000000000000000169163d0449d3d91602480820192602092909190829003018186803b15801561372357600080fd5b505afa158015613737573d6000803e3d6000fd5b505050506040513d602081101561374d57600080fd5b50516137785761375c89614b7d565b6001600160a01b03891660009081526003602052604090204290555b613780614a39565b61378e5761378e8989614bf7565b604080516370a0823160e01b81526001600160a01b038b81166004830152915183928316916370a08231916024808301926020929190829003018186803b1580156137d857600080fd5b505afa1580156137ec573d6000803e3d6000fd5b505050506040513d602081101561380257600080fd5b50518911156138425760405162461bcd60e51b8152600401808060200182810382526027815260200180615cec6027913960400191505060405180910390fd5b61394c826001600160a01b031663c4b973706040518163ffffffff1660e01b815260040160006040518083038186803b15801561387e57600080fd5b505afa158015613892573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156138bb57600080fd5b8101908080516040519392919084600160201b8211156138da57600080fd5b9083019060208201858111156138ef57600080fd5b82518660208202830111600160201b8211171561390b57600080fd5b82525081516020918201928201910280838360005b83811015613938578181015183820152602001613920565b505050509050016040525050508989614e19565b9550600086511161398e5760405162461bcd60e51b8152600401808060200182810382526024815260200180615b316024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e8f4a776040518163ffffffff1660e01b815260040160206040518083038186803b1580156139e757600080fd5b505afa1580156139fb573d6000803e3d6000fd5b505050506040513d6020811015613a1157600080fd5b505160058190556040805180820190915260158152741e9e9e9eb9b7b61d3332b2abb4ba34323930bb9d1d60591b6020820152613a4d91613c55565b855167ffffffffffffffff81118015613a6557600080fd5b50604051908082528060200260200182016040528015613a8f578160200160208202803683370190505b509450855167ffffffffffffffff81118015613aaa57600080fd5b50604051908082528060200260200182016040528015613ad4578160200160208202803683370190505b509350806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d6020811015613b3a57600080fd5b5051600554909350600090613b6490670de0b6b3a764000090613b5e908d9061500b565b90615064565b90506000613b728b83613d03565b905060005b8851811015613c35576000613ba1868b8481518110613b9257fe5b6020026020010151600161323c565b905060008111613be25760405162461bcd60e51b8152600401808060200182810382526033815260200180615afe6033913960400191505060405180910390fd5b613bf087613b5e838661500b565b898381518110613bfc57fe5b6020908102919091010152613c1587613b5e838761500b565b888381518110613c2157fe5b602090810291909101015250600101613b77565b50505050506001805460ff60b81b19169055929791965094509092509050565b612c3882826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613ca0578181015183820152602001613c88565b50505050905090810190601f168015613ccd5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905293506150cb92505050565b600082821115613d5a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6000828201838110156134ed576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60015460408051633b9e9f0160e21b81526001600160a01b038b81166004830152602482018b905291519190921691829163ee7a7c049160448082019260009290919082900301818387803b158015613e1757600080fd5b505af1158015613e2b573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631d68702d6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e8857600080fd5b505afa158015613e9c573d6000803e3d6000fd5b505050506040513d6020811015613eb257600080fd5b5051600680546001600160a01b0319166001600160a01b0390921691909117905560005b87518110156141d05784891415613f955760005488516001600160a01b0390911690899083908110613f0457fe5b60200260200101516001600160a01b031614613f9557816001600160a01b03166370fbf134898381518110613f3557fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015613f7c57600080fd5b505af1158015613f90573d6000803e3d6000fd5b505050505b8215614063576000878281518110613fa957fe5b6020026020010151111561405e57816001600160a01b031663495d753c898381518110613fd257fe5b60200260200101518c8a8581518110613fe757fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561404557600080fd5b505af1158015614059573d6000803e3d6000fd5b505050505b6140da565b83156140da5760008054604080516312575d4f60e21b81526001600160a01b0392831660048201528d831660248201526044810188905290519185169263495d753c9260648084019382900301818387803b1580156140c157600080fd5b505af11580156140d5573d6000803e3d6000fd5b505050505b60008682815181106140e857fe5b602002602001015111801561410757506006546001600160a01b031615155b156141c857816001600160a01b031663495d753c89838151811061412757fe5b6020026020010151600660009054906101000a90046001600160a01b031689858151811061415157fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156141af57600080fd5b505af11580156141c3573d6000803e3d6000fd5b505050505b600101613ed6565b50505050505050505050565b6000826141ea5750806134ed565b61420083613b5e86670de0b6b3a764000061500b565b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630442bad530600086868660405160200180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561429557818101518382015260200161427d565b505050509050019450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b031681526020018360058111156142df57fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561431d578181015183820152602001614305565b50505050905090810190601f16801561434a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561436b57600080fd5b505af115801561437f573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637759c1646001858560405160200180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156144085781810151838201526020016143f0565b505050509050019350505050604051602081830303815290604052846040518463ffffffff1660e01b81526004018084600581111561444357fe5b815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561448757818101518382015260200161446f565b50505050905090810190601f1680156144b45780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612dab57600080fd5b6000876144e181614b7d565b600088116145205760405162461bcd60e51b8152600401808060200182810382526024815260200180615baf6024913960400191505060405180910390fd5b61452c898989876150ec565b61454d670de0b6b3a7640000613b5e6004548b61500b90919063ffffffff16565b6007819055600090614560908a90613d03565b9050600061457a87613b5e84670de0b6b3a764000061500b565b90506000886001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156145cb57600080fd5b505afa1580156145df573d6000803e3d6000fd5b505050506040513d60208110156145f557600080fd5b5051604080516329460cc560e11b81526001600160a01b038f81166004830152602482018690529151929350908b169163528c198a9160448082019260009290919082900301818387803b15801561464c57600080fd5b505af1158015614660573d6000803e3d6000fd5b5061467a925050506001600160a01b038716338b86615319565b6001600160a01b03861660009081526008602052604090205461469d908c613d65565b6001600160a01b0380881660009081526008602052604090209190915560065416158015906146ce57506000600754115b156146f5576006546007546146f5916001600160a01b038981169233929190911690615319565b6147018c8c848a615373565b614784818a6001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561475257600080fd5b505afa158015614766573d6000803e3d6000fd5b505050506040513d602081101561477c57600080fd5b505190613d03565b9450898510156147c55760405162461bcd60e51b8152600401808060200182810382526031815260200180615a336031913960400191505060405180910390fd5b604080518c81526020810184905280820187905290516001600160a01b038e169133917f050bd6ef6b1b818f58ae43f028aa7318a580ca0c793eca2df0033c7ae63094589181900360600190a35050506001600160a01b03166000908152600360205260409020429055979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630442bad530600386868660405160200180846001600160a01b0316815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156148c75781810151838201526020016148af565b505050509050019450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183600581111561491157fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561494f578181015183820152602001614937565b50505050905090810190601f16801561497c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561499d57600080fd5b505af11580156149b1573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637759c1646004858560405160200180836001600160a01b031681526020018060200182810382528381815181526020019150805190602001906020028083836000838110156144085781810151838201526020016143f0565b600060027f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a5fede1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a9657600080fd5b505afa158015614aaa573d6000803e3d6000fd5b505050506040513d6020811015614ac057600080fd5b50516002811115614acd57fe5b148015614ae45750600154600160a81b900460ff16155b905090565b60006001825111614afc57506001611135565b815160005b81811015614b7357600181015b82811015614b6a57848181518110614b2257fe5b60200260200101516001600160a01b0316858381518110614b3f57fe5b60200260200101516001600160a01b03161415614b625760009350505050611135565b600101614b0e565b50600101614b01565b5060019392505050565b6002546001600160a01b038216600090815260036020526040902054614ba4904290613d03565b1015612a3b576040805162461bcd60e51b815260206004820152601860248201527f53686172657320616374696f6e2074696d656c6f636b65640000000000000000604482015290519081900360640190fd5b614bff61305f565b6001805460ff60b01b1916600160b01b179055604080516001600160a01b0384811660208301528183018490528251808303840181526060830193849052631dd6705960e21b9093527f00000000000000000000000000000000000000000000000000000000000000001691637759c16491600591906000906064018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614cc1578181015183820152602001614ca9565b50505050905090810190601f168015614cee5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015614d0f57600080fd5b505af1925050508015614d20575060015b614e08573d808015614d4e576040519150601f19603f3d011682016040523d82523d6000602084013e614d53565b606091505b507fb3ea7e5141baf21804d12f5a635e83e0cb869c8b06b88648364769f85aa73fc28184846040518080602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015614dca578181015183820152602001614db2565b50505050905090810190601f168015614df75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1505b50506001805460ff60b01b19169055565b606080614e2685846155cf565b9050835160001415614e395790506134ed565b6060845167ffffffffffffffff81118015614e5357600080fd5b50604051908082528060200260200182016040528015614e7d578160200160208202803683370190505b5090506000805b8651811015614ee457614eb3878281518110614e9c57fe5b60200260200101518561575b90919063ffffffff16565b614edc576001838281518110614ec557fe5b911515602092830291909101909101526001909101905b600101614e84565b5080614ef5578293505050506134ed565b8251614f019082613d65565b67ffffffffffffffff81118015614f1757600080fd5b50604051908082528060200260200182016040528015614f41578160200160208202803683370190505b50935060005b8351811015614f9057838181518110614f5c57fe5b6020026020010151858281518110614f7057fe5b6001600160a01b0390921660209283029190910190910152600101614f47565b50825160005b8751811015614fff57838181518110614fab57fe5b602002602001015115614ff757878181518110614fc457fe5b6020026020010151868381518110614fd857fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101614f96565b50505050509392505050565b60008261501a57506000613d5f565b8282028284828161502757fe5b04146134ed5760405162461bcd60e51b8152600401808060200182810382526021815260200180615c376021913960400191505060405180910390fd5b60008082116150ba576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816150c357fe5b049392505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080516001600160a01b0386811660208301528183018690526060808301869052835180840390910181526080830193849052631dd6705960e21b9093527f00000000000000000000000000000000000000000000000000000000000000001691637759c164916002919085906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156151a357818101518382015260200161518b565b50505050905090810190601f1680156151d05780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156151f157600080fd5b505af1158015615205573d6000803e3d6000fd5b5050604080516001600160a01b0388811660208301528183018890526060820187905260808083018790528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181527f00000000000000000000000000000000000000000000000000000000000000009092169550630442bad594509260019290919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156152cb5781810151838201526020016152b3565b50505050905090810190601f1680156152f85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561175e57600080fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117779085906157b1565b600061537f8285613d65565b604080516001600160a01b0388811660208301528183018890526060808301889052835180840390910181526080830193849052631dd6705960e21b9093529293507f000000000000000000000000000000000000000000000000000000000000000090921691637759c1649160039185906084018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561543a578181015183820152602001615422565b50505050905090810190601f1680156154675780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561548857600080fd5b505af115801561549c573d6000803e3d6000fd5b5050604080516001600160a01b0389811660208301528183018990526060820188905260808083018790528351808403909101815260a0830193849052630442bad560e01b9093523060a483018181527f00000000000000000000000000000000000000000000000000000000000000009092169550630442bad594509260029290919060c40183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561556257818101518382015260200161554a565b50505050905090810190601f16801561558f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156155b057600080fd5b505af11580156155c4573d6000803e3d6000fd5b505050505050505050565b60608151600014156155e2575081613d5f565b6060835167ffffffffffffffff811180156155fc57600080fd5b50604051908082528060200260200182016040528015615626578160200160208202803683370190505b50845190915060005b8551811015615688576156558587838151811061564857fe5b602002602001015161575b565b1561568057600183828151811061566857fe5b91151560209283029190910190910152600019909101905b60010161562f565b50845181141561569a57849250615753565b8015615753578067ffffffffffffffff811180156156b757600080fd5b506040519080825280602002602001820160405280156156e1578160200160208202803683370190505b5092506000805b8651811015615750578381815181106156fd57fe5b60200260200101516157485786818151811061571557fe5b602002602001015185838151811061572957fe5b6001600160a01b03909216602092830291909101909101526001909101905b6001016156e8565b50505b505092915050565b6000805b83518110156157a75783818151811061577457fe5b60200260200101516001600160a01b0316836001600160a01b0316141561579f576001915050613d5f565b60010161575f565b5060009392505050565b6060615806826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166158629092919063ffffffff16565b805190915015610b7e5780806020019051602081101561582557600080fd5b5051610b7e5760405162461bcd60e51b815260040180806020018281038252602a815260200180615d36602a913960400191505060405180910390fd5b606061420084846000858561587685615988565b6158c7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106159065780518252601f1990920191602091820191016158e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615968576040519150601f19603f3d011682016040523d82523d6000602084013e61596d565b606091505b509150915061597d82828661598e565b979650505050505050565b3b151590565b6060831561599d5750816134ed565b8251156159ad5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156159f75781810151838201526020016159df565b50505050905090810190601f168015615a245780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f6275795368617265733a20536861726573207265636569766564203c205f6d696e5368617265735175616e7469747966696e616c697a65416e64476574417373657442616c616e63653a2043616e6e6f7420736574746c652053796e74685f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f7420612076616c6964206163746f725f5f63616c6352656465656d5368617265733a205f6164646974696f6e616c41737365747320636f6e7461696e73206475706c6963617465735f5f63616c6352656465656d5368617265733a205061796f757420616d6f756e74206d757374206265206772656174657220305f5f63616c6352656465656d5368617265733a204e6f207061796f7574206173736574735f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f742076616c696420666f72204665654d616e616765727661756c7443616c6c4f6e436f6e74726163743a20556e726567697374657265645f5f6275795368617265733a20456d707479205f696e766573746d656e74416d6f756e745f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f742076616c696420666f7220496e746567726174696f6e4d616e6167657263616c6c4f6e457874656e73696f6e3a205f657874656e73696f6e20696e76616c6964536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f5f6173736572745065726d697373696f6e65645661756c74416374696f6e3a204e6f20616374696f6e20616c6c6f7765645f5f63616c6352656465656d5368617265733a205f617373657473546f536b697020636f6e7461696e73206475706c69636174657366696e616c697a65416e64476574417373657442616c616e63653a204d697373696e672045786368616e6765725f5f63616c6352656465656d5368617265733a20496e73756666696369656e74207368617265737365744f7665727269646550617573653a2056616c756520616c7265616479207365745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f5f63616c6352656465656d5368617265733a205f7368617265735175616e74697479206d757374206265203e30a264697066735822122027455027527ad26b05b289acc04e710bf64c262fb56bbdef69f526536e2c29df64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activate(address,bool)": {
        "details": "No need to assert anything beyond FundDeployer access.",
        "params": {
          "_isMigration": "True if a migrated fund is being activated",
          "_vaultProxy": "The VaultProxy to attach to the fund"
        }
      },
      "buyShares(address[],uint256[],uint256[])": {
        "details": "Param arrays have indexes corresponding to individual __buyShares() orders.",
        "params": {
          "_buyers": "The accounts for which to buy shares",
          "_investmentAmounts": "The amounts of the fund's denomination asset with which to buy shares for the corresponding _buyers",
          "_minSharesQuantities": "The minimum quantities of shares to buy with the corresponding _investmentAmounts"
        },
        "returns": {
          "sharesReceivedAmounts_": "The actual amounts of shares received by the corresponding _buyers"
        }
      },
      "calcEachBalance(address)": {
        "returns": {
          "balance_": "The denomination balance"
        }
      },
      "calcGav(bool)": {
        "params": {
          "_requireFinality": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "gav_": "The fund GAV",
          "isValid_": "True if the conversion rates used to derive the GAV are all valid"
        }
      },
      "calcGrossShareValue(bool)": {
        "details": "Does not account for any fees outstanding.",
        "params": {
          "_requireFinality": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "grossShareValue_": "The amount of the denomination asset per share",
          "isValid_": "True if the conversion rates to derive the value are all valid"
        }
      },
      "callOnExtension(address,uint256,bytes)": {
        "details": "Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \"permissioned vault actions\" during calls originating from this function.",
        "params": {
          "_actionId": "An ID representing the action to take on the extension (see extension)",
          "_callArgs": "The encoded data for the call",
          "_extension": "The Extension contract to call (e.g., FeeManager)"
        }
      },
      "configureExtensions(bytes,bytes)": {
        "details": "No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerLib has been deployed, giving access to its state and interface",
        "params": {
          "_feeManagerConfigData": "Encoded config for fees to enable",
          "_policyManagerConfigData": "Encoded config for policies to enable"
        }
      },
      "destruct()": {
        "details": "No need to assert anything beyond FundDeployer access. Calling onlyNotPaused here rather than in the FundDeployer allows the owner to potentially override the pause and rescue unpaid fees."
      },
      "getSynthetixAddressResolver()": {
        "returns": {
          "synthetixAddressResolver_": "The `SYNTHETIX_ADDRESS_RESOLVER` variable value"
        }
      },
      "getSynthetixPriceFeed()": {
        "returns": {
          "synthetixPriceFeed_": "The `SYNTHETIX_PRICE_FEED` variable value"
        }
      },
      "init(address,uint256)": {
        "details": "Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.",
        "params": {
          "_denominationAsset": "The asset in which the fund's value should be denominated",
          "_sharesActionTimelock": "The minimum number of seconds between any two \"shares actions\" (buying or selling shares) by the same user"
        }
      },
      "permissionedVaultAction(uint8,bytes)": {
        "params": {
          "_action": "The enum representing the VaultAction to perform on the VaultProxy",
          "_actionData": "The call data for the action to perform"
        }
      },
      "redeemShares()": {
        "details": "See __redeemShares() for further detail",
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the redeemer",
          "payoutAssets_": "The assets paid out to the redeemer"
        }
      },
      "redeemSharesDetailed(uint256,address[],address[])": {
        "details": "Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail.",
        "params": {
          "_additionalAssets": "Additional (non-tracked) assets to claim",
          "_assetsToSkip": "Tracked assets to forfeit",
          "_sharesQuantity": "The quantity of shares to redeem"
        },
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the redeemer",
          "payoutAssets_": "The assets paid out to the redeemer"
        }
      },
      "setOverridePause(bool)": {
        "params": {
          "_nextOverridePause": "True if the pause should be overrode"
        }
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "params": {
          "_contract": "The contract to call",
          "_encodedArgs": "The encoded arguments for the call",
          "_selector": "The selector to call"
        }
      }
    },
    "title": "ComptrollerLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activate(address,bool)": {
        "notice": "Activates the fund by attaching a VaultProxy and activating all Extensions"
      },
      "buyShares(address[],uint256[],uint256[])": {
        "notice": "Buys shares in the fund for multiple sets of criteria"
      },
      "calcEachBalance(address)": {
        "notice": "Calculates the denomination balance of the fund"
      },
      "calcGav(bool)": {
        "notice": "Calculates the gross asset value (GAV) of the fund"
      },
      "calcGrossShareValue(bool)": {
        "notice": "Calculates the gross value of 1 unit of shares in the fund's denomination asset"
      },
      "callOnExtension(address,uint256,bytes)": {
        "notice": "Calls a specified action on an Extension"
      },
      "configureExtensions(bytes,bytes)": {
        "notice": "Configure the extensions of a fund"
      },
      "destruct()": {
        "notice": "Remove the config for a fund"
      },
      "getDenominationAsset()": {
        "notice": "Gets the `denominationAsset` variable"
      },
      "getLibRoutes()": {
        "notice": "Gets the routes for the various contracts used by all funds"
      },
      "getOverridePause()": {
        "notice": "Gets the `overridePause` variable"
      },
      "getSharesActionTimelock()": {
        "notice": "Gets the `sharesActionTimelock` variable"
      },
      "getSynthetixAddressResolver()": {
        "notice": "Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable"
      },
      "getSynthetixPriceFeed()": {
        "notice": "Gets the `SYNTHETIX_PRICE_FEED` variable"
      },
      "getVaultProxy()": {
        "notice": "Gets the `vaultProxy` variable"
      },
      "init(address,uint256)": {
        "notice": "Initializes a fund with its core config"
      },
      "permissionedVaultAction(uint8,bytes)": {
        "notice": "Makes a permissioned, state-changing call on the VaultProxy contract"
      },
      "redeemShares()": {
        "notice": "Redeem all of the sender's shares for a proportionate slice of the fund's assets"
      },
      "redeemSharesDetailed(uint256,address[],address[])": {
        "notice": "Redeem a specified quantity of the sender's shares for a proportionate slice of the fund's assets, optionally specifying additional assets and assets to skip."
      },
      "setOverridePause(bool)": {
        "notice": "Sets or unsets an override on a release-wide pause"
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "notice": "Makes an arbitrary call with the VaultProxy contract as the sender"
      }
    },
    "notice": "The core logic library shared by all funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10314,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "denominationAsset",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10316,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "vaultProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10318,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "isLib",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10320,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "overridePause",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10322,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "permissionedVaultActionAllowed",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10324,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "reentranceLocked",
        "offset": 23,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10326,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "sharesActionTimelock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10330,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "acctToLastSharesAction",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10332,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "feeDeposit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10334,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "feeWithdraw",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10336,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "daoAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10338,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "buyFeeAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10342,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "investAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}