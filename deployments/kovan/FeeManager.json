{
  "address": "0xc8A394A3537092D9728B5480070A1bF29c8F3e20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFee",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "AllSharesOutstandingForcePaidForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        }
      ],
      "name": "FeeDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "settingsData",
          "type": "bytes"
        }
      ],
      "name": "FeeEnabledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForSettle",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForUpdate",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "usesGavOnSettle",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "usesGavOnUpdate",
          "type": "bool"
        }
      ],
      "name": "FeeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "FeeSettledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevFeesRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextFeesRecipient",
          "type": "address"
        }
      ],
      "name": "FeesRecipientSetForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "SharesOutstandingPaidForFund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "actionForRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        }
      ],
      "name": "deregisterFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        }
      ],
      "name": "feeSettlesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "settlesOnHook_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        }
      ],
      "name": "feeUpdatesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "updatesOnHook_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "feeUsesGavOnSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "feeUsesGavOnUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getEnabledFeesForFund",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "enabledFees_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "getFeeSharesOutstandingForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesOutstanding_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegisteredFees",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "registeredFees_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getVaultProxyForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "invokeHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "isRegisteredFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegisteredFee_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        }
      ],
      "name": "registerFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_configData",
          "type": "bytes"
        }
      ],
      "name": "setConfigForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4a7418e27353bd0c4721b65485122d491602263a1fa9939a15f4fa34c61be54",
  "receipt": {
    "to": null,
    "from": "0xb10bcC8B508174c761CFB1E7143bFE37c4fBC3a1",
    "contractAddress": "0xc8A394A3537092D9728B5480070A1bF29c8F3e20",
    "transactionIndex": 5,
    "gasUsed": "3232603",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf3195fb295c3ddf7fdf0aa31905f6eb835ef566b494c273c32758ddccb52483c",
    "transactionHash": "0xe4a7418e27353bd0c4721b65485122d491602263a1fa9939a15f4fa34c61be54",
    "logs": [],
    "blockNumber": 27382180,
    "cumulativeGasUsed": "4384485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5cBbA5484594598a660636eFb0A1AD953aFa4e32",
    "0x482a493EA47903a571b20E35B770aFfE06600a3D"
  ],
  "solcInputHash": "616bcd197648f809b4b4e612fb09cc9a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"AllSharesOutstandingForcePaidForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"FeeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"settingsData\",\"type\":\"bytes\"}],\"name\":\"FeeEnabledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForSettle\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForUpdate\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usesGavOnSettle\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usesGavOnUpdate\",\"type\":\"bool\"}],\"name\":\"FeeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"FeeSettledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevFeesRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextFeesRecipient\",\"type\":\"address\"}],\"name\":\"FeesRecipientSetForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"SharesOutstandingPaidForFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"actionForRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"}],\"name\":\"deregisterFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"feeSettlesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"settlesOnHook_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"feeUpdatesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updatesOnHook_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"feeUsesGavOnSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"feeUsesGavOnUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getEnabledFeesForFund\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enabledFees_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"getFeeSharesOutstandingForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOutstanding_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredFees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"registeredFees_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getVaultProxyForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"invokeHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"isRegisteredFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegisteredFee_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"}],\"name\":\"registerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"}],\"name\":\"setConfigForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deactivateForFund()\":{\"details\":\"msg.sender is validated during __invokeHook()\"},\"deregisterFees(address[])\":{\"params\":{\"_fees\":\"Addresses of fees to be deregistered\"}},\"feeSettlesOnHook(address,uint8)\":{\"params\":{\"_fee\":\"The address of the fee to check\",\"_hook\":\"The FeeHook to check\"},\"returns\":{\"settlesOnHook_\":\"True if the fee settles on the given hook\"}},\"feeUpdatesOnHook(address,uint8)\":{\"params\":{\"_fee\":\"The address of the fee to check\",\"_hook\":\"The FeeHook to check\"},\"returns\":{\"updatesOnHook_\":\"True if the fee updates on the given hook\"}},\"feeUsesGavOnSettle(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"usesGav_\":\"True if the fee uses GAV during settle() implementation\"}},\"feeUsesGavOnUpdate(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"usesGav_\":\"True if the fee uses GAV during update() implementation\"}},\"getEnabledFeesForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"enabledFees_\":\"An array of enabled fee addresses\"}},\"getFeeSharesOutstandingForFund(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_fee\":\"The fee address\"},\"returns\":{\"sharesOutstanding_\":\"The amount of shares outstanding\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getRegisteredFees()\":{\"returns\":{\"registeredFees_\":\"A list of all registered fee addresses\"}},\"getVaultProxyForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"vaultProxy_\":\"The VaultProxy of the fund\"}},\"invokeHook(uint8,bytes,uint256)\":{\"params\":{\"_gav\":\"The GAV for a fund if known in the invocating code, otherwise 0\",\"_hook\":\"The FeeHook to invoke\",\"_settlementData\":\"The encoded settlement parameters specific to the FeeHook\"}},\"isRegisteredFee(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"isRegisteredFee_\":\"True if the fee is registered\"}},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"details\":\"This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.\",\"params\":{\"_actionId\":\"An ID representing the desired action\",\"_callArgs\":\"Encoded arguments specific to the _actionId\"}},\"registerFees(address[])\":{\"details\":\"Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.\",\"params\":{\"_fees\":\"Addresses of fees to be registered\"}},\"setConfigForFund(bytes)\":{\"details\":\"Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.\",\"params\":{\"_configData\":\"Encoded config data\"}}},\"title\":\"FeeManager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(bool)\":{\"notice\":\"Activate already-configured fees for use in the calling fund\"},\"deactivateForFund()\":{\"notice\":\"Deactivate fees for a fund\"},\"deregisterFees(address[])\":{\"notice\":\"Remove fees from the list of registered fees\"},\"feeSettlesOnHook(address,uint8)\":{\"notice\":\"Checks if a fee implements settle() on a particular hook\"},\"feeUpdatesOnHook(address,uint8)\":{\"notice\":\"Checks if a fee implements update() on a particular hook\"},\"feeUsesGavOnSettle(address)\":{\"notice\":\"Checks if a fee uses GAV in its settle() implementation\"},\"feeUsesGavOnUpdate(address)\":{\"notice\":\"Checks if a fee uses GAV in its update() implementation\"},\"getEnabledFeesForFund(address)\":{\"notice\":\"Get a list of enabled fees for a given fund\"},\"getFeeSharesOutstandingForFund(address,address)\":{\"notice\":\"Get the amount of shares outstanding for a particular fee for a fund\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getRegisteredFees()\":{\"notice\":\"Get all registered fees\"},\"getVaultProxyForFund(address)\":{\"notice\":\"Gets the verified VaultProxy for a given ComptrollerProxy\"},\"invokeHook(uint8,bytes,uint256)\":{\"notice\":\"Allows all fees for a particular FeeHook to implement settle() and update() logic\"},\"isRegisteredFee(address)\":{\"notice\":\"Check whether a fee is registered\"},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"notice\":\"Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\"},\"registerFees(address[])\":{\"notice\":\"Add fees to the list of registered fees\"},\"setConfigForFund(bytes)\":{\"notice\":\"Enable and configure fees for use in the calling fund\"}},\"notice\":\"Manages fees for funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDispatcher Interface\\r\\ninterface IDispatcher {\\r\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function deployVaultProxy(\\r\\n        address _vaultLib,\\r\\n        address _owner,\\r\\n        address _vaultAccessor,\\r\\n        string calldata _fundName\\r\\n    ) external returns (address vaultProxy_);\\r\\n\\r\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\r\\n\\r\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address fundDeployer_);\\r\\n\\r\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address nextFundDeployer_,\\r\\n            address nextVaultAccessor_,\\r\\n            address nextVaultLib_,\\r\\n            uint256 executableTimestamp_\\r\\n        );\\r\\n\\r\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\r\\n\\r\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\r\\n\\r\\n    function getOwner() external view returns (address owner_);\\r\\n\\r\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\r\\n\\r\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 secondsRemaining_);\\r\\n\\r\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasExecutableRequest_);\\r\\n\\r\\n    function hasMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasMigrationRequest_);\\r\\n\\r\\n    function removeNominatedOwner() external;\\r\\n\\r\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\r\\n\\r\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\r\\n\\r\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\r\\n\\r\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\r\\n\\r\\n    function signalMigration(\\r\\n        address _vaultProxy,\\r\\n        address _nextVaultAccessor,\\r\\n        address _nextVaultLib,\\r\\n        bool _bypassFailure\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9f2f0d998dc8beb620c2b4f0758b3884437b1dab9379eac561c8d98d70e1a81a\",\"license\":\"GPL-3.0\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IMigratableVault Interface\\r\\n/// @dev DO NOT EDIT CONTRACT\\r\\ninterface IMigratableVault {\\r\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\r\\n\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external;\\r\\n\\r\\n    function setAccessor(address _nextAccessor) external;\\r\\n\\r\\n    function setVaultLib(address _nextVaultLib) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1210d49cd7c30f8d7ee6d65236a94bfd7d7572d256d422b8adf807f036711d3b\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {\\r\\n        PreLaunch,\\r\\n        Live,\\r\\n        Paused\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x744fb5f08505c174df34eccb6b8f80bb4f2af66b4eacc46c38b51f1e766a422e\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../extensions/IExtension.sol\\\";\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../../../infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../../utils/AssetFinalityResolver.sol\\\";\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\nimport \\\"../../../extensions/fee-manager/fees/ProtocolFee.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\n/// @title ComptrollerLib Contract\\n/// @notice The core logic library shared by all funds\\ncontract ComptrollerLib is IComptroller, AssetFinalityResolver {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\n\\n    event OverridePauseSet(bool indexed overridePause);\\n\\n    event PreRedeemSharesHookFailed(\\n        bytes failureReturnData,\\n        address redeemer,\\n        uint256 sharesQuantity\\n    );\\n\\n    event SharesBought(\\n        address indexed caller,\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 sharesIssued,\\n        uint256 sharesReceived\\n    );\\n\\n    event SharesRedeemed(\\n        address indexed redeemer,\\n        uint256 sharesQuantity,\\n        address[] receivedAssets,\\n        uint256[] receivedAssetQuantities\\n    );\\n\\n    event SharesRedeemedToDenom(\\n        address indexed redeemer,\\n        uint256 sharesQuantity,\\n        address denominationAsset,\\n        uint256 amountToDenom\\n    );\\n\\n    event VaultProxySet(address vaultProxy);\\n\\n    // Constants and immutables - shared by all proxies\\n    uint256 private constant SHARES_UNIT = 10**18;\\n    uint256 private constant RATE_DIVISOR = 10**18;\\n    address private immutable DISPATCHER;\\n    address private immutable FUND_DEPLOYER;\\n    address private immutable FEE_MANAGER;\\n    address private immutable INTEGRATION_MANAGER;\\n    address private immutable PRIMITIVE_PRICE_FEED;\\n    address private immutable POLICY_MANAGER;\\n    address private immutable VALUE_INTERPRETER;\\n    address private immutable PROTOCOLFEE;\\n    address internal denominationAsset;\\n    address internal vaultProxy;\\n    bool  internal isLib;\\n\\n    // Storage\\n    // Allows a fund owner to override a release-level pause\\n    bool internal overridePause;\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\n    bool  internal permissionedVaultActionAllowed;\\n    // A mutex to protect against reentrancy\\n    bool internal reentranceLocked;\\n    // A timelock between any \\\"shares actions\\\" (i.e., buy and redeem shares), per-account\\n    uint256 internal sharesActionTimelock;\\n    mapping(address => uint256) internal acctToLastSharesAction;\\n\\n    uint256 internal feeDeposit;\\n    uint256 internal feeWithdraw;\\n    address internal daoAddress;\\n    uint256 internal buyFeeAmount;\\n    \\n    mapping(address => uint256) public investAmount;\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    modifier allowsPermissionedVaultAction() {\\n        __assertPermissionedVaultActionNotAllowed();\\n        permissionedVaultActionAllowed = true;\\n        _;\\n        permissionedVaultActionAllowed = false;\\n    }\\n\\n    modifier locksReentrance () {\\n        __assertNotReentranceLocked();\\n        reentranceLocked = true;\\n        _;\\n        reentranceLocked = false;\\n    }\\n\\n    modifier onlyActive () {\\n        __assertIsActive(vaultProxy);\\n        _;\\n    }\\n\\n    modifier onlyNotPaused () {\\n        __assertNotPaused();\\n        _;\\n    }\\n\\n    modifier onlyFundDeployer () {\\n        __assertIsFundDeployer(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner () {\\n        __assertIsOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier timelockedSharesAction(address _account) {\\n        __assertSharesActionNotTimelocked(_account);\\n        _;\\n        acctToLastSharesAction[_account] = block.timestamp;\\n    }\\n\\n    // ASSERTION HELPERS\\n\\n    // Modifiers are inefficient in terms of contract size,\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\n\\n    /// @dev Since vaultProxy is set during activate(),\\n    /// we can check that var rather than storing additional state\\n    function __assertIsActive(address _vaultProxy) private pure {\\n        require(_vaultProxy != address(0), \\\"Fund not active\\\");\\n    }\\n\\n    function __assertIsFundDeployer(address _who) private view {\\n        require(_who == FUND_DEPLOYER, \\\"Only FundDeployer callable\\\");\\n    }\\n\\n    function __assertIsOwner(address _who) private view {\\n        require(_who == IVault(vaultProxy).getOwner(), \\\"Only fund owner callable\\\");\\n    }\\n\\n    function __assertLowLevelCall(bool _success, bytes memory _returnData) private pure {\\n        require(_success, string(_returnData));\\n    }\\n\\n    function __assertNotPaused() private view {\\n        require(!__fundIsPaused(), \\\"Fund is paused\\\");\\n    }\\n\\n    function __assertNotReentranceLocked() private view {\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\n    }\\n\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\n    }\\n\\n    function __assertSharesActionNotTimelocked(address _account) private view {\\n        require(\\n            block.timestamp.sub(acctToLastSharesAction[_account]) >= sharesActionTimelock,\\n            \\\"Shares action timelocked\\\"\\n        );\\n    }\\n\\n    constructor(\\n        address _dispatcher,\\n        address _fundDeployer,\\n        address _valueInterpreter,\\n        address _feeManager,\\n        address _integrationManager,\\n        address _policyManager,\\n        address _primitivePriceFeed,\\n        address _synthetixPriceFeed,\\n        address _protocolFee,\\n        address _synthetixAddressResolver\\n    ) public AssetFinalityResolver(_synthetixPriceFeed, _synthetixAddressResolver) {\\n        DISPATCHER = _dispatcher;\\n        FEE_MANAGER = _feeManager;\\n        FUND_DEPLOYER = _fundDeployer;\\n        INTEGRATION_MANAGER = _integrationManager;\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\n        POLICY_MANAGER = _policyManager;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n        PROTOCOLFEE = _protocolFee;\\n        isLib = true;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Calls a specified action on an Extension\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\n    /// @param _callArgs The encoded data for the call\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\n    /// during calls originating from this function.\\n    function callOnExtension(\\n        address _extension,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override onlyNotPaused onlyActive locksReentrance allowsPermissionedVaultAction {\\n        require(\\n            _extension == FEE_MANAGER || _extension == INTEGRATION_MANAGER,\\n            \\\"callOnExtension: _extension invalid\\\"\\n        );\\n\\n        IExtension(_extension).receiveCallFromComptroller(msg.sender, _actionId, _callArgs);\\n    }\\n\\n    /// @notice Sets or unsets an override on a release-wide pause\\n    /// @param _nextOverridePause True if the pause should be overrode\\n    function setOverridePause(bool _nextOverridePause) external onlyOwner {\\n        require(_nextOverridePause != overridePause, \\\"setOverridePause: Value already set\\\");\\n\\n        overridePause = _nextOverridePause;\\n\\n        emit  OverridePauseSet (_nextOverridePause);\\n    }\\n\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _selector The selector to call\\n    /// @param _encodedArgs The encoded arguments for the call\\n    function vaultCallOnContract(\\n        address _contract,\\n        bytes4 _selector,\\n        bytes calldata _encodedArgs\\n    ) external onlyNotPaused onlyActive onlyOwner {\\n        require(\\n            IFundDeployer(FUND_DEPLOYER).isRegisteredVaultCall(_contract, _selector),\\n            \\\"vaultCallOnContract: Unregistered\\\"\\n        );\\n\\n        IVault(vaultProxy).callOnContract(_contract, abi.encodePacked(_selector, _encodedArgs));\\n    }\\n\\n    /// @dev Helper to check whether the release is paused, and that there is no local override\\n    function __fundIsPaused() private view returns (bool) {\\n        return\\n            IFundDeployer(FUND_DEPLOYER).getReleaseStatus() ==\\n            IFundDeployer.ReleaseStatus.Paused &&\\n            !overridePause;\\n    }\\n\\n    ////////////////////////////////\\n    // PERMISSIONED VAULT ACTIONS //\\n    ////////////////////////////////\\n\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\n    /// @param _actionData The call data for the action to perform\\n    function permissionedVaultAction(VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n        onlyNotPaused\\n        onlyActive\\n    {\\n        __assertPermissionedVaultAction(msg.sender, _action);\\n\\n        if (_action == VaultAction.AddTrackedAsset) {\\n            __vaultActionAddTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\n            __vaultActionApproveAssetSpender(_actionData);\\n        } else if (_action == VaultAction.BurnShares) {\\n            __vaultActionBurnShares(_actionData);\\n        } else if (_action == VaultAction.MintShares) {\\n            __vaultActionMintShares(_actionData);\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\n            __vaultActionRemoveTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.TransferShares) {\\n            __vaultActionTransferShares(_actionData);\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\n            __vaultActionWithdrawAssetTo(_actionData);\\n        }\\n    }\\n\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction\\n    function __assertPermissionedVaultAction(address _caller, VaultAction _action) private view {\\n        require(\\n            permissionedVaultActionAllowed,\\n            \\\"__assertPermissionedVaultAction: No action allowed\\\"\\n        );\\n\\n        if (_caller == INTEGRATION_MANAGER) {\\n            require(\\n                _action == VaultAction.ApproveAssetSpender ||\\n                    _action == VaultAction.AddTrackedAsset ||\\n                    _action == VaultAction.RemoveTrackedAsset ||\\n                    _action == VaultAction.WithdrawAssetTo,\\n                \\\"__assertPermissionedVaultAction: Not valid for IntegrationManager\\\"\\n            );\\n        } else if (_caller == FEE_MANAGER) {\\n            require(\\n                _action == VaultAction.BurnShares ||\\n                    _action == VaultAction.MintShares ||\\n                    _action == VaultAction.TransferShares,\\n                \\\"__assertPermissionedVaultAction: Not valid for FeeManager\\\"\\n            );\\n        } else {\\n            revert(\\\"__assertPermissionedVaultAction: Not a valid actor\\\");\\n        }\\n    }\\n\\n    /// @dev Helper to add a tracked asset to the fund\\n    function __vaultActionAddTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n        IVault(vaultProxy).addTrackedAsset(asset);\\n    }\\n\\n    /// @dev Helper to grant a spender an allowance for a fund's asset\\n    function __vaultActionApproveAssetSpender(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).approveAssetSpender(asset, target, amount);\\n    }\\n\\n    /// @dev Helper to burn fund shares for a particular account\\n    function __vaultActionBurnShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).burnShares(target, amount);\\n    }\\n\\n    /// @dev Helper to mint fund shares to a particular account\\n    function __vaultActionMintShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).mintShares(target, amount);\\n    }\\n\\n    /// @dev Helper to remove a tracked asset from the fund\\n    function __vaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n\\n        // Allowing this to fail silently makes it cheaper and simpler\\n        // for Extensions to not query for the denomination asset\\n        if (asset != denominationAsset) {\\n            IVault(vaultProxy).removeTrackedAsset(asset);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer fund shares from one account to another\\n    function __vaultActionTransferShares(bytes memory _actionData) private {\\n        (address from, address to, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).transferShares(from, to, amount);\\n    }\\n\\n    /// @dev Helper to withdraw an asset from the VaultProxy to a given account\\n    function __vaultActionWithdrawAssetTo(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).withdrawAssetTo(asset, target, amount);\\n    }\\n\\n    ///////////////\\n    // LIFECYCLE //\\n    ///////////////\\n\\n    /// @notice Initializes a fund with its core config\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\n    /// (buying or selling shares) by the same user\\n    /// @dev Pseudo-constructor per proxy.\\n    /// No need to assert access because this is called atomically on deployment,\\n    /// and once it's called, it cannot be called again.\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\n        require(denominationAsset == address(0), \\\"init: Already initialized\\\");\\n        require(\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_denominationAsset),\\n            \\\"init: Bad denomination asset\\\"\\n        );\\n\\n        denominationAsset = _denominationAsset;\\n        sharesActionTimelock = _sharesActionTimelock;\\n    }\\n\\n    /// @notice Configure the extensions of a fund\\n    /// @param _feeManagerConfigData Encoded config for fees to enable\\n    /// @param _policyManagerConfigData Encoded config for policies to enable\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Called atomically with init(), but after ComptrollerLib has been deployed,\\n    /// giving access to its state and interface\\n    function configureExtensions(\\n        bytes calldata _feeManagerConfigData,\\n        bytes calldata _policyManagerConfigData\\n    ) external override onlyFundDeployer {\\n        if (_feeManagerConfigData.length > 0) {\\n            IExtension(FEE_MANAGER).setConfigForFund(_feeManagerConfigData);\\n        }\\n        if (_policyManagerConfigData.length > 0) {\\n            IExtension(POLICY_MANAGER).setConfigForFund(_policyManagerConfigData);\\n        }\\n    }\\n\\n    /// @notice Activates the fund by attaching a VaultProxy and activating all Extensions\\n    /// @param _vaultProxy The VaultProxy to attach to the fund\\n    /// @param _isMigration True if a migrated fund is being activated\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    function activate(address _vaultProxy, bool _isMigration) external override onlyFundDeployer {\\n        vaultProxy = _vaultProxy;\\n\\n        emit VaultProxySet(_vaultProxy);\\n\\n        if (_isMigration) {\\n            // Distribute any shares in the VaultProxy to the fund owner.\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\n            // to payout fee shares owed during migration, these shares are not lost.\\n            uint256 sharesDue = ERC20(_vaultProxy).balanceOf(_vaultProxy);\\n            if (sharesDue > 0) {\\n                IVault (_vaultProxy). transferShares (\\n                    _vaultProxy,\\n                    IVault(_vaultProxy).getOwner(),\\n                    sharesDue\\n                );\\n\\n                emit MigratedSharesDuePaid(sharesDue);\\n            }\\n        }\\n\\n        // Note: a future release could consider forcing the adding of a tracked asset here,\\n        // just in case a fund is migrating from an old configuration where they are not able\\n        // to remove an asset to get under the tracked assets limit\\n        IVault(_vaultProxy).addTrackedAsset(denominationAsset);\\n\\n        // Activate extensions\\n        IExtension(FEE_MANAGER).activateForFund(_isMigration);\\n        IExtension(INTEGRATION_MANAGER).activateForFund(_isMigration);\\n        IExtension(POLICY_MANAGER).activateForFund(_isMigration);\\n    }\\n\\n    /// @notice Remove the config for a fund\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Calling onlyNotPaused here rather than in the FundDeployer allows\\n    /// the owner to potentially override the pause and rescue unpaid fees.\\n    function destruct()\\n        external\\n        override\\n        onlyFundDeployer\\n        onlyNotPaused\\n        allowsPermissionedVaultAction\\n    {\\n        // Failsafe to protect the libs against selfdestruct\\n        require(!isLib, \\\"destruct: Only delegate callable\\\");\\n\\n        // Deactivate the extensions\\n        IExtension(FEE_MANAGER).deactivateForFund();\\n        IExtension(INTEGRATION_MANAGER).deactivateForFund();\\n        IExtension(POLICY_MANAGER).deactivateForFund();\\n\\n        // Delete storage of ComptrollerProxy\\n        // There should never be ETH in the ComptrollerLib, so no need to waste gas\\n        // to get the fund owner\\n        selfdestruct(address(0));\\n    }\\n\\n    ////////////////\\n    // ACCOUNTING //\\n    ////////////////\\n\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return gav_ The fund GAV\\n    /// @return isValid_ True if the conversion rates used to derive the GAV are all valid\\n    function calcGav(bool _requireFinality) public override returns (uint256 gav_, bool isValid_) {\\n        address vaultProxyAddress = vaultProxy;\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\n        if (assets.length == 0) {\\n            return (0, true);\\n        }\\n\\n        uint256[] memory balances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            balances[i] = __finalizeIfSynthAndGetAssetBalance(\\n                vaultProxyAddress,\\n                assets[i],\\n                _requireFinality\\n            );\\n        }\\n\\n        (gav_, isValid_) = IValueInterpreter(VALUE_INTERPRETER).calcCanonicalAssetsTotalValue(\\n            assets,\\n            balances,\\n            denominationAsset\\n        );\\n\\n        return (gav_, isValid_);\\n    }\\n\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\n    /// @return isValid_ True if the conversion rates to derive the value are all valid\\n    /// @dev Does not account for any fees outstanding.\\n    function calcGrossShareValue(bool _requireFinality)\\n        external\\n        override\\n        returns ( uint256   grossShareValue_ , bool   isValid_ )\\n    {\\n        uint256 gav ;\\n        (gav, isValid_) = calcGav(_requireFinality);\\n\\n        grossShareValue_ = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxy).totalSupply(),\\n            10**uint256(ERC20(denominationAsset).decimals())\\n        );\\n\\n        return (grossShareValue_, isValid_);\\n    }\\n\\n    /// @dev Helper for calculating the gross share value\\n    function __calcGrossShareValue(\\n        uint256   _gav ,\\n        uint256 _sharesSupply,\\n        uint256 _denominationAssetUnit\\n    ) private pure returns (uint256 grossShareValue_) {\\n        if (_sharesSupply == 0) {\\n            return _denominationAssetUnit;\\n        }\\n\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\n    }\\n\\n    /// @notice Calculates the denomination balance of the fund\\n    /// @return balance_ The denomination balance\\n    function calcEachBalance(address _asset) external override returns (uint256 balance_) {\\n        address vaultProxyAddress = vaultProxy;\\n\\n        balance_ = __finalizeIfSynthAndGetAssetBalance(\\n            vaultProxyAddress,\\n            _asset,\\n            true\\n        );\\n\\n        return balance_;\\n    }\\n\\n    ///////////////////\\n    // PARTICIPATION //\\n    ///////////////////\\n\\n    // BUY SHARES\\n\\n    /// @notice Buys shares in the fund for multiple sets of criteria\\n    /// @param _buyers The accounts for which to buy shares\\n    /// @param _investmentAmounts The amounts of the fund's denomination asset\\n    /// with which to buy shares for the corresponding _buyers\\n    /// @param _minSharesQuantities The minimum quantities of shares to buy\\n    /// with the corresponding _investmentAmounts\\n    /// @return sharesReceivedAmounts_ The actual amounts of shares received\\n    /// by the corresponding _buyers\\n    /// @dev Param arrays have indexes corresponding to individual __buyShares() orders.\\n    function buyShares(\\n        address[] calldata _buyers,\\n        uint256 [] calldata _investmentAmounts ,\\n        uint256 [] calldata _minSharesQuantities\\n    )\\n        external\\n        onlyNotPaused\\n        locksReentrance\\n        allowsPermissionedVaultAction\\n        returns (uint256[] memory sharesReceivedAmounts_)\\n    {\\n        require(_buyers.length > 0, \\\"buyShares: Empty _buyers\\\");\\n        require(\\n            _buyers.length == _investmentAmounts.length &&\\n                _buyers.length == _minSharesQuantities.length,\\n            \\\"buyShares: Unequal arrays\\\"\\n        );\\n\\n        address vaultProxyCopy = vaultProxy;\\n        __assertIsActive(vaultProxyCopy);\\n        require(\\n            !IDispatcher(DISPATCHER).hasMigrationRequest(vaultProxyCopy),\\n            \\\"buyShares: Pending migration\\\"\\n        );\\n\\n        (uint256 gav, bool gavIsValid) = calcGav(true);\\n        require(gavIsValid, \\\"buyShares: Invalid GAV\\\");\\n\\n        __buySharesSetupHook(msg.sender, _investmentAmounts, gav);\\n\\n        address denominationAssetCopy = denominationAsset;\\n        uint256 sharePrice = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxyCopy).totalSupply(),\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\n        );\\n\\n        //Get DAO address and deposit fee for protocol\\n        daoAddress = ProtocolFee(PROTOCOLFEE).getDaoAddress();\\n        feeDeposit = ProtocolFee(PROTOCOLFEE).getFeeDeposit();\\n\\n        sharesReceivedAmounts_ = new uint256[](_buyers.length);\\n        for (uint256 i; i < _buyers.length; i++) {\\n            sharesReceivedAmounts_[i] = __buyShares(\\n                _buyers[i],\\n                _investmentAmounts[i],\\n                _minSharesQuantities[i],\\n                vaultProxyCopy,\\n                sharePrice,\\n                gav,\\n                denominationAssetCopy\\n            );\\n\\n            gav = gav.add(_investmentAmounts [i]);\\n        }\\n        \\n        __buySharesCompletedHook(msg.sender, sharesReceivedAmounts_, gav);\\n\\n        return sharesReceivedAmounts_;\\n    }\\n\\n    // Get invest amount\\n    function getInvestAmount(address _denominationAsset) external view returns (uint256) {\\n        return investAmount[_denominationAsset];\\n    }\\n\\n    /// @dev Helper to buy shares\\n    function __buyShares(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256   _minSharesQuantity ,\\n        address _vaultProxy,\\n        uint256 _sharePrice,\\n        uint256 _preBuySharesGav,\\n        address _denominationAsset\\n    ) private timelockedSharesAction(_buyer) returns (uint256 sharesReceived_) {\\n        require(_investmentAmount > 0, \\\"__buyShares: Empty _investmentAmount\\\");\\n\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares\\n        __preBuySharesHook(_buyer, _investmentAmount, _minSharesQuantity, _preBuySharesGav);\\n\\n        // Calculate the amount of shares to issue with the investment amount\\n        buyFeeAmount = _investmentAmount.mul(feeDeposit).div(RATE_DIVISOR);\\n        uint256 investmentAmountWithFee = _investmentAmount.sub(buyFeeAmount);\\n        uint256 sharesIssued = investmentAmountWithFee.mul(SHARES_UNIT).div(_sharePrice);\\n\\n        // Mint shares to the buyer\\n        uint256 prevBuyerShares = ERC20(_vaultProxy).balanceOf(_buyer);\\n        IVault(_vaultProxy).mintShares(_buyer, sharesIssued);\\n\\n        // Transfer the investment asset to the fund.\\n        ERC20(_denominationAsset).safeTransferFrom(msg.sender, _vaultProxy, investmentAmountWithFee);\\n        investAmount[_denominationAsset] = investAmount[_denominationAsset].add(_investmentAmount);\\n        //==== Transfer Asset amount of fees from VaultProxy to DAO Wallet\\n        if (daoAddress != address(0) && buyFeeAmount > 0) {\\n            ERC20(_denominationAsset).safeTransferFrom(msg.sender, daoAddress, buyFeeAmount);\\n        }\\n\\n        // Gives Extensions a chance to run logic after shares are issued\\n        __postBuySharesHook(_buyer, _investmentAmount, sharesIssued, _preBuySharesGav);\\n\\n        // The number of actual shares received may differ from shares issued due to\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\n        sharesReceived_ = ERC20(_vaultProxy).balanceOf(_buyer).sub(prevBuyerShares);\\n        require(\\n            sharesReceived_ >= _minSharesQuantity,\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\n        );\\n\\n        emit SharesBought(msg.sender, _buyer, _investmentAmount, sharesIssued, sharesReceived_);\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @dev Helper for Extension actions after all __buyShares() calls are made\\n    function __buySharesCompletedHook(\\n        address _caller,\\n        uint256[] memory _sharesReceivedAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions before any __buyShares() calls are made\\n    function __buySharesSetupHook(\\n        address _caller,\\n        uint256[] memory _investmentAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately prior to issuing shares.\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\n    /// the GAV value for the current policies as there is for the fees.\\n    function __preBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256   _minSharesQuantity ,\\n        uint256 _gav\\n    ) private {\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity),\\n            _gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity, _gav)\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\n    /// Same comment applies from __preBuySharesHook() above.\\n    function __postBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _sharesIssued,\\n        uint256 _preBuySharesGav\\n    ) private {\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\n            gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\n        );\\n    }\\n\\n    // REDEEM SHARES\\n\\n    /// @notice Redeem all of the sender's shares for a proportionate slice of the fund's assets\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev See __redeemShares() for further detail\\n    function redeemShares()\\n        external\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {           \\n        return\\n            __redeemShares(\\n                msg.sender,\\n                ERC20(vaultProxy).balanceOf(msg.sender),\\n                new address[](0),\\n                new address[](0)\\n            );\\n    }\\n\\n    /// @notice Redeem a specified quantity of the sender's shares for a proportionate slice of\\n    /// the fund's assets, optionally specifying additional assets and assets to skip.\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\n    /// @param _assetsToSkip Tracked assets to forfeit\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\n    /// only be exercised if a bad asset is causing redemption to fail.\\n    function redeemSharesDetailed(\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\n        return __redeemShares(msg.sender, _sharesQuantity, _additionalAssets, _assetsToSkip);\\n    }\\n\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\n    /// All input arrays are assumed to be unique.\\n    function __parseRedemptionPayoutAssets(\\n        address[] memory _trackedAssets,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) private pure returns (address[] memory payoutAssets_) {\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\n        if (_additionalAssets.length == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\n        uint256 additionalItemsCount;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\n                indexesToAdd[i] = true;\\n                additionalItemsCount++;\\n            }\\n        }\\n        if (additionalItemsCount == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\n        }\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (indexesToAdd[i]) {\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\n                payoutAssetsIndex++;\\n            }\\n        }\\n\\n        return payoutAssets_;\\n    }\\n\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\n    function __preRedeemSharesHook(address _redeemer, uint256 _sharesQuantity)\\n        private\\n        allowsPermissionedVaultAction\\n    {\\n        try\\n            IFeeManager(FEE_MANAGER).invokeHook(\\n                IFeeManager.FeeHook.PreRedeemShares,\\n                abi.encode(_redeemer, _sharesQuantity),\\n                0\\n            )\\n        {} catch ( bytes   memory   reason ) {\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesQuantity);\\n        }\\n    }\\n\\n    function __calcRedeemShares(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) \\n        private\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_, uint256[] memory assetAmountToFees_, uint256 sharesSupply_)\\n    {\\n        require(_sharesQuantity > 0, \\\"__calcRedeemShares: _sharesQuantity must be >0\\\");\\n        require(\\n            _additionalAssets.isUniqueSet(),\\n            \\\"__calcRedeemShares: _additionalAssets contains duplicates\\\"\\n        );\\n        require(_assetsToSkip.isUniqueSet(), \\\"__calcRedeemShares: _assetsToSkip contains duplicates\\\");\\n\\n        IVault vaultProxyContract = IVault(vaultProxy);\\n\\n        // Only apply the sharesActionTimelock when a migration is not pending\\n        if (!IDispatcher(DISPATCHER).hasMigrationRequest(address(vaultProxyContract))) {\\n            __assertSharesActionNotTimelocked(_redeemer);\\n            acctToLastSharesAction[_redeemer] = block.timestamp;\\n        }\\n\\n        // When a fund is paused, settling fees will be skipped\\n        if (!__fundIsPaused()) {\\n            __preRedeemSharesHook(_redeemer, _sharesQuantity);\\n        }\\n\\n        // Check the shares quantity against the user's balance after settling fees\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\n        require(\\n            _sharesQuantity <= sharesContract.balanceOf(_redeemer),\\n            \\\"__calcRedeemShares: Insufficient shares\\\"\\n        );\\n\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\n            vaultProxyContract.getTrackedAssets(),\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n        require(payoutAssets_.length > 0, \\\"__calcRedeemShares: No payout assets\\\");\\n\\n        // Calculate payout asset amounts due to redeemer\\n        feeWithdraw = ProtocolFee(PROTOCOLFEE).getFeeWithdraw();\\n        console.log(\\\"====sol:feeWithdraw::\\\", feeWithdraw);\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\n        assetAmountToFees_ = new uint256[](payoutAssets_.length);\\n        sharesSupply_ = sharesContract.totalSupply();\\n        \\n        uint256 redeemFeeAmount = _sharesQuantity.mul(feeWithdraw).div(RATE_DIVISOR);        \\n        uint256 sharesQuantityWithoutFee = _sharesQuantity.sub(redeemFeeAmount);\\n\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\n            uint256 assetBalance = __finalizeIfSynthAndGetAssetBalance(\\n                address(vaultProxyContract),\\n                payoutAssets_[i],\\n                true\\n            );\\n            require(assetBalance > 0, \\\"__calcRedeemShares: Payout amount must be greater 0\\\");\\n            \\n            payoutAmounts_[i] = assetBalance.mul(sharesQuantityWithoutFee).div(sharesSupply_);\\n            assetAmountToFees_[i] = assetBalance.mul(redeemFeeAmount).div(sharesSupply_);\\n        }\\n\\n        return (payoutAssets_, payoutAmounts_, assetAmountToFees_, sharesSupply_);\\n    }\\n\\n    /// @dev Helper to redeem shares.\\n    function __redeemShares(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    )\\n        private\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {   \\n        uint256[] memory assetAmountToFees_;\\n        uint256 sharesSupply_;\\n        (\\n            payoutAssets_, \\n            payoutAmounts_, \\n            assetAmountToFees_,\\n            sharesSupply_\\n        ) = __calcRedeemShares(\\n            _redeemer,\\n            _sharesQuantity,\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n\\n        burnAndTransfer(\\n            _redeemer, \\n            _sharesQuantity, \\n            payoutAssets_, \\n            payoutAmounts_, \\n            assetAmountToFees_, \\n            sharesSupply_, \\n            0, \\n            true\\n        );        \\n\\n        emit SharesRedeemed(_redeemer, _sharesQuantity, payoutAssets_, payoutAmounts_);\\n\\n        return (payoutAssets_, payoutAmounts_);\\n    }\\n\\n    function burnAndTransfer(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _payoutAssets, \\n        uint256[] memory _payoutAmounts, \\n        uint256[] memory _assetAmountToFees,\\n        uint256 _sharesSupply,\\n        uint256 _redeemAmountToDenom,\\n        bool _redeemType\\n    ) private {\\n        // Burn the shares.\\n        IVault vaultProxyContract = IVault(vaultProxy);      \\n        vaultProxyContract.burnShares(_redeemer, _sharesQuantity);\\n        daoAddress = ProtocolFee(PROTOCOLFEE).getDaoAddress();\\n\\n        // Transfer payout asset amounts due to redeemer\\n        for (uint256 i; i < _payoutAssets.length; i++) {\\n\\n            if (_sharesQuantity == _sharesSupply) {\\n                if (_payoutAssets[i] != denominationAsset) {\\n                    vaultProxyContract.removeTrackedAsset(_payoutAssets[i]);\\n                }\\n            }\\n\\n            // Transfer payout assets individually to a redeemer on SharesRedeemed()\\n            if (_redeemType) {\\n                if (_payoutAmounts[i] > 0) {\\n                    vaultProxyContract.withdrawAssetTo(_payoutAssets[i], _redeemer, _payoutAmounts[i]);\\n                }\\n            } \\n            // Transfer denomination Asset amount to redeemer on SharesRedeemedToDenom()\\n            else {\\n                if(_redeemAmountToDenom > 0) {\\n                    vaultProxyContract.withdrawAssetTo(denominationAsset, _redeemer, _redeemAmountToDenom);\\n                }\\n            }            \\n\\n            // Transfer fee asset amount to protocol(DAO wallet address)\\n            if (_assetAmountToFees[i] > 0 && daoAddress != address(0)) {\\n                vaultProxyContract.withdrawAssetTo(_payoutAssets[i], daoAddress, _assetAmountToFees[i]);\\n            }\\n        }   \\n    }\\n\\n    function redeemSharesToDenomDetailed(\\n        address _adapter,\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets\\n    ) external returns (uint256 redeemAmountToDenom_) {\\n        (\\n            address[] memory payoutAssets, \\n            uint256[] memory payoutAmounts, \\n            uint256[] memory assetAmountToFees,\\n            uint256 sharesSupply\\n        ) = __calcRedeemShares(msg.sender, _sharesQuantity, _additionalAssets, new address[](0));\\n\\n        // initial total denominationAsset Amount of Vault\\n        uint256 totalDenomAmountBeforeSwap = ERC20(denominationAsset).balanceOf(vaultProxy);   \\n        console.log(\\\"===sol-BeforeSwap\\\", totalDenomAmountBeforeSwap);       \\n        \\n        uint256 denomAmountBeforeSwap;\\n        for(uint256 i; i < payoutAssets.length; i++) {\\n            console.log(\\\"===sol-payoutAmounts\\\", payoutAmounts[i]);\\n            if(payoutAssets[i] == denominationAsset) {\\n                denomAmountBeforeSwap = payoutAmounts[i];        \\n            }\\n        }\\n        permissionedVaultActionAllowed = true;\\n        // Get amount(in Vault) in denomination asset from other assets excepted denomination asset            \\n        IExtension(INTEGRATION_MANAGER).actionForRedeem(\\n            _adapter,\\n            payoutAmounts,\\n            payoutAssets\\n        );\\n\\n        // denominationAsset Amount after swap on Uniswap V2\\n        uint256 totalDenomAmountAfterSwap = ERC20(denominationAsset).balanceOf(vaultProxy);\\n \\n        console.log(\\\"===sol-AfterSwap\\\", totalDenomAmountAfterSwap);     \\n        // Get denomination asset amount for transfer to redeemer\\n        redeemAmountToDenom_ = totalDenomAmountAfterSwap.sub(totalDenomAmountBeforeSwap).add(denomAmountBeforeSwap);\\n\\n        console.log(\\\"===sol-redeemAmount\\\", redeemAmountToDenom_); \\n        if (redeemAmountToDenom_ > 0) {\\n            burnAndTransfer(\\n                msg.sender, \\n                _sharesQuantity, \\n                payoutAssets, \\n                payoutAmounts, \\n                assetAmountToFees, \\n                sharesSupply, \\n                redeemAmountToDenom_, \\n                false\\n            );   \\n        }\\n\\n        emit SharesRedeemedToDenom(msg.sender, _sharesQuantity, denominationAsset, redeemAmountToDenom_); \\n\\n        return redeemAmountToDenom_;\\n    }\\n\\n    /// @notice Redeem all of the sender's shares in the denominationAsset\\n    // function redeemSharesToDenom(address adapter) \\n    //     external \\n    //     allowsPermissionedVaultAction\\n    //     returns (uint256 redeemAmountToDenom_)\\n    // {           \\n    //     uint256 sharesQuantity = ERC20(vaultProxy).balanceOf(msg.sender);\\n        \\n    //     console.log(\\\"===sol-sharesQuantity\\\", sharesQuantity);\\n    //     (\\n    //         address[] memory payoutAssets, \\n    //         uint256[] memory payoutAmounts, \\n    //         uint256[] memory assetAmountToFees,\\n    //         uint256 sharesSupply\\n    //     ) = __calcRedeemShares(msg.sender, sharesQuantity, new address[](0), new address[](0));\\n\\n    //     // initial total denominationAsset Amount of Vault\\n    //     uint256 totalDenomAmountBeforeSwap = ERC20(denominationAsset).balanceOf(vaultProxy);        \\n    //     uint256 denomAmountBeforeSwap;\\n    //     for(uint256 i; i < payoutAssets.length; i++) {\\n    //         if(payoutAssets[i] == denominationAsset) {\\n    //             denomAmountBeforeSwap = payoutAmounts[i];\\n    //         }\\n    //     }\\n    //     // Get amount(in Vault) in denomination asset from other assets excepted denomination asset            \\n    //     IExtension(INTEGRATION_MANAGER).actionForRedeem(\\n    //         adapter,\\n    //         payoutAmounts,\\n    //         payoutAssets\\n    //     );\\n\\n    //     // denominationAsset Amount after swap on Uniswap V2\\n    //     uint256 totalDenomAmountAfterSwap = ERC20(denominationAsset).balanceOf(vaultProxy);\\n\\n    //     // Get denomination asset amount for transfer to redeemer\\n    //     if(totalDenomAmountAfterSwap > totalDenomAmountBeforeSwap) {\\n    //         redeemAmountToDenom_ = totalDenomAmountAfterSwap.sub(totalDenomAmountBeforeSwap).add(denomAmountBeforeSwap);\\n    //     } else {\\n    //         redeemAmountToDenom_ = denomAmountBeforeSwap;\\n    //     }        \\n\\n    //     if (redeemAmountToDenom_ > 0) {\\n    //         burnAndTransfer(\\n    //             msg.sender, \\n    //             sharesQuantity, \\n    //             payoutAssets, \\n    //             payoutAmounts, \\n    //             assetAmountToFees, \\n    //             sharesSupply, \\n    //             redeemAmountToDenom_, \\n    //             false\\n    //         );   \\n    //     }\\n\\n    //     emit SharesRedeemedToDenom(msg.sender, sharesQuantity, denominationAsset, redeemAmountToDenom_); \\n\\n    //     return redeemAmountToDenom_;\\n    // }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `denominationAsset` variable\\n    function getDenominationAsset() external view override returns (address denominationAsset_) {\\n        return denominationAsset;\\n    }\\n\\n    /// @notice Gets the routes for the various contracts used by all funds\\n    function getLibRoutes()\\n        external\\n        view\\n        returns (\\n            address dispatcher_,\\n            address feeManager_,\\n            address fundDeployer_,\\n            address integrationManager_,\\n            address policyManager_,\\n            address primitivePriceFeed_,\\n            address valueInterpreter_\\n        )\\n    {\\n        return (\\n            DISPATCHER,\\n            FEE_MANAGER,\\n            FUND_DEPLOYER,\\n            INTEGRATION_MANAGER,\\n            POLICY_MANAGER,\\n            PRIMITIVE_PRICE_FEED,\\n            VALUE_INTERPRETER\\n        );\\n    }\\n\\n    /// @notice Gets the `overridePause` variable\\n    function getOverridePause () external   view   returns ( bool   overridePause_ ) {\\n        return overridePause;\\n    }\\n\\n    /// @notice Gets the `sharesActionTimelock` variable\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_) {\\n        return sharesActionTimelock;\\n    }\\n\\n    /// @notice Gets the `vaultProxy` variable\\n    function getVaultProxy() external view override returns (address vaultProxy_) {\\n        return vaultProxy;\\n    }\\n}\",\"keccak256\":\"0x839bc69f974c4068bcbf642f8022ae92c374635244be3214ff78706587726047\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IComptroller Interface\\r\\ninterface IComptroller {\\r\\n    enum VaultAction {\\r\\n        None,\\r\\n        BurnShares,\\r\\n        MintShares,\\r\\n        TransferShares,\\r\\n        ApproveAssetSpender,\\r\\n        WithdrawAssetTo,\\r\\n        AddTrackedAsset,\\r\\n        RemoveTrackedAsset\\r\\n    }\\r\\n\\r\\n    function activate(address, bool) external;\\r\\n\\r\\n    function calcGav(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcEachBalance(address) external returns (uint256);\\r\\n\\r\\n    function callOnExtension(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n\\r\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\r\\n\\r\\n    function destruct() external;\\r\\n\\r\\n    function getDenominationAsset() external view returns (address);\\r\\n\\r\\n    function getVaultProxy() external view returns (address);\\r\\n\\r\\n    function init(address, uint256) external;\\r\\n\\r\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf459c78b60229a3c473b090bb004d2e779a63e55fa8271481310f24579e72da1\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\r\\n\\r\\n/// @title IVault Interface\\r\\ninterface IVault is IMigratableVault {\\r\\n    function addTrackedAsset(address) external;\\r\\n\\r\\n    function approveAssetSpender(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function burnShares(address, uint256) external;\\r\\n\\r\\n    function callOnContract(address, bytes calldata) external;\\r\\n\\r\\n    function getAccessor() external view returns (address);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getTrackedAssets() external view returns (address[] memory);\\r\\n\\r\\n    function isTrackedAsset(address) external view returns (bool);\\r\\n\\r\\n    function mintShares(address, uint256) external;\\r\\n\\r\\n    function removeTrackedAsset(address) external;\\r\\n\\r\\n    function transferShares(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAssetTo(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x71ab5261c400b379333dcba9de5dcd9deb63296879f047874adcf74f29c00f20\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _comptrollerProxy,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(bytes calldata _configData) external;\\n\\n    function actionForRedeem(\\n        address,\\n        uint256[] memory, \\n        address[] memory\\n    ) external;\\n}\\n\",\"keccak256\":\"0x96be69e863c41d8a9a59f43e76c3ad2d2d163a15791d68f39419529316a66a8d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\nimport \\\"../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../utils/ExtensionBase.sol\\\";\\nimport \\\"../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\nimport \\\"./IFee.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"../../core/fund/comptroller/ComptrollerLib.sol\\\";\\nimport \\\"./fees/ProtocolFee.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title FeeManager Contract\\n/// @notice Manages fees for funds\\ncontract FeeManager is\\n    IFeeManager,\\n    ExtensionBase,\\n    FundDeployerOwnerMixin,\\n    PermissionedVaultActionMixin\\n{\\n    using AddressArrayLib for address[];\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    event AllSharesOutstandingForcePaidForFund(\\n        address indexed comptrollerProxy,\\n        address payee,\\n        uint256 sharesDue\\n    );\\n\\n    event FeeDeregistered(address indexed fee, string indexed identifier);\\n\\n    event FeeEnabledForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        bytes settingsData\\n    );\\n\\n    event FeeRegistered(\\n        address indexed fee,\\n        string indexed identifier,\\n        FeeHook[] implementedHooksForSettle,\\n        FeeHook[] implementedHooksForUpdate,\\n        bool usesGavOnSettle,\\n        bool usesGavOnUpdate\\n    );\\n\\n    event FeeSettledForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        SettlementType indexed settlementType,\\n        address payer,\\n        address payee,\\n        uint256 sharesDue\\n    );\\n\\n    event SharesOutstandingPaidForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        uint256 sharesDue\\n    );\\n\\n    event FeesRecipientSetForFund(\\n        address indexed comptrollerProxy,\\n        address prevFeesRecipient,\\n        address nextFeesRecipient\\n    );\\n\\n    EnumerableSet.AddressSet private registeredFees;\\n    mapping(address => bool) private feeToUsesGavOnSettle;\\n    mapping(address => bool) private feeToUsesGavOnUpdate;\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsSettle;\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsUpdate;\\n\\n    mapping(address => address[]) private comptrollerProxyToFees;\\n    mapping(address => mapping(address => uint256)) private comptrollerProxyToFeeToSharesOutstanding;\\n    \\n    address private immutable PROTOCOLFEE;\\n    uint256 internal feePerform;\\n    address internal daoAddress;\\n    uint256 private constant RATE_DIVISOR = 10**18;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _protocolFee\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\n        PROTOCOLFEE = _protocolFee;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Activate already-configured fees for use in the calling fund\\n    function activateForFund(bool) external override {\\n        address vaultProxy = __setValidatedVaultProxy(msg.sender);\\n\\n        address[] memory enabledFees = comptrollerProxyToFees[msg.sender];\\n        for (uint256 i; i < enabledFees.length; i++) {\\n            IFee(enabledFees[i]).activateForFund(msg.sender, vaultProxy);\\n        }\\n    }\\n\\n    /// @notice Deactivate fees for a fund\\n    /// @dev msg.sender is validated during __invokeHook()\\n    function deactivateForFund() external override {\\n        // Settle continuous fees one last time, but without calling Fee.update()\\n        __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, false);\\n\\n        // Force payout of remaining shares outstanding\\n        __forcePayoutAllSharesOutstanding(msg.sender);\\n\\n        // Clean up storage\\n        __deleteFundStorage(msg.sender);\\n    }\\n\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\n    /// @param _actionId An ID representing the desired action\\n    /// @param _callArgs Encoded arguments specific to the _actionId\\n    /// @dev This is the only way to call a function on this contract that updates VaultProxy state.\\n    /// For both of these actions, any caller is allowed, so we don't use the caller param.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override {\\n        if (_actionId == 0) {\\n            // Settle and update all continuous fees\\n            __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, true);\\n        } else if (_actionId == 1) {\\n            __payoutSharesOutstandingForFees(msg.sender, _callArgs);\\n        } else {\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\n        }\\n    }\\n\\n    /// @notice Enable and configure fees for use in the calling fund\\n    /// @param _configData Encoded config data\\n    /// @dev Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.\\n    /// The order of `fees` determines the order in which fees of the same FeeHook will be applied.\\n    /// It is recommended to run ManagementFee before PerformanceFee in order to achieve precise\\n    /// PerformanceFee calcs.\\n    function setConfigForFund(bytes calldata _configData) external override {\\n        (address[] memory fees, bytes[] memory settingsData) = abi.decode(\\n            _configData,\\n            (address[], bytes[])\\n        );\\n\\n        // Sanity checks\\n        require(\\n            fees.length == settingsData.length,\\n            \\\"setConfigForFund: fees and settingsData array lengths unequal\\\"\\n        );\\n        require(fees.isUniqueSet(), \\\"setConfigForFund: fees cannot include duplicates\\\");\\n\\n        // Enable each fee with settings\\n        for (uint256 i; i < fees.length; i++) {\\n            require(isRegisteredFee(fees[i]), \\\"setConfigForFund: Fee is not registered\\\");\\n\\n            // Set fund config on fee\\n            IFee(fees[i]).addFundSettings(msg.sender, settingsData[i]);\\n\\n            // Enable fee for fund\\n            comptrollerProxyToFees[msg.sender].push(fees[i]);\\n\\n            emit FeeEnabledForFund(msg.sender, fees[i], settingsData[i]);\\n        }\\n    }\\n\\n    /// @notice Allows all fees for a particular FeeHook to implement settle() and update() logic\\n    /// @param _hook The FeeHook to invoke\\n    /// @param _settlementData The encoded settlement parameters specific to the FeeHook\\n    /// @param _gav The GAV for a fund if known in the invocating code, otherwise 0\\n    function invokeHook(\\n        FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external override {\\n        __invokeHook(msg.sender, _hook, _settlementData, _gav, true);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to destroy local storage to get gas refund,\\n    /// and to prevent further calls to fee manager\\n    function __deleteFundStorage(address _comptrollerProxy) private {\\n        delete comptrollerProxyToFees[_comptrollerProxy];\\n        delete comptrollerProxyToVaultProxy[_comptrollerProxy];\\n    }\\n\\n    /// @dev Helper to force the payout of shares outstanding across all fees.\\n    /// For the current release, all shares in the VaultProxy are assumed to be\\n    /// shares outstanding from fees. If not, then they were sent there by mistake\\n    /// and are otherwise unrecoverable. We can therefore take the VaultProxy's\\n    /// shares balance as the totalSharesOutstanding to payout to the fund owner.\\n    function __forcePayoutAllSharesOutstanding(address _comptrollerProxy) private {\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\n\\n        uint256 totalSharesOutstanding = ERC20(vaultProxy).balanceOf(vaultProxy);\\n        if (totalSharesOutstanding == 0) {\\n            return;\\n        }\\n\\n        // Destroy any shares outstanding storage\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\n        for (uint256 i; i < fees.length; i++) {\\n            delete comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\n        }\\n\\n        // Distribute all shares outstanding to the fees recipient\\n        address payee = IVault(vaultProxy).getOwner();\\n        __transferShares(_comptrollerProxy, vaultProxy, payee, totalSharesOutstanding);\\n\\n        emit AllSharesOutstandingForcePaidForFund(\\n            _comptrollerProxy,\\n            payee,\\n            totalSharesOutstanding\\n        );\\n    }\\n\\n    /// @dev Helper to get the canonical value of GAV if not yet set and required by fee\\n    function __getGavAsNecessary(\\n        address _comptrollerProxy,\\n        address _fee,\\n        uint256 _gavOrZero\\n    ) private returns (uint256 gav_) {\\n        if (_gavOrZero == 0 && feeUsesGavOnUpdate(_fee)) {\\n            // Assumes that any fee that requires GAV would need to revert if invalid or not final\\n            bool gavIsValid;\\n            (gav_, gavIsValid) = IComptroller(_comptrollerProxy).calcGav(true);\\n            require(gavIsValid, \\\"__getGavAsNecessary: Invalid GAV\\\");\\n        } else {\\n            gav_ = _gavOrZero;\\n        }\\n\\n        return gav_;\\n    }\\n\\n    /// @dev Helper to run settle() on all enabled fees for a fund that implement a given hook, and then to\\n    /// optionally run update() on the same fees. This order allows fees an opportunity to update\\n    /// their local state after all VaultProxy state transitions (i.e., minting, burning,\\n    /// transferring shares) have finished. To optimize for the expensive operation of calculating\\n    /// GAV, once one fee requires GAV, we recycle that `gav` value for subsequent fees.\\n    /// Assumes that _gav is either 0 or has already been validated.\\n    /// __invokeHook(msg.sender, _hook, _settlementData, _gav, true);\\n    function __invokeHook(\\n        address _comptrollerProxy,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero,\\n        bool _updateFees\\n    ) private {\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\n        if (fees.length == 0) {\\n            return;\\n        }\\n\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\n\\n        // This check isn't strictly necessary, but its cost is insignificant,\\n        // and helps to preserve data integrity.\\n        require(vaultProxy != address(0), \\\"__invokeHook: Fund is not active\\\");\\n\\n        // First, allow all fees to implement settle()\\n        uint256 gav = __settleFees(\\n            _comptrollerProxy,\\n            vaultProxy,\\n            fees,\\n            _hook,\\n            _settlementData,\\n            _gavOrZero\\n        );\\n\\n        // Second, allow fees to implement update()\\n        // This function does not allow any further altering of VaultProxy state\\n        // (i.e., burning, minting, or transferring shares)\\n        if (_updateFees) {\\n            __updateFees(_comptrollerProxy, vaultProxy, fees, _hook, _settlementData, gav);\\n        }\\n    }\\n\\n    /// @dev Helper to compare two strings\\n    function compareStringsbyBytes(string memory s1, string memory s2) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\n    }\\n    /// @dev Helper to payout the shares outstanding for the specified fees.\\n    /// Does not call settle() on fees.\\n    /// Only callable via ComptrollerProxy.callOnExtension().\\n    function __payoutSharesOutstandingForFees(address _comptrollerProxy, bytes memory _callArgs)\\n        private\\n    {\\n        address[] memory fees = abi.decode(_callArgs, (address[]));\\n        address vaultProxy = getVaultProxyForFund(msg.sender);\\n\\n        // Get DAO address, Performance fee for Protocol   \\n        daoAddress = ProtocolFee(PROTOCOLFEE).getDaoAddress();\\n        feePerform = ProtocolFee(PROTOCOLFEE).getFeePerform();\\n        \\n        uint256 sharesOutstandingDue;\\n        uint256 sharesOutstandingToProtocol;\\n        for (uint256 i; i < fees.length; i++) {\\n            if (!IFee(fees[i]).payout(_comptrollerProxy, vaultProxy)) {\\n                continue;\\n            }\\n\\n            uint256 sharesOutstandingForFee = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\n            \\n            if (sharesOutstandingForFee == 0) {\\n                continue;\\n            }\\n\\n            uint256 feeShares;\\n            // streamingFee if fee is streamingFee\\n            if (compareStringsbyBytes(IFee(fees[i]).identifier(), \\\"STREAMING\\\")) {\\n                feeShares = sharesOutstandingForFee;            \\n                sharesOutstandingForFee = sharesOutstandingForFee.sub(feeShares);    \\n            }\\n\\n            // Adjust 8% shares of performanceFeeHWM if fee is performanceFeeHWM\\n            if (compareStringsbyBytes(IFee(fees[i]).identifier(), \\\"PERFORMANCE\\\")) {\\n                feeShares = sharesOutstandingForFee.mul(feePerform).div(RATE_DIVISOR);\\n                sharesOutstandingForFee = sharesOutstandingForFee.sub(feeShares);\\n            }  \\n\\n            // Adjust 8% shares of performanceFeeHurdle if fee is performanceFeeHurdle\\n            if (compareStringsbyBytes(IFee(fees[i]).identifier(), \\\"PERFORMANCE_HURDLE\\\")) {\\n                feeShares = sharesOutstandingForFee.mul(feePerform).div(RATE_DIVISOR);\\n                sharesOutstandingForFee = sharesOutstandingForFee.sub(feeShares);\\n            }          \\n            \\n            sharesOutstandingDue = sharesOutstandingDue.add(sharesOutstandingForFee);\\n            sharesOutstandingToProtocol = sharesOutstandingToProtocol.add(feeShares);\\n\\n            // Delete shares outstanding and distribute from VaultProxy to the fees recipient\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]] = 0;\\n\\n            emit SharesOutstandingPaidForFund(_comptrollerProxy, fees[i], sharesOutstandingForFee);\\n        }\\n\\n        if (sharesOutstandingDue > 0) {\\n            __transferShares(\\n                _comptrollerProxy,\\n                vaultProxy,\\n                IVault(vaultProxy).getOwner(),\\n                sharesOutstandingDue\\n            );\\n        }\\n        //==== Transfer Shares of fees from VaultProxy to DAO Wallet \\n        if (sharesOutstandingToProtocol > 0 && daoAddress != address(0)) {\\n            __transferShares(\\n                _comptrollerProxy,\\n                vaultProxy,\\n                daoAddress,\\n                sharesOutstandingToProtocol\\n            );\\n        }\\n    }\\n\\n    /// @dev Helper to settle a fee\\n    function __settleFee(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _fee,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gav\\n    ) private {\\n\\n        (SettlementType settlementType, address payer, uint256 sharesDue) = IFee(_fee).settle(\\n            _comptrollerProxy,\\n            _vaultProxy,\\n            _hook,\\n            _settlementData,\\n            _gav\\n        );\\n        if (settlementType == SettlementType.None) {\\n            return;\\n        }\\n        \\n        address payee;\\n        if (settlementType == SettlementType.Direct) {\\n            payee = IVault(_vaultProxy).getOwner();\\n            __transferShares(_comptrollerProxy, payer, payee, sharesDue);\\n        } else if (settlementType == SettlementType.Mint) {\\n            payee = IVault(_vaultProxy).getOwner();\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\n        } else if (settlementType == SettlementType.Burn) {\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\n        } else if (settlementType == SettlementType.MintSharesOutstanding) {\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][\\n                _fee\\n            ] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee].add(sharesDue);\\n\\n            payee = _vaultProxy;\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\n        } else if (settlementType == SettlementType.BurnSharesOutstanding) {\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][\\n                _fee\\n            ] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee].sub(sharesDue);\\n\\n            payer = _vaultProxy;\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\n        } \\n        else {\\n            revert(\\\"__settleFee: Invalid SettlementType\\\");\\n        }\\n\\n        emit FeeSettledForFund(_comptrollerProxy, _fee, settlementType, payer, payee, sharesDue);\\n    }\\n\\n    /// @dev Helper to settle fees that implement a given fee hook\\n    function __settleFees(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address[] memory _fees,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero\\n    ) private returns (uint256 gav_) {\\n        gav_ = _gavOrZero;\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            if (!feeSettlesOnHook(_fees[i], _hook)) {\\n                continue;\\n            }\\n\\n            gav_ = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav_);\\n\\n            __settleFee(_comptrollerProxy, _vaultProxy, _fees[i], _hook, _settlementData, gav_);\\n        }\\n\\n        return gav_;\\n    }\\n\\n    /// @dev Helper to update fees that implement a given fee hook\\n    function __updateFees(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address[] memory _fees,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero\\n    ) private {\\n        uint256 gav = _gavOrZero;\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            if (!feeUpdatesOnHook(_fees[i], _hook)) {\\n                continue;\\n            }\\n\\n            gav = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav);\\n            \\n            IFee(_fees[i]).update(_comptrollerProxy, _vaultProxy, _hook, _settlementData, gav);\\n        }\\n    }\\n\\n    ///////////////////\\n    // FEES REGISTRY //\\n    ///////////////////\\n\\n    /// @notice Remove fees from the list of registered fees\\n    /// @param _fees Addresses of fees to be deregistered\\n    function deregisterFees(address[] calldata _fees) external onlyFundDeployerOwner {\\n        require(_fees.length > 0, \\\"deregisterFees: _fees cannot be empty\\\");\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            require(isRegisteredFee(_fees[i]), \\\"deregisterFees: fee is not registered\\\");\\n\\n            registeredFees.remove(_fees[i]);\\n\\n            emit FeeDeregistered(_fees[i], IFee(_fees[i]).identifier());\\n        }\\n    }\\n\\n    /// @notice Add fees to the list of registered fees\\n    /// @param _fees Addresses of fees to be registered\\n    /// @dev Stores the hooks that a fee implements and whether each implementation uses GAV,\\n    /// which fronts the gas for calls to check if a hook is implemented, and guarantees\\n    /// that these hook implementation return values do not change post-registration.\\n    function registerFees(address[] calldata _fees) external onlyFundDeployerOwner {\\n        require(_fees.length > 0, \\\"registerFees: _fees cannot be empty\\\");\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            require(!isRegisteredFee(_fees[i]), \\\"registerFees: fee already registered\\\");\\n\\n            registeredFees.add(_fees[i]);\\n\\n            IFee feeContract = IFee(_fees[i]);\\n            (\\n                FeeHook[] memory implementedHooksForSettle,\\n                FeeHook[] memory implementedHooksForUpdate,\\n                bool usesGavOnSettle,\\n                bool usesGavOnUpdate\\n            ) = feeContract.implementedHooks();\\n\\n            // Stores the hooks for which each fee implements settle() and update()\\n            for (uint256 j; j < implementedHooksForSettle.length; j++) {\\n                feeToHookToImplementsSettle[_fees[i]][implementedHooksForSettle[j]] = true;\\n            }\\n            for (uint256 j; j < implementedHooksForUpdate.length; j++) {\\n                feeToHookToImplementsUpdate[_fees[i]][implementedHooksForUpdate[j]] = true;\\n            }\\n\\n            // Stores whether each fee requires GAV during its implementations for settle() and update()\\n            if (usesGavOnSettle) {\\n                feeToUsesGavOnSettle[_fees[i]] = true;\\n            }\\n            if (usesGavOnUpdate) {\\n                feeToUsesGavOnUpdate[_fees[i]] = true;\\n            }\\n\\n            emit FeeRegistered(\\n                _fees[i],\\n                feeContract.identifier(),\\n                implementedHooksForSettle,\\n                implementedHooksForUpdate,\\n                usesGavOnSettle,\\n                usesGavOnUpdate\\n            );\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Get a list of enabled fees for a given fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return enabledFees_ An array of enabled fee addresses\\n    function getEnabledFeesForFund(address _comptrollerProxy)\\n        external\\n        view\\n        returns (address[] memory enabledFees_)\\n    {\\n        return comptrollerProxyToFees[_comptrollerProxy];\\n    }\\n\\n    /// @notice Get the amount of shares outstanding for a particular fee for a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _fee The fee address\\n    /// @return sharesOutstanding_ The amount of shares outstanding\\n    function getFeeSharesOutstandingForFund(address _comptrollerProxy, address _fee)\\n        external\\n        view\\n        returns (uint256 sharesOutstanding_)\\n    {\\n        return comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee];\\n    }\\n\\n    /// @notice Get all registered fees\\n    /// @return registeredFees_ A list of all registered fee addresses\\n    function getRegisteredFees() external view returns (address[] memory registeredFees_) {\\n        registeredFees_ = new address[](registeredFees.length());\\n        for (uint256 i; i < registeredFees_.length; i++) {\\n            registeredFees_[i] = registeredFees.at(i);\\n        }\\n\\n        return registeredFees_;\\n    }\\n\\n    /// @notice Checks if a fee implements settle() on a particular hook\\n    /// @param _fee The address of the fee to check\\n    /// @param _hook The FeeHook to check\\n    /// @return settlesOnHook_ True if the fee settles on the given hook\\n    function feeSettlesOnHook(address _fee, FeeHook _hook)\\n        public\\n        view\\n        returns (bool settlesOnHook_)\\n    {\\n        return feeToHookToImplementsSettle[_fee][_hook];\\n    }\\n\\n    /// @notice Checks if a fee implements update() on a particular hook\\n    /// @param _fee The address of the fee to check\\n    /// @param _hook The FeeHook to check\\n    /// @return updatesOnHook_ True if the fee updates on the given hook\\n    function feeUpdatesOnHook(address _fee, FeeHook _hook)\\n        public\\n        view\\n        returns (bool updatesOnHook_)\\n    {\\n        return feeToHookToImplementsUpdate[_fee][_hook];\\n    }\\n\\n    /// @notice Checks if a fee uses GAV in its settle() implementation\\n    /// @param _fee The address of the fee to check\\n    /// @return usesGav_ True if the fee uses GAV during settle() implementation\\n    function feeUsesGavOnSettle(address _fee) public view returns (bool usesGav_) {\\n        return feeToUsesGavOnSettle[_fee];\\n    }\\n\\n    /// @notice Checks if a fee uses GAV in its update() implementation\\n    /// @param _fee The address of the fee to check\\n    /// @return usesGav_ True if the fee uses GAV during update() implementation\\n    function feeUsesGavOnUpdate(address _fee) public view returns (bool usesGav_) {\\n        return feeToUsesGavOnUpdate[_fee];\\n    }\\n\\n    /// @notice Check whether a fee is registered\\n    /// @param _fee The address of the fee to check\\n    /// @return isRegisteredFee_ True if the fee is registered\\n    function isRegisteredFee(address _fee) public view returns (bool isRegisteredFee_) {\\n        return registeredFees.contains(_fee);\\n    }\\n}\\n\",\"keccak256\":\"0x2968aa2a3dc0357d7dbe259f5ae0ab55c5f7949d1f7b12848dbcd5b1ce7586b4\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title Fee Interface\\n/// @notice Interface for all fees\\ninterface IFee {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\n\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function implementedHooks()\\n        external\\n        view\\n        returns (\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\n            bool usesGavOnSettle_,\\n            bool usesGavOnUpdate_\\n        );\\n\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\n        external\\n        returns (bool isPayable_);\\n\\n    function settle(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    )\\n        external\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        );\\n\\n    function update(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0xe6eeb30d394162285daf34d9a4c8a4c924b4469b3acb418894d7a1ddb579d971\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {\\n        Continuous,\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreRedeemShares\\n    }\\n    enum SettlementType {\\n        None,\\n        Direct,\\n        Mint,\\n        Burn,\\n        MintSharesOutstanding,\\n        BurnSharesOutstanding\\n    }\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8712f78ae58ce69ce17429bb1e8ca670cbf938fb16cccd83ab68deb53233d21a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/ProtocolFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"./ProtocolFee.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ProtocolFee {    \\n    using SafeMath for uint256;\\n\\n    event FeeSettingsAdded(address indexed daoAddress, uint256 feeDeposit, uint256 feeWithdraw, uint256 feePerform, uint256 feeStream);\\n\\n    address internal daoAddress;\\n    uint256 internal feeDeposit; \\n    uint256 internal feeWithdraw; \\n    uint256 internal feePerform; \\n    uint256 internal feeStream;    \\n    address private immutable DISPATCHER;    \\n\\n    modifier onlyDispatcherOwner() {\\n        address owner = IDispatcher(DISPATCHER).getOwner();\\n        address denomOwner = IDispatcher(DISPATCHER).getNominatedOwner();\\n        require(msg.sender == owner || msg.sender == denomOwner, \\\"Only owner callable\\\");\\n        _;\\n    }\\n\\n    constructor(address _dispatcher) public {        \\n        DISPATCHER = _dispatcher;\\n    }\\n\\n    /// @notice Add the initial fee settings for Protocol\\n    /// @param _settingsData Encoded settings to apply to the policy for the fund\\n    /// @dev `feeDeposit`, `feeWithdraw`, `feeStream` and `feePerform` are set\\n    function addFeeSettings(bytes calldata _settingsData)\\n        external\\n        onlyDispatcherOwner\\n    {\\n        (\\n            uint256 feeDeposit_, //0.2%\\n            uint256 feeWithdraw_,//0.5% \\n            uint256 feePerform_, //8%\\n            uint256 feeStream_   //0.5%\\n        ) = abi.decode(_settingsData, (uint256, uint256, uint256, uint256));\\n\\n        require(feeDeposit_ > 0, \\\"addFeeSettings: feeDeposit must be greater than 0\\\");\\n        require(feeWithdraw_ > 0, \\\"addFeeSettings: feeWithdraw must be greater than 0\\\");\\n        require(feePerform_ > 0, \\\"addFeeSettings: feePerform must be greater than 0\\\");\\n        require(feeStream_ > 0, \\\"addFeeSettings: feeStream must be greater than 0\\\");\\n        \\n        feeDeposit = feeDeposit_;\\n        feeWithdraw = feeWithdraw_;\\n        feePerform = feePerform_;\\n        feeStream = feeStream_;\\n        daoAddress = IDispatcher(DISPATCHER).getOwner();\\n        \\n        emit FeeSettingsAdded(daoAddress, feeDeposit_, feeWithdraw_, feePerform_, feeStream_);\\n    }\\n\\n    /// @notice Sets the new daoAddress\\n    /// @param _daoAddress The address to set as the new owner\\n    function setDAOAddress(address _daoAddress) public onlyDispatcherOwner {\\n        require(_daoAddress != address(0), \\\"setDAOAddress: daoAddress must not be empty\\\");\\n        require(_daoAddress != daoAddress, \\\"setDAOAddress: daoAddress must not be pre address\\\");\\n        daoAddress = _daoAddress;\\n    }\\n\\n    /// @notice Get Deposit fee for Protocol\\n    function getFeeDeposit() external view returns (uint256) {\\n        return feeDeposit;\\n    }\\n\\n    /// @notice Get Withdraw fee for Protocol\\n    function getFeeWithdraw() external view returns (uint256) {\\n        return feeWithdraw;\\n    }\\n\\n    /// @notice Get protocol fee of PerformanceFee\\n    function getFeePerform() public view returns (uint256 feePerform_) {\\n        return feePerform;\\n    }\\n\\n    /// @notice Get Streaming fee for Protocol\\n    function getFeeStream() external view returns (uint256) {\\n        return feeStream;\\n    }\\n\\n    /// @notice Get Owner for DAO Protocol\\n    function getDaoAddress() external view returns (address daoAddress_) {\\n        return daoAddress;\\n    }\\n\\n}\",\"keccak256\":\"0x3a50e45e2a005f72841e6753c9035c8192702861811a26423d631d8e063a2462\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title PolicyManager Interface\\r\\n/// @notice Interface for the PolicyManager\\r\\ninterface IPolicyManager {\\r\\n    enum PolicyHook {\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreCallOnIntegration,\\r\\n        PostCallOnIntegration\\r\\n    }\\r\\n\\r\\n    function validatePolicies(\\r\\n        address,\\r\\n        PolicyHook,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8b9669ae704f434c72d4aa2b9eb3468dab5db58d708d44b84664faa7885dfc63\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\n\\n/// @title ExtensionBase Contract\\n/// @notice Base class for an extension\\nabstract contract ExtensionBase is IExtension {\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\n\\n    /// @notice Allows extension to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overridden.\\n    function activateForFund(bool) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\n    /// @dev Unimplemented by default, may be overridden.\\n    function deactivateForFund() external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\n    /// and dispatches the appropriate action\\n    /// @dev Unimplemented by default, may be overridden.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\n    }\\n\\n    /// @notice Allows extension to run logic during fund configuration\\n    /// @dev Unimplemented by default, may be overridden.\\n    function setConfigForFund(bytes calldata) external virtual override {\\n        return;\\n    }\\n\\n    function actionForRedeem(\\n        address,\\n        uint256[] memory, \\n        address[] memory\\n    ) external virtual override {\\n        return;    \\n    }\\n\\n    /// @dev Helper to validate a ComptrollerProxy-VaultProxy relation, which we store for both\\n    /// gas savings and to guarantee a spoofed ComptrollerProxy does not change getVaultProxy().\\n    /// Will revert without reason if the expected interfaces do not exist.\\n    function __setValidatedVaultProxy(address _comptrollerProxy)\\n        internal\\n        returns (address vaultProxy_)\\n    {\\n        require(\\n            comptrollerProxyToVaultProxy[_comptrollerProxy] == address(0),\\n            \\\"__setValidatedVaultProxy: Already set\\\"\\n        );\\n\\n        vaultProxy_ = IComptroller(_comptrollerProxy).getVaultProxy();\\n        require(vaultProxy_ != address(0), \\\"__setValidatedVaultProxy: Missing vaultProxy\\\");\\n\\n        require(\\n            _comptrollerProxy == IVault(vaultProxy_).getAccessor(),\\n            \\\"__setValidatedVaultProxy: Not the VaultProxy accessor\\\"\\n        );\\n\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = vaultProxy_;\\n\\n        return vaultProxy_;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return vaultProxy_ The VaultProxy of the fund\\n    function getVaultProxyForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (address vaultProxy_)\\n    {\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0x2d177f01842803aa9dfa56ac5c5c67f25ae6bee1580ec2aae9076b3b96331604\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf67dbe07cf44b330c5f4a1c236f59fa913d72bea666144b0fca4bbd1945f69b0\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\n\\r\\n/// @title PermissionedVaultActionMixin Contract\\r\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\r\\nabstract contract PermissionedVaultActionMixin {\\r\\n    /// @notice Adds a tracked asset to the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to add\\r\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.AddTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset for which to grant an allowance\\r\\n    /// @param _target The spender of the allowance\\r\\n    /// @param _amount The amount of the allowance\\r\\n    function __approveAssetSpender(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.ApproveAssetSpender,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Burns fund shares for a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account for which to burn shares\\r\\n    /// @param _amount The amount of shares to burn\\r\\n    function __burnShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.BurnShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Mints fund shares to a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account to which to mint shares\\r\\n    /// @param _amount The amount of shares to mint\\r\\n    function __mintShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.MintShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Removes a tracked asset from the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to remove\\r\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.RemoveTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers fund shares from one account to another\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _from The account from which to transfer shares\\r\\n    /// @param _to The account to which to transfer shares\\r\\n    /// @param _amount The amount of shares to transfer\\r\\n    function __transferShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.TransferShares,\\r\\n            abi.encode(_from, _to, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to withdraw\\r\\n    /// @param _target The account to which to withdraw the asset\\r\\n    /// @param _amount The amount of asset to withdraw\\r\\n    function __withdrawAssetTo(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.WithdrawAssetTo,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d32b03e0edd736f7b395e7fca776ed70e0560abb50932b50b4c86343e5fc82e\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xb7e4dd73597568e591a91a97c440c1d8674695fd71cb9fc8fb8f28ab50fe3833\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\n\\r\\n/// @title SynthetixPriceFeed Contract\\r\\n/// @notice A price feed that uses Synthetix oracles as price sources\\r\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\r\\n\\r\\n    event SynthCurrencyKeyUpdated(\\r\\n        address indexed synth,\\r\\n        bytes32 prevCurrencyKey,\\r\\n        bytes32 nextCurrencyKey\\r\\n    );\\r\\n\\r\\n    uint256 private constant SYNTH_UNIT = 10**18;\\r\\n    address private immutable ADDRESS_RESOLVER;\\r\\n    address private immutable SUSD;\\r\\n\\r\\n    mapping(address => bytes32) private synthToCurrencyKey;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _addressResolver,\\r\\n        address _sUSD,\\r\\n        address[] memory _synths\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        ADDRESS_RESOLVER = _addressResolver;\\r\\n        SUSD = _sUSD;\\r\\n\\r\\n        address[] memory sUSDSynths = new address[](1);\\r\\n        sUSDSynths[0] = _sUSD;\\r\\n\\r\\n        __addSynths(sUSDSynths);\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = SUSD;\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n\\r\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\r\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\r\\n\\r\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\r\\n            \\\"ExchangeRates\\\",\\r\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\r\\n            currencyKey\\r\\n        );\\r\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\r\\n\\r\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\r\\n\\r\\n        return (underlyings_, underlyingAmounts_);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\r\\n        return getCurrencyKeyForSynth(_asset) != 0;\\r\\n    }\\r\\n\\r\\n    /////////////////////\\r\\n    // SYNTHS REGISTRY //\\r\\n    /////////////////////\\r\\n\\r\\n    /// @notice Adds Synths to the price feed\\r\\n    /// @param _synths Synths to add\\r\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\r\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\r\\n\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the cached currencyKey value for specified Synths\\r\\n    /// @param _synths Synths to update\\r\\n    /// @dev Anybody can call this function\\r\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\r\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\r\\n\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\r\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\r\\n\\r\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(\\r\\n                nextCurrencyKey != prevCurrencyKey,\\r\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\r\\n            );\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\r\\n\\r\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add Synths\\r\\n    function __addSynths(address[] memory _synths) private {\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\r\\n\\r\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\r\\n\\r\\n            emit SynthAdded(_synths[i], currencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to query a currencyKey from Synthetix\\r\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\r\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\r\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\r\\n    function getAddressResolver() external view returns (address) {\\r\\n        return ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for multiple given Synths\\r\\n    /// @return currencyKeys_ The currencyKey values\\r\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32[] memory currencyKeys_)\\r\\n    {\\r\\n        currencyKeys_ = new bytes32[](_synths.length);\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\r\\n        }\\r\\n\\r\\n        return currencyKeys_;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SUSD` variable\\r\\n    /// @return susd_ The `SUSD` variable value\\r\\n    function getSUSD() external view returns (address susd_) {\\r\\n        return SUSD;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for a given Synth\\r\\n    /// @return currencyKey_ The currencyKey value\\r\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\r\\n        return synthToCurrencyKey[_synth];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc269c68629539538b8cb41718390bc7d13f8d3dc13675c71e87be25cbe3302ad\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x291f3419a5ecbfec0ce1a5799aca6e8cdeb0b292f6bac8911cf45a547617a442\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IValueInterpreter interface\\r\\n/// @notice Interface for ValueInterpreter\\r\\ninterface IValueInterpreter {\\r\\n    function calcCanonicalAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcCanonicalAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xf323aef46306641ac24642142244a6cca2cd7e9f12840129d0d7ba9d30b0ac01\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetix Interface\\r\\ninterface ISynthetix {\\r\\n    function exchangeOnBehalfWithTracking(\\r\\n        address,\\r\\n        bytes32,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes32\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7d86d41a7a402c09d74c48c869e58c2a9279bf47a78c9baa7f58e164099976c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixAddressResolver Interface\\r\\ninterface ISynthetixAddressResolver {\\r\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc42fdd4fb7ee1fc7d7403ee9ac4478277c2a48937d42fbf71e2a5cd52b844862\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchangeRates Interface\\r\\ninterface ISynthetixExchangeRates {\\r\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4b55f601798360e27c9e260a5bc2c50b32aa95ddbf04cd1d30be601a7d354779\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchanger Interface\\r\\ninterface ISynthetixExchanger {\\r\\n    function getAmountsForExchange(\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        bytes32\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function settle(address, bytes32)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xc55eecdce846f0af57ec7297f503333105b12d5bcb4bf5f931bf9bd965134c9c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixProxyERC20 Interface\\r\\ninterface ISynthetixProxyERC20 {\\r\\n    function target() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x3f02cc1f2827ff2913eab9029168c871fef1a7e4742815f516c1979e511d5cb2\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixSynth Interface\\r\\ninterface ISynthetixSynth {\\r\\n    function currencyKey() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ab942def2f5aa0a95bbdf3c125022c170c5cb130247968087e57643d0422524\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title AddressArray Library\\r\\n/// @notice A library to extend the address array data type\\r\\nlibrary AddressArrayLib {\\r\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\r\\n    function addItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length + 1);\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            nextArray_[i] = _self[i];\\r\\n        }\\r\\n        nextArray_[_self.length] = _itemToAdd;\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\r\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (contains(_self, _itemToAdd)) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        return addItem(_self, _itemToAdd);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if an array contains a particular value\\r\\n    function contains(address[] memory _self, address _target)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool doesContain_)\\r\\n    {\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (_target == _self[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to reassign all items in an array with a specified value\\r\\n    function fill(address[] memory _self, address _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length);\\r\\n        for (uint256 i; i < nextArray_.length; i++) {\\r\\n            nextArray_[i] = _value;\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if array is a set of unique values.\\r\\n    /// Does not assert length > 0.\\r\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\r\\n        if (_self.length <= 1) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = _self.length;\\r\\n        for (uint256 i; i < arrayLength; i++) {\\r\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\r\\n                if (_self[i] == _self[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\r\\n    /// Does not assert uniqueness of either array.\\r\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (_itemsToRemove.length == 0) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\r\\n        uint256 remainingItemsCount = _self.length;\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (contains(_itemsToRemove, _self[i])) {\\r\\n                indexesToRemove[i] = true;\\r\\n                remainingItemsCount--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (remainingItemsCount == _self.length) {\\r\\n            nextArray_ = _self;\\r\\n        } else if (remainingItemsCount > 0) {\\r\\n            nextArray_ = new address[](remainingItemsCount);\\r\\n            uint256 nextArrayIndex;\\r\\n            for (uint256 i; i < _self.length; i++) {\\r\\n                if (!indexesToRemove[i]) {\\r\\n                    nextArray_[nextArrayIndex] = _self[i];\\r\\n                    nextArrayIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab1eb0f60ae734c6ab8351012c2f58accbca5ace1a3d46767b70b85bc705e4d6\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixExchanger.sol\\\";\\r\\n\\r\\n/// @title AssetFinalityResolver Contract\\r\\n/// @notice A contract that helps achieve asset finality\\r\\nabstract contract AssetFinalityResolver {\\r\\n    address internal immutable SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    address internal immutable SYNTHETIX_PRICE_FEED;\\r\\n\\r\\n    constructor(address _synthetixPriceFeed, address _synthetixAddressResolver) public {\\r\\n        SYNTHETIX_ADDRESS_RESOLVER = _synthetixAddressResolver;\\r\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to finalize a Synth balance at a given target address and return its balance\\r\\n    function __finalizeIfSynthAndGetAssetBalance(\\r\\n        address _target,\\r\\n        address _asset,\\r\\n        bool _requireFinality\\r\\n    ) internal returns (uint256 assetBalance_) {\\r\\n        bytes32 currencyKey = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED).getCurrencyKeyForSynth(\\r\\n            _asset\\r\\n        );\\r\\n        if (currencyKey != 0) {\\r\\n            address synthetixExchanger = ISynthetixAddressResolver(SYNTHETIX_ADDRESS_RESOLVER)\\r\\n                .requireAndGetAddress(\\r\\n                    \\\"Exchanger\\\",\\r\\n                    \\\"finalizeAndGetAssetBalance: Missing Exchanger\\\"\\r\\n                );\\r\\n            try ISynthetixExchanger(synthetixExchanger).settle(_target, currencyKey) {} catch {\\r\\n                require(!_requireFinality, \\\"finalizeAndGetAssetBalance: Cannot settle Synth\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ERC20(_asset).balanceOf(_target);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\\r\\n    /// @return synthetixAddressResolver_ The `SYNTHETIX_ADDRESS_RESOLVER` variable value\\r\\n    function getSynthetixAddressResolver()\\r\\n        external\\r\\n        view\\r\\n        returns (address synthetixAddressResolver_)\\r\\n    {\\r\\n        return SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\r\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\r\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\r\\n        return SYNTHETIX_PRICE_FEED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x148fbfa07481c35d6143cd4e222496f8617aeaf6cb8444305bf97efdcecb9738\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806380d57063116100ad578063a9f3b42f11610071578063a9f3b42f14610241578063aa051c2c14610254578063bd8e959a14610274578063e2a1b3981461027c578063ec7c39e91461028f57610121565b806380d57063146101f8578063893d20e81461020b57806389cbe1d01461021357806397c0ac871461022657806399c735831461022e57610121565b80633c470297116100f45780633c4702971461018c578063467903461461019f57806353acffa0146101bf578063557c944c146101d25780637759c164146101e557610121565b806306bbda64146101265780631bee801e1461014457806324da4f19146101595780633a687cf41461016c575b600080fd5b61012e6102a2565b60405161013b9190613604565b60405180910390f35b610157610152366004612aa9565b610337565b005b610157610167366004612b10565b6103d0565b61017f61017a366004612980565b610847565b60405161013b919061365f565b61017f61019a366004612980565b610869565b6101b26101ad366004612980565b610887565b60405161013b9190613521565b61017f6101cd366004612a79565b6108a5565b6101576101e03660046129fe565b610842565b6101576101f3366004612ce1565b6108f2565b610157610206366004612c70565b610938565b6101b2610a3a565b610157610221366004612cac565b610ad2565b6101b2610cd1565b61017f61023c366004612980565b610cf5565b61012e61024f366004612980565b610d02565b6102676102623660046129c4565b610d78565b60405161013b91906137cc565b610157610da3565b61015761028a366004612b10565b610dd5565b61017f61029d366004612a79565b610f95565b60606102ae6001610fbd565b6001600160401b03811180156102c357600080fd5b506040519080825280602002602001820160405280156102ed578160200160208202803683370190505b50905060005b815181101561033357610307600182610fc8565b82828151811061031357fe5b6001600160a01b03909216602092830291909101909101526001016102f3565b5090565b826103605761035b3360006040518060200160405280600081525060006001610fdb565b6103ca565b82600114156103a95761035b3383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110bf92505050565b60405162461bcd60e51b81526004016103c1906136ec565b60405180910390fd5b50505050565b6103d8610a3a565b6001600160a01b0316336001600160a01b0316146104085760405162461bcd60e51b81526004016103c1906136bc565b806104255760405162461bcd60e51b81526004016103c1906137ac565b60005b818110156108425761045483838381811061043f57fe5b905060200201602081019061023c9190612980565b156104715760405162461bcd60e51b81526004016103c19061377c565b61049d83838381811061048057fe5b90506020020160208101906104959190612980565b600190611788565b5060008383838181106104ac57fe5b90506020020160208101906104c19190612980565b9050606080600080846001600160a01b031663cbf54bb26040518163ffffffff1660e01b815260040160006040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261053e9190810190612be2565b935093509350935060005b84518110156105ec576001600560008b8b8b81811061056457fe5b90506020020160208101906105799190612980565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008784815181106105a757fe5b602002602001015160058111156105ba57fe5b60058111156105c557fe5b81526020810191909152604001600020805460ff1916911515919091179055600101610549565b5060005b8351811015610693576001600660008b8b8b81811061060b57fe5b90506020020160208101906106209190612980565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061064e57fe5b6020026020010151600581111561066157fe5b600581111561066c57fe5b81526020810191909152604001600020805460ff19169115159190911790556001016105f0565b5081156106ea576001600360008a8a8a8181106106ac57fe5b90506020020160208101906106c19190612980565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b8015610740576001600460008a8a8a81811061070257fe5b90506020020160208101906107179190612980565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b846001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b59190810190612d81565b6040516107c29190613515565b60405180910390208888888181106107d657fe5b90506020020160208101906107eb9190612980565b6001600160a01b03167f0cc09421dfd6f16fe9f3e1329fe97c2c82bed949019621d503a1220831abb62e868686866040516108299493929190613615565b60405180910390a3505060019093019250610428915050565b505050565b6001600160a01b03811660009081526003602052604090205460ff165b919050565b6001600160a01b031660009081526004602052604090205460ff1690565b6001600160a01b039081166000908152602081905260409020541690565b6001600160a01b0382166000908152600660205260408120818360058111156108ca57fe5b60058111156108d557fe5b815260208101919091526040016000205460ff1690505b92915050565b6103ca338585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525087925060019150610fdb9050565b60006109433361179d565b33600090815260076020908152604091829020805483518184028101840190945280845293945060609390918301828280156109a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161098a575b5050505050905060005b81518110156103ca578181815181106109c757fe5b60200260200101516001600160a01b0316633146d05833856040518363ffffffff1660e01b81526004016109fc92919061352f565b600060405180830381600087803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b5050600190920191506109b29050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906129a6565b905090565b606080610ae183850185612b85565b915091508051825114610b065760405162461bcd60e51b81526004016103c19061370c565b610b0f82611943565b610b2b5760405162461bcd60e51b81526004016103c19061374c565b60005b8251811015610cca57610b53838281518110610b4657fe5b6020026020010151610cf5565b610b6f5760405162461bcd60e51b81526004016103c1906136ac565b828181518110610b7b57fe5b60200260200101516001600160a01b0316630f5f6b4f33848481518110610b9e57fe5b60200260200101516040518363ffffffff1660e01b8152600401610bc392919061354a565b600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050336000908152600760205260409020855190925085915083908110610c1457fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558251839082908110610c5d57fe5b60200260200101516001600160a01b0316336001600160a01b03167f62b7814f137868e44c7a83c2b0a340fc5dacef8f3e748867d0f5f879fc0ef6da848481518110610ca557fe5b6020026020010151604051610cba919061366d565b60405180910390a3600101610b2e565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006108ec6001836119d7565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610d6c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d4e575b50505050509050919050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610dc133600060405180602001604052806000815250600080610fdb565b610dca336119ec565b610dd333611c26565b565b610ddd610a3a565b6001600160a01b0316336001600160a01b031614610e0d5760405162461bcd60e51b81526004016103c1906136bc565b80610e2a5760405162461bcd60e51b81526004016103c19061375c565b60005b8181101561084257610e4483838381811061043f57fe5b610e605760405162461bcd60e51b81526004016103c19061378c565b610e8c838383818110610e6f57fe5b9050602002016020810190610e849190612980565b600190611c6e565b50828282818110610e9957fe5b9050602002016020810190610eae9190612980565b6001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f229190810190612d81565b604051610f2f9190613515565b6040518091039020838383818110610f4357fe5b9050602002016020810190610f589190612980565b6001600160a01b03167f3a9db4e30d2c448ca18bdd1a6c2e611b9f28cee12f4f6faf79722a0ea2d7242360405160405180910390a3600101610e2d565b6001600160a01b0382166000908152600560208190526040822090829084908111156108ca57fe5b60006108ec82611c83565b6000610fd48383611c87565b9392505050565b6001600160a01b03851660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561104557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611027575b5050505050905080516000141561105c5750610cca565b600061106787610887565b90506001600160a01b03811661108f5760405162461bcd60e51b81526004016103c1906137bc565b600061109f8883858a8a8a611ccc565b905083156110b5576110b58883858a8a86611d54565b5050505050505050565b6060818060200190518101906110d59190612b51565b905060006110e233610887565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631d68702d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113d57600080fd5b505afa158015611151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117591906129a6565b600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636df1bb4e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190612db5565b600955600080805b84518110156116c45784818151811061124957fe5b60200260200101516001600160a01b031663b78b481388866040518363ffffffff1660e01b815260040161127e92919061356a565b602060405180830381600087803b15801561129857600080fd5b505af11580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d09190612c8e565b6112d9576116bc565b6001600160a01b03871660009081526008602052604081208651829088908590811061130157fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050806000141561133b57506116bc565b60006113ef87848151811061134c57fe5b60200260200101516001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b15801561138c57600080fd5b505afa1580156113a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113c89190810190612d81565b6040518060400160405280600981526020016853545245414d494e4760b81b815250611e1b565b156114035750806114008180611e74565b91505b6114b787848151811061141257fe5b60200260200101516001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b15801561145257600080fd5b505afa158015611466573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148e9190810190612d81565b6040518060400160405280600b81526020016a504552464f524d414e434560a81b815250611e1b565b156114f2576114e3670de0b6b3a76400006114dd60095485611e9c90919063ffffffff16565b90611ed6565b90506114ef8282611e74565b91505b6115ad87848151811061150157fe5b60200260200101516001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261157d9190810190612d81565b60405180604001604052806012815260200171504552464f524d414e43455f485552444c4560701b815250611e1b565b156115e2576115d3670de0b6b3a76400006114dd60095485611e9c90919063ffffffff16565b90506115df8282611e74565b91505b6115ec8583611f08565b94506115f88482611f08565b93506000600860008b6001600160a01b03166001600160a01b03168152602001908152602001600020600089868151811061162f57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555086838151811061166757fe5b60200260200101516001600160a01b0316896001600160a01b03167fcda32f0422c94049db811f90e9e3e2537f709654eeb3e087d70a5e33916df9a5846040516116b191906137cc565b60405180910390a350505b600101611234565b508115611747576117478684856001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561170957600080fd5b505afa15801561171d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174191906129a6565b85611f2d565b6000811180156117615750600a546001600160a01b031615155b1561178057600a5461178090879085906001600160a01b031684611f2d565b505050505050565b6000610fd4836001600160a01b038416611fad565b6001600160a01b03818116600090815260208190526040812054909116156117d75760405162461bcd60e51b81526004016103c19061369c565b816001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184891906129a6565b90506001600160a01b0381166118705760405162461bcd60e51b81526004016103c1906136cc565b806001600160a01b0316635a53e3486040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a957600080fd5b505afa1580156118bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e191906129a6565b6001600160a01b0316826001600160a01b0316146119115760405162461bcd60e51b81526004016103c19061373c565b6001600160a01b03918216600090815260208190526040902080546001600160a01b0319169282169290921790915590565b6000600182511161195657506001610864565b815160005b818110156119cd57600181015b828110156119c45784818151811061197c57fe5b60200260200101516001600160a01b031685838151811061199957fe5b60200260200101516001600160a01b031614156119bc5760009350505050610864565b600101611968565b5060010161195b565b5060019392505050565b6000610fd4836001600160a01b038416611ff7565b60006119f782610887565b90506000816001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401611a279190613521565b60206040518083038186803b158015611a3f57600080fd5b505afa158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a779190612db5565b905080611a85575050611c23565b6001600160a01b038316600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015611aef57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ad1575b5050505050905060005b8151811015611b59576001600160a01b03851660009081526008602052604081208351909190849084908110611b2b57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600090812055600101611af9565b506000836001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9557600080fd5b505afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906129a6565b9050611bdb85858386611f2d565b846001600160a01b03167fe1ddc13838bdb841a7c5c11b6f7c9bde7199c71756f2ba118de8cf3e036b91f68285604051611c169291906135e9565b60405180910390a2505050505b50565b6001600160a01b0381166000908152600760205260408120611c47916125b0565b6001600160a01b0316600090815260208190526040902080546001600160a01b0319169055565b6000610fd4836001600160a01b03841661200f565b5490565b81546000908210611caa5760405162461bcd60e51b81526004016103c19061368c565b826000018281548110611cb957fe5b9060005260206000200154905092915050565b8060005b8551811015611d4857611cf6868281518110611ce857fe5b602002602001015186610f95565b611cff57611d40565b611d1d88878381518110611d0f57fe5b6020026020010151846120d5565b9150611d408888888481518110611d3057fe5b602002602001015188888761219e565b600101611cd0565b505b9695505050505050565b8060005b85518110156110b557611d7e868281518110611d7057fe5b6020026020010151866108a5565b611d8757611e13565b611d9788878381518110611d0f57fe5b9150858181518110611da557fe5b60200260200101516001600160a01b031663233faf5f89898888876040518663ffffffff1660e01b8152600401611de0959493929190613578565b600060405180830381600087803b158015611dfa57600080fd5b505af1158015611e0e573d6000803e3d6000fd5b505050505b600101611d58565b600081604051602001611e2e9190613515565b6040516020818303038152906040528051906020012083604051602001611e559190613515565b6040516020818303038152906040528051906020012014905092915050565b600082821115611e965760405162461bcd60e51b81526004016103c1906136fc565b50900390565b600082611eab575060006108ec565b82820282848281611eb857fe5b0414610fd45760405162461bcd60e51b81526004016103c19061376c565b6000808211611ef75760405162461bcd60e51b81526004016103c19061372c565b818381611f0057fe5b049392505050565b600082820183811015610fd45760405162461bcd60e51b81526004016103c1906136dc565b836001600160a01b03166310acd06d6003858585604051602001611f53939291906135c1565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611f7f92919061367e565b600060405180830381600087803b158015611f9957600080fd5b505af11580156110b5573d6000803e3d6000fd5b6000611fb98383611ff7565b611fef575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108ec565b5060006108ec565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156120cb578354600019808301919081019060009087908390811061204257fe5b906000526020600020015490508087600001848154811061205f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061208f57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506108ec565b60009150506108ec565b6000811580156120e957506120e983610869565b1561219757604051637a89e49360e11b81526000906001600160a01b0386169063f513c9269061211e9060019060040161365f565b6040805180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f9190612dd3565b9092509050806121915760405162461bcd60e51b81526004016103c19061371c565b50610fd4565b5092915050565b6000806000866001600160a01b03166341892d7e8a8a8989896040518663ffffffff1660e01b81526004016121d7959493929190613578565b606060405180830381600087803b1580156121f157600080fd5b505af1158015612205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122299190612d3e565b91945092509050600083600581111561223e57fe5b141561224c57505050611780565b6000600184600581111561225c57fe5b14156122e657886001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561229b57600080fd5b505afa1580156122af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d391906129a6565b90506122e18a848385611f2d565b61249e565b60028460058111156122f457fe5b141561237857886001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b91906129a6565b90506122e18a8284612505565b600384600581111561238657fe5b1415612397576122e18a848461258c565b60048460058111156123a557fe5b141561240e576001600160a01b03808b166000908152600860209081526040808320938c16835292905220546123db9083611f08565b6001600160a01b03808c166000908152600860209081526040808320938d168352929052205550876122e18a8284612505565b600584600581111561241c57fe5b1415612486576001600160a01b03808b166000908152600860209081526040808320938c16835292905220546124529083611e74565b6001600160a01b03808c166000908152600860209081526040808320938d16835292905220558892506122e18a848461258c565b60405162461bcd60e51b81526004016103c19061379c565b8360058111156124aa57fe5b886001600160a01b03168b6001600160a01b03167fef7da7c40d1fc52df907f6fed0e539680d5fb491c3b8f94db234a360dafe1d628685876040516124f1939291906135c1565b60405180910390a450505050505050505050565b826001600160a01b03166310acd06d600284846040516020016125299291906135e9565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161255592919061367e565b600060405180830381600087803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b50505050505050565b826001600160a01b03166310acd06d600184846040516020016125299291906135e9565b5080546000825590600052602060002090810190611c2391905b8082111561033357600081556001016125ca565b80356108ec8161390f565b80516108ec8161390f565b60008083601f84011261260657600080fd5b5081356001600160401b0381111561261d57600080fd5b60208301915083602082028301111561263557600080fd5b9250929050565b600082601f83011261264d57600080fd5b813561266061265b82613800565b6137da565b9150818183526020840193506020810190508385602084028201111561268557600080fd5b60005b838110156126b1578161269b88826125de565b8452506020928301929190910190600101612688565b5050505092915050565b600082601f8301126126cc57600080fd5b81516126da61265b82613800565b915081818352602084019350602081019050838560208402820111156126ff57600080fd5b60005b838110156126b1578161271588826125e9565b8452506020928301929190910190600101612702565b600082601f83011261273c57600080fd5b813561274a61265b82613800565b81815260209384019390925082018360005b838110156126b1578135860161277288826128bf565b845250602092830192919091019060010161275c565b600082601f83011261279957600080fd5b81516127a761265b82613800565b915081818352602084019350602081019050838560208402820111156127cc57600080fd5b60005b838110156126b157816127e28882612919565b84525060209283019291909101906001016127cf565b600082601f83011261280957600080fd5b813561281761265b82613800565b9150818183526020840193506020810190508385602084028201111561283c57600080fd5b60005b838110156126b15781612852888261296a565b845250602092830192919091019060010161283f565b80356108ec81613923565b80516108ec81613923565b60008083601f84011261289057600080fd5b5081356001600160401b038111156128a757600080fd5b60208301915083600182028301111561263557600080fd5b600082601f8301126128d057600080fd5b81356128de61265b82613820565b915080825260208301602083018583830111156128fa57600080fd5b6129058382846138b9565b50505092915050565b80356108ec8161392c565b80516108ec8161392c565b600082601f83011261293557600080fd5b815161294361265b82613820565b9150808252602083016020830185838301111561295f57600080fd5b6129058382846138c5565b80356108ec81613939565b80516108ec81613939565b60006020828403121561299257600080fd5b600061299e84846125de565b949350505050565b6000602082840312156129b857600080fd5b600061299e84846125e9565b600080604083850312156129d757600080fd5b60006129e385856125de565b92505060206129f4858286016125de565b9150509250929050565b600080600060608486031215612a1357600080fd5b6000612a1f86866125de565b93505060208401356001600160401b03811115612a3b57600080fd5b612a47868287016127f8565b92505060408401356001600160401b03811115612a6357600080fd5b612a6f8682870161263c565b9150509250925092565b60008060408385031215612a8c57600080fd5b6000612a9885856125de565b92505060206129f48582860161290e565b60008060008060608587031215612abf57600080fd5b6000612acb87876125de565b9450506020612adc8782880161296a565b93505060408501356001600160401b03811115612af857600080fd5b612b048782880161287e565b95989497509550505050565b60008060208385031215612b2357600080fd5b82356001600160401b03811115612b3957600080fd5b612b45858286016125f4565b92509250509250929050565b600060208284031215612b6357600080fd5b81516001600160401b03811115612b7957600080fd5b61299e848285016126bb565b60008060408385031215612b9857600080fd5b82356001600160401b03811115612bae57600080fd5b612bba8582860161263c565b92505060208301356001600160401b03811115612bd657600080fd5b6129f48582860161272b565b60008060008060808587031215612bf857600080fd5b84516001600160401b03811115612c0e57600080fd5b612c1a87828801612788565b94505060208501516001600160401b03811115612c3657600080fd5b612c4287828801612788565b9350506040612c5387828801612873565b9250506060612c6487828801612873565b91505092959194509250565b600060208284031215612c8257600080fd5b600061299e8484612868565b600060208284031215612ca057600080fd5b600061299e8484612873565b60008060208385031215612cbf57600080fd5b82356001600160401b03811115612cd557600080fd5b612b458582860161287e565b60008060008060608587031215612cf757600080fd5b6000612d03878761290e565b94505060208501356001600160401b03811115612d1f57600080fd5b612d2b8782880161287e565b93509350506040612c648782880161296a565b600080600060608486031215612d5357600080fd5b6000612d5f8686612919565b9350506020612d70868287016125e9565b9250506040612a6f86828701612975565b600060208284031215612d9357600080fd5b81516001600160401b03811115612da957600080fd5b61299e84828501612924565b600060208284031215612dc757600080fd5b600061299e8484612975565b60008060408385031215612de657600080fd5b6000612df28585612975565b92505060206129f485828601612873565b6000612e0f8383612e32565b505060200190565b6000612e0f8383612f23565b612e2c8161388d565b82525050565b612e2c8161385a565b6000612e468261384d565b612e508185613851565b9350612e5b83613847565b8060005b83811015612e89578151612e738882612e03565b9750612e7e83613847565b925050600101612e5f565b509495945050505050565b6000612e9f8261384d565b612ea98185613851565b9350612eb483613847565b8060005b83811015612e89578151612ecc8882612e17565b9750612ed783613847565b925050600101612eb8565b612e2c81613865565b6000612ef68261384d565b612f008185613851565b9350612f108185602086016138c5565b612f19816138f1565b9093019392505050565b612e2c81613898565b612e2c816138a3565b6000612f408261384d565b612f4a8185610864565b9350612f5a8185602086016138c5565b9290920192915050565b6000612f71602283613851565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e815261647360f01b602082015260400192915050565b6000612fb5602583613851565b7f5f5f73657456616c6964617465645661756c7450726f78793a20416c726561648152641e481cd95d60da1b602082015260400192915050565b6000612ffc602783613851565b7f736574436f6e666967466f7246756e643a20466565206973206e6f74207265678152661a5cdd195c995960ca1b602082015260400192915050565b6000613045604983613851565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b60006130b6602c83613851565b7f5f5f73657456616c6964617465645661756c7450726f78793a204d697373696e81526b67207661756c7450726f787960a01b602082015260400192915050565b6000613104601b83613851565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b600061313d602d83613851565b7f7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e766181526c1b1a590817d858dd1a5bdb9259609a1b602082015260400192915050565b600061318c601e83613851565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b60006131c5603d83613851565b7f736574436f6e666967466f7246756e643a206665657320616e6420736574746981527f6e677344617461206172726179206c656e6774687320756e657175616c000000602082015260400192915050565b6000613224602083613851565b7f5f5f67657447617641734e65636573736172793a20496e76616c696420474156815260200192915050565b600061325d601a83613851565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000613296603583613851565b7f5f5f73657456616c6964617465645661756c7450726f78793a204e6f7420746881527432902b30bab63a283937bc3c9030b1b1b2b9b9b7b960591b602082015260400192915050565b60006132ed603083613851565b7f736574436f6e666967466f7246756e643a20666565732063616e6e6f7420696e81526f636c756465206475706c69636174657360801b602082015260400192915050565b600061333f602583613851565b7f64657265676973746572466565733a205f666565732063616e6e6f7420626520815264656d70747960d81b602082015260400192915050565b6000613386602183613851565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006133c9602483613851565b7f7265676973746572466565733a2066656520616c726561647920726567697374815263195c995960e21b602082015260400192915050565b600061340f602583613851565b7f64657265676973746572466565733a20666565206973206e6f742072656769738152641d195c995960da1b602082015260400192915050565b6000613456602383613851565b7f5f5f736574746c654665653a20496e76616c696420536574746c656d656e745481526279706560e81b602082015260400192915050565b600061349b602383613851565b7f7265676973746572466565733a205f666565732063616e6e6f7420626520656d81526270747960e81b602082015260400192915050565b60006134e0602083613851565b7f5f5f696e766f6b65486f6f6b3a2046756e64206973206e6f7420616374697665815260200192915050565b612e2c8161388a565b6000610fd48284612f35565b602081016108ec8284612e32565b6040810161353d8285612e23565b610fd46020830184612e32565b604081016135588285612e23565b818103602083015261299e8184612eeb565b6040810161353d8285612e32565b60a081016135868288612e32565b6135936020830187612e32565b6135a06040830186612f23565b81810360608301526135b28185612eeb565b9050611d4a608083018461350c565b606081016135cf8286612e32565b6135dc6020830185612e32565b61299e604083018461350c565b604081016135f78285612e32565b610fd4602083018461350c565b60208082528101610fd48184612e3b565b608080825281016136268187612e94565b9050818103602083015261363a8186612e94565b90506136496040830185612ee2565b6136566060830184612ee2565b95945050505050565b602081016108ec8284612ee2565b60208082528101610fd48184612eeb565b604081016135588285612f2c565b602080825281016108ec81612f64565b602080825281016108ec81612fa8565b602080825281016108ec81612fef565b602080825281016108ec81613038565b602080825281016108ec816130a9565b602080825281016108ec816130f7565b602080825281016108ec81613130565b602080825281016108ec8161317f565b602080825281016108ec816131b8565b602080825281016108ec81613217565b602080825281016108ec81613250565b602080825281016108ec81613289565b602080825281016108ec816132e0565b602080825281016108ec81613332565b602080825281016108ec81613379565b602080825281016108ec816133bc565b602080825281016108ec81613402565b602080825281016108ec81613449565b602080825281016108ec8161348e565b602080825281016108ec816134d3565b602081016108ec828461350c565b6040518181016001600160401b03811182821017156137f857600080fd5b604052919050565b60006001600160401b0382111561381657600080fd5b5060209081020190565b60006001600160401b0382111561383657600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b60006108ec8261387e565b151590565b80610864816138fb565b8061086481613905565b6001600160a01b031690565b90565b60006108ec826138ae565b60006108ec8261386a565b60006108ec82613874565b60006108ec8261385a565b82818337506000910152565b60005b838110156138e05781810151838201526020016138c8565b838111156103ca5750506000910152565b601f01601f191690565b60068110611c2357fe5b60088110611c2357fe5b6139188161385a565b8114611c2357600080fd5b61391881613865565b60068110611c2357600080fd5b6139188161388a56fea26469706673582212200d6ea2ca695fa57283629019e3d96f73c9c882bf01164678a3be62e249ede0b864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deactivateForFund()": {
        "details": "msg.sender is validated during __invokeHook()"
      },
      "deregisterFees(address[])": {
        "params": {
          "_fees": "Addresses of fees to be deregistered"
        }
      },
      "feeSettlesOnHook(address,uint8)": {
        "params": {
          "_fee": "The address of the fee to check",
          "_hook": "The FeeHook to check"
        },
        "returns": {
          "settlesOnHook_": "True if the fee settles on the given hook"
        }
      },
      "feeUpdatesOnHook(address,uint8)": {
        "params": {
          "_fee": "The address of the fee to check",
          "_hook": "The FeeHook to check"
        },
        "returns": {
          "updatesOnHook_": "True if the fee updates on the given hook"
        }
      },
      "feeUsesGavOnSettle(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "usesGav_": "True if the fee uses GAV during settle() implementation"
        }
      },
      "feeUsesGavOnUpdate(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "usesGav_": "True if the fee uses GAV during update() implementation"
        }
      },
      "getEnabledFeesForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "enabledFees_": "An array of enabled fee addresses"
        }
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_fee": "The fee address"
        },
        "returns": {
          "sharesOutstanding_": "The amount of shares outstanding"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getRegisteredFees()": {
        "returns": {
          "registeredFees_": "A list of all registered fee addresses"
        }
      },
      "getVaultProxyForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "vaultProxy_": "The VaultProxy of the fund"
        }
      },
      "invokeHook(uint8,bytes,uint256)": {
        "params": {
          "_gav": "The GAV for a fund if known in the invocating code, otherwise 0",
          "_hook": "The FeeHook to invoke",
          "_settlementData": "The encoded settlement parameters specific to the FeeHook"
        }
      },
      "isRegisteredFee(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "isRegisteredFee_": "True if the fee is registered"
        }
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "details": "This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.",
        "params": {
          "_actionId": "An ID representing the desired action",
          "_callArgs": "Encoded arguments specific to the _actionId"
        }
      },
      "registerFees(address[])": {
        "details": "Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.",
        "params": {
          "_fees": "Addresses of fees to be registered"
        }
      },
      "setConfigForFund(bytes)": {
        "details": "Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.",
        "params": {
          "_configData": "Encoded config data"
        }
      }
    },
    "title": "FeeManager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(bool)": {
        "notice": "Activate already-configured fees for use in the calling fund"
      },
      "deactivateForFund()": {
        "notice": "Deactivate fees for a fund"
      },
      "deregisterFees(address[])": {
        "notice": "Remove fees from the list of registered fees"
      },
      "feeSettlesOnHook(address,uint8)": {
        "notice": "Checks if a fee implements settle() on a particular hook"
      },
      "feeUpdatesOnHook(address,uint8)": {
        "notice": "Checks if a fee implements update() on a particular hook"
      },
      "feeUsesGavOnSettle(address)": {
        "notice": "Checks if a fee uses GAV in its settle() implementation"
      },
      "feeUsesGavOnUpdate(address)": {
        "notice": "Checks if a fee uses GAV in its update() implementation"
      },
      "getEnabledFeesForFund(address)": {
        "notice": "Get a list of enabled fees for a given fund"
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "notice": "Get the amount of shares outstanding for a particular fee for a fund"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getRegisteredFees()": {
        "notice": "Get all registered fees"
      },
      "getVaultProxyForFund(address)": {
        "notice": "Gets the verified VaultProxy for a given ComptrollerProxy"
      },
      "invokeHook(uint8,bytes,uint256)": {
        "notice": "Allows all fees for a particular FeeHook to implement settle() and update() logic"
      },
      "isRegisteredFee(address)": {
        "notice": "Check whether a fee is registered"
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "notice": "Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy"
      },
      "registerFees(address[])": {
        "notice": "Add fees to the list of registered fees"
      },
      "setConfigForFund(bytes)": {
        "notice": "Enable and configure fees for use in the calling fund"
      }
    },
    "notice": "Manages fees for funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31995,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToVaultProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13801,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "registeredFees",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2091_storage"
      },
      {
        "astId": 13805,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToUsesGavOnSettle",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13809,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToUsesGavOnUpdate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13815,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToHookToImplementsSettle",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_enum(FeeHook)15339,t_bool))"
      },
      {
        "astId": 13821,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToHookToImplementsUpdate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_enum(FeeHook)15339,t_bool))"
      },
      {
        "astId": 13826,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFees",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 13832,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFeeToSharesOutstanding",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13836,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feePerform",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13838,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "daoAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(FeeHook)15339": {
        "encoding": "inplace",
        "label": "enum IFeeManager.FeeHook",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_enum(FeeHook)15339,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IFeeManager.FeeHook => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(FeeHook)15339,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(FeeHook)15339,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(FeeHook)15339",
        "label": "mapping(enum IFeeManager.FeeHook => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)2091_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2090,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1826_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1826_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1821,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1825,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}